/**
   * @license
   * author: Byron Bai
   * ghostban.js v3.0.0-alpha.16
   * Released under the MIT license.
   */
var ghostban=function(t,r){"use strict";function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=e(r);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function a(t,r){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,r){if(t){if("string"==typeof t)return u(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?u(t,r):void 0}}(t))||r&&t&&"number"==typeof t.length){e&&(t=e);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return a=t.done,t},e:function(t){s=!0,i=t},f:function(){try{a||null==e.return||e.return()}finally{if(s)throw i}}}}
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */var s=function(t,r){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])},s(t,r)};function c(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=t}s(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}var f=function(){return f=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var o in r=arguments[e])Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o]);return t},f.apply(this,arguments)};function l(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var n,o,i=e.call(t),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function p(t,r,e){if(e||2===arguments.length)for(var n,o=0,i=r.length;o<i;o++)!n&&o in r||(n||(n=Array.prototype.slice.call(r,0,o)),n[o]=r[o]);return t.concat(n||Array.prototype.slice.call(r))}var h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function y(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var d={exports:{}};!function(t,r){(function(){var e,n="Expected a function",i="__lodash_hash_undefined__",u="__lodash_placeholder__",a=16,s=32,c=64,f=128,l=256,p=1/0,y=9007199254740991,d=NaN,v=4294967295,g=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",a],["flip",512],["partial",s],["partialRight",c],["rearg",l]],m="[object Arguments]",D="[object Array]",w="[object Boolean]",b="[object Date]",A="[object Error]",x="[object Function]",E="[object GeneratorFunction]",F="[object Map]",_="[object Number]",C="[object Object]",S="[object Promise]",B="[object RegExp]",M="[object Set]",N="[object String]",O="[object Symbol]",P="[object WeakMap]",j="[object ArrayBuffer]",T="[object DataView]",I="[object Float32Array]",k="[object Float64Array]",R="[object Int8Array]",z="[object Int16Array]",U="[object Int32Array]",W="[object Uint8Array]",q="[object Uint8ClampedArray]",L="[object Uint16Array]",$="[object Uint32Array]",G=/\b__p \+= '';/g,Z=/\b(__p \+=) '' \+/g,V=/(__e\(.*?\)|\b__t\)) \+\n'';/g,J=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,Y=RegExp(J.source),K=RegExp(H.source),X=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,rt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,et=/^\w*$/,nt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ot=/[\\^$.*+?()[\]{}|]/g,it=RegExp(ot.source),ut=/^\s+/,at=/\s/,st=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ct=/\{\n\/\* \[wrapped with (.+)\] \*/,ft=/,? & /,lt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,pt=/[()=,{}\[\]\/\s]/,ht=/\\(\\)?/g,yt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,vt=/^[-+]0x[0-9a-f]+$/i,gt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,Dt=/^0o[0-7]+$/i,wt=/^(?:0|[1-9]\d*)$/,bt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,At=/($^)/,xt=/['\n\r\u2028\u2029\\]/g,Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ft="\\u2700-\\u27bf",_t="a-z\\xdf-\\xf6\\xf8-\\xff",Ct="A-Z\\xc0-\\xd6\\xd8-\\xde",St="\\ufe0e\\ufe0f",Bt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Mt="['’]",Nt="[\\ud800-\\udfff]",Ot="["+Bt+"]",Pt="["+Et+"]",jt="\\d+",Tt="[\\u2700-\\u27bf]",It="["+_t+"]",kt="[^\\ud800-\\udfff"+Bt+jt+Ft+_t+Ct+"]",Rt="\\ud83c[\\udffb-\\udfff]",zt="[^\\ud800-\\udfff]",Ut="(?:\\ud83c[\\udde6-\\uddff]){2}",Wt="[\\ud800-\\udbff][\\udc00-\\udfff]",qt="["+Ct+"]",Lt="(?:"+It+"|"+kt+")",$t="(?:"+qt+"|"+kt+")",Gt="(?:['’](?:d|ll|m|re|s|t|ve))?",Zt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Vt="(?:"+Pt+"|"+Rt+")"+"?",Jt="[\\ufe0e\\ufe0f]?",Ht=Jt+Vt+("(?:\\u200d(?:"+[zt,Ut,Wt].join("|")+")"+Jt+Vt+")*"),Yt="(?:"+[Tt,Ut,Wt].join("|")+")"+Ht,Kt="(?:"+[zt+Pt+"?",Pt,Ut,Wt,Nt].join("|")+")",Xt=RegExp(Mt,"g"),Qt=RegExp(Pt,"g"),tr=RegExp(Rt+"(?="+Rt+")|"+Kt+Ht,"g"),rr=RegExp([qt+"?"+It+"+"+Gt+"(?="+[Ot,qt,"$"].join("|")+")",$t+"+"+Zt+"(?="+[Ot,qt+Lt,"$"].join("|")+")",qt+"?"+Lt+"+"+Gt,qt+"+"+Zt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",jt,Yt].join("|"),"g"),er=RegExp("[\\u200d\\ud800-\\udfff"+Et+St+"]"),nr=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,or=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ir=-1,ur={};ur[I]=ur[k]=ur[R]=ur[z]=ur[U]=ur[W]=ur[q]=ur[L]=ur[$]=!0,ur[m]=ur[D]=ur[j]=ur[w]=ur[T]=ur[b]=ur[A]=ur[x]=ur[F]=ur[_]=ur[C]=ur[B]=ur[M]=ur[N]=ur[P]=!1;var ar={};ar[m]=ar[D]=ar[j]=ar[T]=ar[w]=ar[b]=ar[I]=ar[k]=ar[R]=ar[z]=ar[U]=ar[F]=ar[_]=ar[C]=ar[B]=ar[M]=ar[N]=ar[O]=ar[W]=ar[q]=ar[L]=ar[$]=!0,ar[A]=ar[x]=ar[P]=!1;var sr={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},cr=parseFloat,fr=parseInt,lr="object"==o(h)&&h&&h.Object===Object&&h,pr="object"==("undefined"==typeof self?"undefined":o(self))&&self&&self.Object===Object&&self,hr=lr||pr||Function("return this")(),yr=r&&!r.nodeType&&r,dr=yr&&t&&!t.nodeType&&t,vr=dr&&dr.exports===yr,gr=vr&&lr.process,mr=function(){try{var t=dr&&dr.require&&dr.require("util").types;return t||gr&&gr.binding&&gr.binding("util")}catch(t){}}(),Dr=mr&&mr.isArrayBuffer,wr=mr&&mr.isDate,br=mr&&mr.isMap,Ar=mr&&mr.isRegExp,xr=mr&&mr.isSet,Er=mr&&mr.isTypedArray;function Fr(t,r,e){switch(e.length){case 0:return t.call(r);case 1:return t.call(r,e[0]);case 2:return t.call(r,e[0],e[1]);case 3:return t.call(r,e[0],e[1],e[2])}return t.apply(r,e)}function _r(t,r,e,n){for(var o=-1,i=null==t?0:t.length;++o<i;){var u=t[o];r(n,u,e(u),t)}return n}function Cr(t,r){for(var e=-1,n=null==t?0:t.length;++e<n&&!1!==r(t[e],e,t););return t}function Sr(t,r){for(var e=null==t?0:t.length;e--&&!1!==r(t[e],e,t););return t}function Br(t,r){for(var e=-1,n=null==t?0:t.length;++e<n;)if(!r(t[e],e,t))return!1;return!0}function Mr(t,r){for(var e=-1,n=null==t?0:t.length,o=0,i=[];++e<n;){var u=t[e];r(u,e,t)&&(i[o++]=u)}return i}function Nr(t,r){return!!(null==t?0:t.length)&&Wr(t,r,0)>-1}function Or(t,r,e){for(var n=-1,o=null==t?0:t.length;++n<o;)if(e(r,t[n]))return!0;return!1}function Pr(t,r){for(var e=-1,n=null==t?0:t.length,o=Array(n);++e<n;)o[e]=r(t[e],e,t);return o}function jr(t,r){for(var e=-1,n=r.length,o=t.length;++e<n;)t[o+e]=r[e];return t}function Tr(t,r,e,n){var o=-1,i=null==t?0:t.length;for(n&&i&&(e=t[++o]);++o<i;)e=r(e,t[o],o,t);return e}function Ir(t,r,e,n){var o=null==t?0:t.length;for(n&&o&&(e=t[--o]);o--;)e=r(e,t[o],o,t);return e}function kr(t,r){for(var e=-1,n=null==t?0:t.length;++e<n;)if(r(t[e],e,t))return!0;return!1}var Rr=Gr("length");function zr(t,r,e){var n;return e(t,(function(t,e,o){if(r(t,e,o))return n=e,!1})),n}function Ur(t,r,e,n){for(var o=t.length,i=e+(n?1:-1);n?i--:++i<o;)if(r(t[i],i,t))return i;return-1}function Wr(t,r,e){return r==r?function(t,r,e){var n=e-1,o=t.length;for(;++n<o;)if(t[n]===r)return n;return-1}(t,r,e):Ur(t,Lr,e)}function qr(t,r,e,n){for(var o=e-1,i=t.length;++o<i;)if(n(t[o],r))return o;return-1}function Lr(t){return t!=t}function $r(t,r){var e=null==t?0:t.length;return e?Jr(t,r)/e:d}function Gr(t){return function(r){return null==r?e:r[t]}}function Zr(t){return function(r){return null==t?e:t[r]}}function Vr(t,r,e,n,o){return o(t,(function(t,o,i){e=n?(n=!1,t):r(e,t,o,i)})),e}function Jr(t,r){for(var n,o=-1,i=t.length;++o<i;){var u=r(t[o]);u!==e&&(n=n===e?u:n+u)}return n}function Hr(t,r){for(var e=-1,n=Array(t);++e<t;)n[e]=r(e);return n}function Yr(t){return t?t.slice(0,ye(t)+1).replace(ut,""):t}function Kr(t){return function(r){return t(r)}}function Xr(t,r){return Pr(r,(function(r){return t[r]}))}function Qr(t,r){return t.has(r)}function te(t,r){for(var e=-1,n=t.length;++e<n&&Wr(r,t[e],0)>-1;);return e}function re(t,r){for(var e=t.length;e--&&Wr(r,t[e],0)>-1;);return e}function ee(t,r){for(var e=t.length,n=0;e--;)t[e]===r&&++n;return n}var ne=Zr({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),oe=Zr({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ie(t){return"\\"+sr[t]}function ue(t){return er.test(t)}function ae(t){var r=-1,e=Array(t.size);return t.forEach((function(t,n){e[++r]=[n,t]})),e}function se(t,r){return function(e){return t(r(e))}}function ce(t,r){for(var e=-1,n=t.length,o=0,i=[];++e<n;){var a=t[e];a!==r&&a!==u||(t[e]=u,i[o++]=e)}return i}function fe(t){var r=-1,e=Array(t.size);return t.forEach((function(t){e[++r]=t})),e}function le(t){var r=-1,e=Array(t.size);return t.forEach((function(t){e[++r]=[t,t]})),e}function pe(t){return ue(t)?function(t){var r=tr.lastIndex=0;for(;tr.test(t);)++r;return r}(t):Rr(t)}function he(t){return ue(t)?function(t){return t.match(tr)||[]}(t):function(t){return t.split("")}(t)}function ye(t){for(var r=t.length;r--&&at.test(t.charAt(r)););return r}var de=Zr({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var ve=function t(r){var h,at=(r=null==r?hr:ve.defaults(hr.Object(),r,ve.pick(hr,or))).Array,Et=r.Date,Ft=r.Error,_t=r.Function,Ct=r.Math,St=r.Object,Bt=r.RegExp,Mt=r.String,Nt=r.TypeError,Ot=at.prototype,Pt=_t.prototype,jt=St.prototype,Tt=r["__core-js_shared__"],It=Pt.toString,kt=jt.hasOwnProperty,Rt=0,zt=(h=/[^.]+$/.exec(Tt&&Tt.keys&&Tt.keys.IE_PROTO||""))?"Symbol(src)_1."+h:"",Ut=jt.toString,Wt=It.call(St),qt=hr._,Lt=Bt("^"+It.call(kt).replace(ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),$t=vr?r.Buffer:e,Gt=r.Symbol,Zt=r.Uint8Array,Vt=$t?$t.allocUnsafe:e,Jt=se(St.getPrototypeOf,St),Ht=St.create,Yt=jt.propertyIsEnumerable,Kt=Ot.splice,tr=Gt?Gt.isConcatSpreadable:e,er=Gt?Gt.iterator:e,sr=Gt?Gt.toStringTag:e,lr=function(){try{var t=di(St,"defineProperty");return t({},"",{}),t}catch(t){}}(),pr=r.clearTimeout!==hr.clearTimeout&&r.clearTimeout,yr=Et&&Et.now!==hr.Date.now&&Et.now,dr=r.setTimeout!==hr.setTimeout&&r.setTimeout,gr=Ct.ceil,mr=Ct.floor,Rr=St.getOwnPropertySymbols,Zr=$t?$t.isBuffer:e,ge=r.isFinite,me=Ot.join,De=se(St.keys,St),we=Ct.max,be=Ct.min,Ae=Et.now,xe=r.parseInt,Ee=Ct.random,Fe=Ot.reverse,_e=di(r,"DataView"),Ce=di(r,"Map"),Se=di(r,"Promise"),Be=di(r,"Set"),Me=di(r,"WeakMap"),Ne=di(St,"create"),Oe=Me&&new Me,Pe={},je=qi(_e),Te=qi(Ce),Ie=qi(Se),ke=qi(Be),Re=qi(Me),ze=Gt?Gt.prototype:e,Ue=ze?ze.valueOf:e,We=ze?ze.toString:e;function qe(t){if(ia(t)&&!Ju(t)&&!(t instanceof Ze)){if(t instanceof Ge)return t;if(kt.call(t,"__wrapped__"))return Li(t)}return new Ge(t)}var Le=function(){function t(){}return function(r){if(!oa(r))return{};if(Ht)return Ht(r);t.prototype=r;var n=new t;return t.prototype=e,n}}();function $e(){}function Ge(t,r){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!r,this.__index__=0,this.__values__=e}function Ze(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=v,this.__views__=[]}function Ve(t){var r=-1,e=null==t?0:t.length;for(this.clear();++r<e;){var n=t[r];this.set(n[0],n[1])}}function Je(t){var r=-1,e=null==t?0:t.length;for(this.clear();++r<e;){var n=t[r];this.set(n[0],n[1])}}function He(t){var r=-1,e=null==t?0:t.length;for(this.clear();++r<e;){var n=t[r];this.set(n[0],n[1])}}function Ye(t){var r=-1,e=null==t?0:t.length;for(this.__data__=new He;++r<e;)this.add(t[r])}function Ke(t){var r=this.__data__=new Je(t);this.size=r.size}function Xe(t,r){var e=Ju(t),n=!e&&Vu(t),o=!e&&!n&&Xu(t),i=!e&&!n&&!o&&ha(t),u=e||n||o||i,a=u?Hr(t.length,Mt):[],s=a.length;for(var c in t)!r&&!kt.call(t,c)||u&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ai(c,s))||a.push(c);return a}function Qe(t){var r=t.length;return r?t[Kn(0,r-1)]:e}function tn(t,r){return zi(Po(t),fn(r,0,t.length))}function rn(t){return zi(Po(t))}function en(t,r,n){(n!==e&&!$u(t[r],n)||n===e&&!(r in t))&&sn(t,r,n)}function nn(t,r,n){var o=t[r];kt.call(t,r)&&$u(o,n)&&(n!==e||r in t)||sn(t,r,n)}function on(t,r){for(var e=t.length;e--;)if($u(t[e][0],r))return e;return-1}function un(t,r,e,n){return dn(t,(function(t,o,i){r(n,t,e(t),i)})),n}function an(t,r){return t&&jo(r,Ta(r),t)}function sn(t,r,e){"__proto__"==r&&lr?lr(t,r,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[r]=e}function cn(t,r){for(var n=-1,o=r.length,i=at(o),u=null==t;++n<o;)i[n]=u?e:Ma(t,r[n]);return i}function fn(t,r,n){return t==t&&(n!==e&&(t=t<=n?t:n),r!==e&&(t=t>=r?t:r)),t}function ln(t,r,n,o,i,u){var a,s=1&r,c=2&r,f=4&r;if(n&&(a=i?n(t,o,i,u):n(t)),a!==e)return a;if(!oa(t))return t;var l=Ju(t);if(l){if(a=function(t){var r=t.length,e=new t.constructor(r);r&&"string"==typeof t[0]&&kt.call(t,"index")&&(e.index=t.index,e.input=t.input);return e}(t),!s)return Po(t,a)}else{var p=mi(t),h=p==x||p==E;if(Xu(t))return Co(t,s);if(p==C||p==m||h&&!i){if(a=c||h?{}:wi(t),!s)return c?function(t,r){return jo(t,gi(t),r)}(t,function(t,r){return t&&jo(r,Ia(r),t)}(a,t)):function(t,r){return jo(t,vi(t),r)}(t,an(a,t))}else{if(!ar[p])return i?t:{};a=function(t,r,e){var n=t.constructor;switch(r){case j:return So(t);case w:case b:return new n(+t);case T:return function(t,r){var e=r?So(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case I:case k:case R:case z:case U:case W:case q:case L:case $:return Bo(t,e);case F:case M:return new n;case _:case N:return new n(t);case B:return function(t){var r=new t.constructor(t.source,dt.exec(t));return r.lastIndex=t.lastIndex,r}(t);case O:return o=t,Ue?St(Ue.call(o)):{}}var o}(t,p,s)}}u||(u=new Ke);var y=u.get(t);if(y)return y;u.set(t,a),fa(t)?t.forEach((function(e){a.add(ln(e,r,n,e,t,u))})):ua(t)&&t.forEach((function(e,o){a.set(o,ln(e,r,n,o,t,u))}));var d=l?e:(f?c?si:ai:c?Ia:Ta)(t);return Cr(d||t,(function(e,o){d&&(e=t[o=e]),nn(a,o,ln(e,r,n,o,t,u))})),a}function pn(t,r,n){var o=n.length;if(null==t)return!o;for(t=St(t);o--;){var i=n[o],u=r[i],a=t[i];if(a===e&&!(i in t)||!u(a))return!1}return!0}function hn(t,r,o){if("function"!=typeof t)throw new Nt(n);return Ti((function(){t.apply(e,o)}),r)}function yn(t,r,e,n){var o=-1,i=Nr,u=!0,a=t.length,s=[],c=r.length;if(!a)return s;e&&(r=Pr(r,Kr(e))),n?(i=Or,u=!1):r.length>=200&&(i=Qr,u=!1,r=new Ye(r));t:for(;++o<a;){var f=t[o],l=null==e?f:e(f);if(f=n||0!==f?f:0,u&&l==l){for(var p=c;p--;)if(r[p]===l)continue t;s.push(f)}else i(r,l,n)||s.push(f)}return s}qe.templateSettings={escape:X,evaluate:Q,interpolate:tt,variable:"",imports:{_:qe}},qe.prototype=$e.prototype,qe.prototype.constructor=qe,Ge.prototype=Le($e.prototype),Ge.prototype.constructor=Ge,Ze.prototype=Le($e.prototype),Ze.prototype.constructor=Ze,Ve.prototype.clear=function(){this.__data__=Ne?Ne(null):{},this.size=0},Ve.prototype.delete=function(t){var r=this.has(t)&&delete this.__data__[t];return this.size-=r?1:0,r},Ve.prototype.get=function(t){var r=this.__data__;if(Ne){var n=r[t];return n===i?e:n}return kt.call(r,t)?r[t]:e},Ve.prototype.has=function(t){var r=this.__data__;return Ne?r[t]!==e:kt.call(r,t)},Ve.prototype.set=function(t,r){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Ne&&r===e?i:r,this},Je.prototype.clear=function(){this.__data__=[],this.size=0},Je.prototype.delete=function(t){var r=this.__data__,e=on(r,t);return!(e<0)&&(e==r.length-1?r.pop():Kt.call(r,e,1),--this.size,!0)},Je.prototype.get=function(t){var r=this.__data__,n=on(r,t);return n<0?e:r[n][1]},Je.prototype.has=function(t){return on(this.__data__,t)>-1},Je.prototype.set=function(t,r){var e=this.__data__,n=on(e,t);return n<0?(++this.size,e.push([t,r])):e[n][1]=r,this},He.prototype.clear=function(){this.size=0,this.__data__={hash:new Ve,map:new(Ce||Je),string:new Ve}},He.prototype.delete=function(t){var r=hi(this,t).delete(t);return this.size-=r?1:0,r},He.prototype.get=function(t){return hi(this,t).get(t)},He.prototype.has=function(t){return hi(this,t).has(t)},He.prototype.set=function(t,r){var e=hi(this,t),n=e.size;return e.set(t,r),this.size+=e.size==n?0:1,this},Ye.prototype.add=Ye.prototype.push=function(t){return this.__data__.set(t,i),this},Ye.prototype.has=function(t){return this.__data__.has(t)},Ke.prototype.clear=function(){this.__data__=new Je,this.size=0},Ke.prototype.delete=function(t){var r=this.__data__,e=r.delete(t);return this.size=r.size,e},Ke.prototype.get=function(t){return this.__data__.get(t)},Ke.prototype.has=function(t){return this.__data__.has(t)},Ke.prototype.set=function(t,r){var e=this.__data__;if(e instanceof Je){var n=e.__data__;if(!Ce||n.length<199)return n.push([t,r]),this.size=++e.size,this;e=this.__data__=new He(n)}return e.set(t,r),this.size=e.size,this};var dn=ko(xn),vn=ko(En,!0);function gn(t,r){var e=!0;return dn(t,(function(t,n,o){return e=!!r(t,n,o)})),e}function mn(t,r,n){for(var o=-1,i=t.length;++o<i;){var u=t[o],a=r(u);if(null!=a&&(s===e?a==a&&!pa(a):n(a,s)))var s=a,c=u}return c}function Dn(t,r){var e=[];return dn(t,(function(t,n,o){r(t,n,o)&&e.push(t)})),e}function wn(t,r,e,n,o){var i=-1,u=t.length;for(e||(e=bi),o||(o=[]);++i<u;){var a=t[i];r>0&&e(a)?r>1?wn(a,r-1,e,n,o):jr(o,a):n||(o[o.length]=a)}return o}var bn=Ro(),An=Ro(!0);function xn(t,r){return t&&bn(t,r,Ta)}function En(t,r){return t&&An(t,r,Ta)}function Fn(t,r){return Mr(r,(function(r){return ra(t[r])}))}function _n(t,r){for(var n=0,o=(r=xo(r,t)).length;null!=t&&n<o;)t=t[Wi(r[n++])];return n&&n==o?t:e}function Cn(t,r,e){var n=r(t);return Ju(t)?n:jr(n,e(t))}function Sn(t){return null==t?t===e?"[object Undefined]":"[object Null]":sr&&sr in St(t)?function(t){var r=kt.call(t,sr),n=t[sr];try{t[sr]=e;var o=!0}catch(t){}var i=Ut.call(t);o&&(r?t[sr]=n:delete t[sr]);return i}(t):function(t){return Ut.call(t)}(t)}function Bn(t,r){return t>r}function Mn(t,r){return null!=t&&kt.call(t,r)}function Nn(t,r){return null!=t&&r in St(t)}function On(t,r,n){for(var o=n?Or:Nr,i=t[0].length,u=t.length,a=u,s=at(u),c=1/0,f=[];a--;){var l=t[a];a&&r&&(l=Pr(l,Kr(r))),c=be(l.length,c),s[a]=!n&&(r||i>=120&&l.length>=120)?new Ye(a&&l):e}l=t[0];var p=-1,h=s[0];t:for(;++p<i&&f.length<c;){var y=l[p],d=r?r(y):y;if(y=n||0!==y?y:0,!(h?Qr(h,d):o(f,d,n))){for(a=u;--a;){var v=s[a];if(!(v?Qr(v,d):o(t[a],d,n)))continue t}h&&h.push(d),f.push(y)}}return f}function Pn(t,r,n){var o=null==(t=Ni(t,r=xo(r,t)))?t:t[Wi(tu(r))];return null==o?e:Fr(o,t,n)}function jn(t){return ia(t)&&Sn(t)==m}function Tn(t,r,n,o,i){return t===r||(null==t||null==r||!ia(t)&&!ia(r)?t!=t&&r!=r:function(t,r,n,o,i,u){var a=Ju(t),s=Ju(r),c=a?D:mi(t),f=s?D:mi(r),l=(c=c==m?C:c)==C,p=(f=f==m?C:f)==C,h=c==f;if(h&&Xu(t)){if(!Xu(r))return!1;a=!0,l=!1}if(h&&!l)return u||(u=new Ke),a||ha(t)?ii(t,r,n,o,i,u):function(t,r,e,n,o,i,u){switch(e){case T:if(t.byteLength!=r.byteLength||t.byteOffset!=r.byteOffset)return!1;t=t.buffer,r=r.buffer;case j:return!(t.byteLength!=r.byteLength||!i(new Zt(t),new Zt(r)));case w:case b:case _:return $u(+t,+r);case A:return t.name==r.name&&t.message==r.message;case B:case N:return t==r+"";case F:var a=ae;case M:var s=1&n;if(a||(a=fe),t.size!=r.size&&!s)return!1;var c=u.get(t);if(c)return c==r;n|=2,u.set(t,r);var f=ii(a(t),a(r),n,o,i,u);return u.delete(t),f;case O:if(Ue)return Ue.call(t)==Ue.call(r)}return!1}(t,r,c,n,o,i,u);if(!(1&n)){var y=l&&kt.call(t,"__wrapped__"),d=p&&kt.call(r,"__wrapped__");if(y||d){var v=y?t.value():t,g=d?r.value():r;return u||(u=new Ke),i(v,g,n,o,u)}}if(!h)return!1;return u||(u=new Ke),function(t,r,n,o,i,u){var a=1&n,s=ai(t),c=s.length,f=ai(r).length;if(c!=f&&!a)return!1;var l=c;for(;l--;){var p=s[l];if(!(a?p in r:kt.call(r,p)))return!1}var h=u.get(t),y=u.get(r);if(h&&y)return h==r&&y==t;var d=!0;u.set(t,r),u.set(r,t);var v=a;for(;++l<c;){var g=t[p=s[l]],m=r[p];if(o)var D=a?o(m,g,p,r,t,u):o(g,m,p,t,r,u);if(!(D===e?g===m||i(g,m,n,o,u):D)){d=!1;break}v||(v="constructor"==p)}if(d&&!v){var w=t.constructor,b=r.constructor;w==b||!("constructor"in t)||!("constructor"in r)||"function"==typeof w&&w instanceof w&&"function"==typeof b&&b instanceof b||(d=!1)}return u.delete(t),u.delete(r),d}(t,r,n,o,i,u)}(t,r,n,o,Tn,i))}function In(t,r,n,o){var i=n.length,u=i,a=!o;if(null==t)return!u;for(t=St(t);i--;){var s=n[i];if(a&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<u;){var c=(s=n[i])[0],f=t[c],l=s[1];if(a&&s[2]){if(f===e&&!(c in t))return!1}else{var p=new Ke;if(o)var h=o(f,l,c,t,r,p);if(!(h===e?Tn(l,f,3,o,p):h))return!1}}return!0}function kn(t){return!(!oa(t)||(r=t,zt&&zt in r))&&(ra(t)?Lt:mt).test(qi(t));var r}function Rn(t){return"function"==typeof t?t:null==t?as:"object"==o(t)?Ju(t)?$n(t[0],t[1]):Ln(t):vs(t)}function zn(t){if(!Ci(t))return De(t);var r=[];for(var e in St(t))kt.call(t,e)&&"constructor"!=e&&r.push(e);return r}function Un(t){if(!oa(t))return function(t){var r=[];if(null!=t)for(var e in St(t))r.push(e);return r}(t);var r=Ci(t),e=[];for(var n in t)("constructor"!=n||!r&&kt.call(t,n))&&e.push(n);return e}function Wn(t,r){return t<r}function qn(t,r){var e=-1,n=Yu(t)?at(t.length):[];return dn(t,(function(t,o,i){n[++e]=r(t,o,i)})),n}function Ln(t){var r=yi(t);return 1==r.length&&r[0][2]?Bi(r[0][0],r[0][1]):function(e){return e===t||In(e,t,r)}}function $n(t,r){return Ei(t)&&Si(r)?Bi(Wi(t),r):function(n){var o=Ma(n,t);return o===e&&o===r?Na(n,t):Tn(r,o,3)}}function Gn(t,r,n,o,i){t!==r&&bn(r,(function(u,a){if(i||(i=new Ke),oa(u))!function(t,r,n,o,i,u,a){var s=Pi(t,n),c=Pi(r,n),f=a.get(c);if(f)return void en(t,n,f);var l=u?u(s,c,n+"",t,r,a):e,p=l===e;if(p){var h=Ju(c),y=!h&&Xu(c),d=!h&&!y&&ha(c);l=c,h||y||d?Ju(s)?l=s:Ku(s)?l=Po(s):y?(p=!1,l=Co(c,!0)):d?(p=!1,l=Bo(c,!0)):l=[]:sa(c)||Vu(c)?(l=s,Vu(s)?l=ba(s):oa(s)&&!ra(s)||(l=wi(c))):p=!1}p&&(a.set(c,l),i(l,c,o,u,a),a.delete(c));en(t,n,l)}(t,r,a,n,Gn,o,i);else{var s=o?o(Pi(t,a),u,a+"",t,r,i):e;s===e&&(s=u),en(t,a,s)}}),Ia)}function Zn(t,r){var n=t.length;if(n)return Ai(r+=r<0?n:0,n)?t[r]:e}function Vn(t,r,e){r=r.length?Pr(r,(function(t){return Ju(t)?function(r){return _n(r,1===t.length?t[0]:t)}:t})):[as];var n=-1;r=Pr(r,Kr(pi()));var o=qn(t,(function(t,e,o){var i=Pr(r,(function(r){return r(t)}));return{criteria:i,index:++n,value:t}}));return function(t,r){var e=t.length;for(t.sort(r);e--;)t[e]=t[e].value;return t}(o,(function(t,r){return function(t,r,e){var n=-1,o=t.criteria,i=r.criteria,u=o.length,a=e.length;for(;++n<u;){var s=Mo(o[n],i[n]);if(s)return n>=a?s:s*("desc"==e[n]?-1:1)}return t.index-r.index}(t,r,e)}))}function Jn(t,r,e){for(var n=-1,o=r.length,i={};++n<o;){var u=r[n],a=_n(t,u);e(a,u)&&eo(i,xo(u,t),a)}return i}function Hn(t,r,e,n){var o=n?qr:Wr,i=-1,u=r.length,a=t;for(t===r&&(r=Po(r)),e&&(a=Pr(t,Kr(e)));++i<u;)for(var s=0,c=r[i],f=e?e(c):c;(s=o(a,f,s,n))>-1;)a!==t&&Kt.call(a,s,1),Kt.call(t,s,1);return t}function Yn(t,r){for(var e=t?r.length:0,n=e-1;e--;){var o=r[e];if(e==n||o!==i){var i=o;Ai(o)?Kt.call(t,o,1):yo(t,o)}}return t}function Kn(t,r){return t+mr(Ee()*(r-t+1))}function Xn(t,r){var e="";if(!t||r<1||r>y)return e;do{r%2&&(e+=t),(r=mr(r/2))&&(t+=t)}while(r);return e}function Qn(t,r){return Ii(Mi(t,r,as),t+"")}function to(t){return Qe($a(t))}function ro(t,r){var e=$a(t);return zi(e,fn(r,0,e.length))}function eo(t,r,n,o){if(!oa(t))return t;for(var i=-1,u=(r=xo(r,t)).length,a=u-1,s=t;null!=s&&++i<u;){var c=Wi(r[i]),f=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(i!=a){var l=s[c];(f=o?o(l,c,s):e)===e&&(f=oa(l)?l:Ai(r[i+1])?[]:{})}nn(s,c,f),s=s[c]}return t}var no=Oe?function(t,r){return Oe.set(t,r),t}:as,oo=lr?function(t,r){return lr(t,"toString",{configurable:!0,enumerable:!1,value:os(r),writable:!0})}:as;function io(t){return zi($a(t))}function uo(t,r,e){var n=-1,o=t.length;r<0&&(r=-r>o?0:o+r),(e=e>o?o:e)<0&&(e+=o),o=r>e?0:e-r>>>0,r>>>=0;for(var i=at(o);++n<o;)i[n]=t[n+r];return i}function ao(t,r){var e;return dn(t,(function(t,n,o){return!(e=r(t,n,o))})),!!e}function so(t,r,e){var n=0,o=null==t?n:t.length;if("number"==typeof r&&r==r&&o<=2147483647){for(;n<o;){var i=n+o>>>1,u=t[i];null!==u&&!pa(u)&&(e?u<=r:u<r)?n=i+1:o=i}return o}return co(t,r,as,e)}function co(t,r,n,o){var i=0,u=null==t?0:t.length;if(0===u)return 0;for(var a=(r=n(r))!=r,s=null===r,c=pa(r),f=r===e;i<u;){var l=mr((i+u)/2),p=n(t[l]),h=p!==e,y=null===p,d=p==p,v=pa(p);if(a)var g=o||d;else g=f?d&&(o||h):s?d&&h&&(o||!y):c?d&&h&&!y&&(o||!v):!y&&!v&&(o?p<=r:p<r);g?i=l+1:u=l}return be(u,4294967294)}function fo(t,r){for(var e=-1,n=t.length,o=0,i=[];++e<n;){var u=t[e],a=r?r(u):u;if(!e||!$u(a,s)){var s=a;i[o++]=0===u?0:u}}return i}function lo(t){return"number"==typeof t?t:pa(t)?d:+t}function po(t){if("string"==typeof t)return t;if(Ju(t))return Pr(t,po)+"";if(pa(t))return We?We.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function ho(t,r,e){var n=-1,o=Nr,i=t.length,u=!0,a=[],s=a;if(e)u=!1,o=Or;else if(i>=200){var c=r?null:Qo(t);if(c)return fe(c);u=!1,o=Qr,s=new Ye}else s=r?[]:a;t:for(;++n<i;){var f=t[n],l=r?r(f):f;if(f=e||0!==f?f:0,u&&l==l){for(var p=s.length;p--;)if(s[p]===l)continue t;r&&s.push(l),a.push(f)}else o(s,l,e)||(s!==a&&s.push(l),a.push(f))}return a}function yo(t,r){return null==(t=Ni(t,r=xo(r,t)))||delete t[Wi(tu(r))]}function vo(t,r,e,n){return eo(t,r,e(_n(t,r)),n)}function go(t,r,e,n){for(var o=t.length,i=n?o:-1;(n?i--:++i<o)&&r(t[i],i,t););return e?uo(t,n?0:i,n?i+1:o):uo(t,n?i+1:0,n?o:i)}function mo(t,r){var e=t;return e instanceof Ze&&(e=e.value()),Tr(r,(function(t,r){return r.func.apply(r.thisArg,jr([t],r.args))}),e)}function Do(t,r,e){var n=t.length;if(n<2)return n?ho(t[0]):[];for(var o=-1,i=at(n);++o<n;)for(var u=t[o],a=-1;++a<n;)a!=o&&(i[o]=yn(i[o]||u,t[a],r,e));return ho(wn(i,1),r,e)}function wo(t,r,n){for(var o=-1,i=t.length,u=r.length,a={};++o<i;){var s=o<u?r[o]:e;n(a,t[o],s)}return a}function bo(t){return Ku(t)?t:[]}function Ao(t){return"function"==typeof t?t:as}function xo(t,r){return Ju(t)?t:Ei(t,r)?[t]:Ui(Aa(t))}var Eo=Qn;function Fo(t,r,n){var o=t.length;return n=n===e?o:n,!r&&n>=o?t:uo(t,r,n)}var _o=pr||function(t){return hr.clearTimeout(t)};function Co(t,r){if(r)return t.slice();var e=t.length,n=Vt?Vt(e):new t.constructor(e);return t.copy(n),n}function So(t){var r=new t.constructor(t.byteLength);return new Zt(r).set(new Zt(t)),r}function Bo(t,r){var e=r?So(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Mo(t,r){if(t!==r){var n=t!==e,o=null===t,i=t==t,u=pa(t),a=r!==e,s=null===r,c=r==r,f=pa(r);if(!s&&!f&&!u&&t>r||u&&a&&c&&!s&&!f||o&&a&&c||!n&&c||!i)return 1;if(!o&&!u&&!f&&t<r||f&&n&&i&&!o&&!u||s&&n&&i||!a&&i||!c)return-1}return 0}function No(t,r,e,n){for(var o=-1,i=t.length,u=e.length,a=-1,s=r.length,c=we(i-u,0),f=at(s+c),l=!n;++a<s;)f[a]=r[a];for(;++o<u;)(l||o<i)&&(f[e[o]]=t[o]);for(;c--;)f[a++]=t[o++];return f}function Oo(t,r,e,n){for(var o=-1,i=t.length,u=-1,a=e.length,s=-1,c=r.length,f=we(i-a,0),l=at(f+c),p=!n;++o<f;)l[o]=t[o];for(var h=o;++s<c;)l[h+s]=r[s];for(;++u<a;)(p||o<i)&&(l[h+e[u]]=t[o++]);return l}function Po(t,r){var e=-1,n=t.length;for(r||(r=at(n));++e<n;)r[e]=t[e];return r}function jo(t,r,n,o){var i=!n;n||(n={});for(var u=-1,a=r.length;++u<a;){var s=r[u],c=o?o(n[s],t[s],s,n,t):e;c===e&&(c=t[s]),i?sn(n,s,c):nn(n,s,c)}return n}function To(t,r){return function(e,n){var o=Ju(e)?_r:un,i=r?r():{};return o(e,t,pi(n,2),i)}}function Io(t){return Qn((function(r,n){var o=-1,i=n.length,u=i>1?n[i-1]:e,a=i>2?n[2]:e;for(u=t.length>3&&"function"==typeof u?(i--,u):e,a&&xi(n[0],n[1],a)&&(u=i<3?e:u,i=1),r=St(r);++o<i;){var s=n[o];s&&t(r,s,o,u)}return r}))}function ko(t,r){return function(e,n){if(null==e)return e;if(!Yu(e))return t(e,n);for(var o=e.length,i=r?o:-1,u=St(e);(r?i--:++i<o)&&!1!==n(u[i],i,u););return e}}function Ro(t){return function(r,e,n){for(var o=-1,i=St(r),u=n(r),a=u.length;a--;){var s=u[t?a:++o];if(!1===e(i[s],s,i))break}return r}}function zo(t){return function(r){var n=ue(r=Aa(r))?he(r):e,o=n?n[0]:r.charAt(0),i=n?Fo(n,1).join(""):r.slice(1);return o[t]()+i}}function Uo(t){return function(r){return Tr(rs(Va(r).replace(Xt,"")),t,"")}}function Wo(t){return function(){var r=arguments;switch(r.length){case 0:return new t;case 1:return new t(r[0]);case 2:return new t(r[0],r[1]);case 3:return new t(r[0],r[1],r[2]);case 4:return new t(r[0],r[1],r[2],r[3]);case 5:return new t(r[0],r[1],r[2],r[3],r[4]);case 6:return new t(r[0],r[1],r[2],r[3],r[4],r[5]);case 7:return new t(r[0],r[1],r[2],r[3],r[4],r[5],r[6])}var e=Le(t.prototype),n=t.apply(e,r);return oa(n)?n:e}}function qo(t){return function(r,n,o){var i=St(r);if(!Yu(r)){var u=pi(n,3);r=Ta(r),n=function(t){return u(i[t],t,i)}}var a=t(r,n,o);return a>-1?i[u?r[a]:a]:e}}function Lo(t){return ui((function(r){var o=r.length,i=o,u=Ge.prototype.thru;for(t&&r.reverse();i--;){var a=r[i];if("function"!=typeof a)throw new Nt(n);if(u&&!s&&"wrapper"==fi(a))var s=new Ge([],!0)}for(i=s?i:o;++i<o;){var c=fi(a=r[i]),f="wrapper"==c?ci(a):e;s=f&&Fi(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?s[fi(f[0])].apply(s,f[3]):1==a.length&&Fi(a)?s[c]():s.thru(a)}return function(){var t=arguments,e=t[0];if(s&&1==t.length&&Ju(e))return s.plant(e).value();for(var n=0,i=o?r[n].apply(this,t):e;++n<o;)i=r[n].call(this,i);return i}}))}function $o(t,r,n,o,i,u,a,s,c,l){var p=r&f,h=1&r,y=2&r,d=24&r,v=512&r,g=y?e:Wo(t);return function e(){for(var f=arguments.length,m=at(f),D=f;D--;)m[D]=arguments[D];if(d)var w=li(e),b=ee(m,w);if(o&&(m=No(m,o,i,d)),u&&(m=Oo(m,u,a,d)),f-=b,d&&f<l){var A=ce(m,w);return Ko(t,r,$o,e.placeholder,n,m,A,s,c,l-f)}var x=h?n:this,E=y?x[t]:t;return f=m.length,s?m=Oi(m,s):v&&f>1&&m.reverse(),p&&c<f&&(m.length=c),this&&this!==hr&&this instanceof e&&(E=g||Wo(E)),E.apply(x,m)}}function Go(t,r){return function(e,n){return function(t,r,e,n){return xn(t,(function(t,o,i){r(n,e(t),o,i)})),n}(e,t,r(n),{})}}function Zo(t,r){return function(n,o){var i;if(n===e&&o===e)return r;if(n!==e&&(i=n),o!==e){if(i===e)return o;"string"==typeof n||"string"==typeof o?(n=po(n),o=po(o)):(n=lo(n),o=lo(o)),i=t(n,o)}return i}}function Vo(t){return ui((function(r){return r=Pr(r,Kr(pi())),Qn((function(e){var n=this;return t(r,(function(t){return Fr(t,n,e)}))}))}))}function Jo(t,r){var n=(r=r===e?" ":po(r)).length;if(n<2)return n?Xn(r,t):r;var o=Xn(r,gr(t/pe(r)));return ue(r)?Fo(he(o),0,t).join(""):o.slice(0,t)}function Ho(t){return function(r,n,o){return o&&"number"!=typeof o&&xi(r,n,o)&&(n=o=e),r=ga(r),n===e?(n=r,r=0):n=ga(n),function(t,r,e,n){for(var o=-1,i=we(gr((r-t)/(e||1)),0),u=at(i);i--;)u[n?i:++o]=t,t+=e;return u}(r,n,o=o===e?r<n?1:-1:ga(o),t)}}function Yo(t){return function(r,e){return"string"==typeof r&&"string"==typeof e||(r=wa(r),e=wa(e)),t(r,e)}}function Ko(t,r,n,o,i,u,a,f,l,p){var h=8&r;r|=h?s:c,4&(r&=~(h?c:s))||(r&=-4);var y=[t,r,i,h?u:e,h?a:e,h?e:u,h?e:a,f,l,p],d=n.apply(e,y);return Fi(t)&&ji(d,y),d.placeholder=o,ki(d,t,r)}function Xo(t){var r=Ct[t];return function(t,e){if(t=wa(t),(e=null==e?0:be(ma(e),292))&&ge(t)){var n=(Aa(t)+"e").split("e");return+((n=(Aa(r(n[0]+"e"+(+n[1]+e)))+"e").split("e"))[0]+"e"+(+n[1]-e))}return r(t)}}var Qo=Be&&1/fe(new Be([,-0]))[1]==p?function(t){return new Be(t)}:ps;function ti(t){return function(r){var e=mi(r);return e==F?ae(r):e==M?le(r):function(t,r){return Pr(r,(function(r){return[r,t[r]]}))}(r,t(r))}}function ri(t,r,o,i,p,h,y,d){var v=2&r;if(!v&&"function"!=typeof t)throw new Nt(n);var g=i?i.length:0;if(g||(r&=-97,i=p=e),y=y===e?y:we(ma(y),0),d=d===e?d:ma(d),g-=p?p.length:0,r&c){var m=i,D=p;i=p=e}var w=v?e:ci(t),b=[t,r,o,i,p,m,D,h,y,d];if(w&&function(t,r){var e=t[1],n=r[1],o=e|n,i=o<131,a=n==f&&8==e||n==f&&e==l&&t[7].length<=r[8]||384==n&&r[7].length<=r[8]&&8==e;if(!i&&!a)return t;1&n&&(t[2]=r[2],o|=1&e?0:4);var s=r[3];if(s){var c=t[3];t[3]=c?No(c,s,r[4]):s,t[4]=c?ce(t[3],u):r[4]}(s=r[5])&&(c=t[5],t[5]=c?Oo(c,s,r[6]):s,t[6]=c?ce(t[5],u):r[6]);(s=r[7])&&(t[7]=s);n&f&&(t[8]=null==t[8]?r[8]:be(t[8],r[8]));null==t[9]&&(t[9]=r[9]);t[0]=r[0],t[1]=o}(b,w),t=b[0],r=b[1],o=b[2],i=b[3],p=b[4],!(d=b[9]=b[9]===e?v?0:t.length:we(b[9]-g,0))&&24&r&&(r&=-25),r&&1!=r)A=8==r||r==a?function(t,r,n){var o=Wo(t);return function i(){for(var u=arguments.length,a=at(u),s=u,c=li(i);s--;)a[s]=arguments[s];var f=u<3&&a[0]!==c&&a[u-1]!==c?[]:ce(a,c);return(u-=f.length)<n?Ko(t,r,$o,i.placeholder,e,a,f,e,e,n-u):Fr(this&&this!==hr&&this instanceof i?o:t,this,a)}}(t,r,d):r!=s&&33!=r||p.length?$o.apply(e,b):function(t,r,e,n){var o=1&r,i=Wo(t);return function r(){for(var u=-1,a=arguments.length,s=-1,c=n.length,f=at(c+a),l=this&&this!==hr&&this instanceof r?i:t;++s<c;)f[s]=n[s];for(;a--;)f[s++]=arguments[++u];return Fr(l,o?e:this,f)}}(t,r,o,i);else var A=function(t,r,e){var n=1&r,o=Wo(t);return function r(){return(this&&this!==hr&&this instanceof r?o:t).apply(n?e:this,arguments)}}(t,r,o);return ki((w?no:ji)(A,b),t,r)}function ei(t,r,n,o){return t===e||$u(t,jt[n])&&!kt.call(o,n)?r:t}function ni(t,r,n,o,i,u){return oa(t)&&oa(r)&&(u.set(r,t),Gn(t,r,e,ni,u),u.delete(r)),t}function oi(t){return sa(t)?e:t}function ii(t,r,n,o,i,u){var a=1&n,s=t.length,c=r.length;if(s!=c&&!(a&&c>s))return!1;var f=u.get(t),l=u.get(r);if(f&&l)return f==r&&l==t;var p=-1,h=!0,y=2&n?new Ye:e;for(u.set(t,r),u.set(r,t);++p<s;){var d=t[p],v=r[p];if(o)var g=a?o(v,d,p,r,t,u):o(d,v,p,t,r,u);if(g!==e){if(g)continue;h=!1;break}if(y){if(!kr(r,(function(t,r){if(!Qr(y,r)&&(d===t||i(d,t,n,o,u)))return y.push(r)}))){h=!1;break}}else if(d!==v&&!i(d,v,n,o,u)){h=!1;break}}return u.delete(t),u.delete(r),h}function ui(t){return Ii(Mi(t,e,Hi),t+"")}function ai(t){return Cn(t,Ta,vi)}function si(t){return Cn(t,Ia,gi)}var ci=Oe?function(t){return Oe.get(t)}:ps;function fi(t){for(var r=t.name+"",e=Pe[r],n=kt.call(Pe,r)?e.length:0;n--;){var o=e[n],i=o.func;if(null==i||i==t)return o.name}return r}function li(t){return(kt.call(qe,"placeholder")?qe:t).placeholder}function pi(){var t=qe.iteratee||ss;return t=t===ss?Rn:t,arguments.length?t(arguments[0],arguments[1]):t}function hi(t,r){var e,n,i=t.__data__;return("string"==(n=o(e=r))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e)?i["string"==typeof r?"string":"hash"]:i.map}function yi(t){for(var r=Ta(t),e=r.length;e--;){var n=r[e],o=t[n];r[e]=[n,o,Si(o)]}return r}function di(t,r){var n=function(t,r){return null==t?e:t[r]}(t,r);return kn(n)?n:e}var vi=Rr?function(t){return null==t?[]:(t=St(t),Mr(Rr(t),(function(r){return Yt.call(t,r)})))}:Ds,gi=Rr?function(t){for(var r=[];t;)jr(r,vi(t)),t=Jt(t);return r}:Ds,mi=Sn;function Di(t,r,e){for(var n=-1,o=(r=xo(r,t)).length,i=!1;++n<o;){var u=Wi(r[n]);if(!(i=null!=t&&e(t,u)))break;t=t[u]}return i||++n!=o?i:!!(o=null==t?0:t.length)&&na(o)&&Ai(u,o)&&(Ju(t)||Vu(t))}function wi(t){return"function"!=typeof t.constructor||Ci(t)?{}:Le(Jt(t))}function bi(t){return Ju(t)||Vu(t)||!!(tr&&t&&t[tr])}function Ai(t,r){var e=o(t);return!!(r=null==r?y:r)&&("number"==e||"symbol"!=e&&wt.test(t))&&t>-1&&t%1==0&&t<r}function xi(t,r,e){if(!oa(e))return!1;var n=o(r);return!!("number"==n?Yu(e)&&Ai(r,e.length):"string"==n&&r in e)&&$u(e[r],t)}function Ei(t,r){if(Ju(t))return!1;var e=o(t);return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!pa(t))||(et.test(t)||!rt.test(t)||null!=r&&t in St(r))}function Fi(t){var r=fi(t),e=qe[r];if("function"!=typeof e||!(r in Ze.prototype))return!1;if(t===e)return!0;var n=ci(e);return!!n&&t===n[0]}(_e&&mi(new _e(new ArrayBuffer(1)))!=T||Ce&&mi(new Ce)!=F||Se&&mi(Se.resolve())!=S||Be&&mi(new Be)!=M||Me&&mi(new Me)!=P)&&(mi=function(t){var r=Sn(t),n=r==C?t.constructor:e,o=n?qi(n):"";if(o)switch(o){case je:return T;case Te:return F;case Ie:return S;case ke:return M;case Re:return P}return r});var _i=Tt?ra:ws;function Ci(t){var r=t&&t.constructor;return t===("function"==typeof r&&r.prototype||jt)}function Si(t){return t==t&&!oa(t)}function Bi(t,r){return function(n){return null!=n&&(n[t]===r&&(r!==e||t in St(n)))}}function Mi(t,r,n){return r=we(r===e?t.length-1:r,0),function(){for(var e=arguments,o=-1,i=we(e.length-r,0),u=at(i);++o<i;)u[o]=e[r+o];o=-1;for(var a=at(r+1);++o<r;)a[o]=e[o];return a[r]=n(u),Fr(t,this,a)}}function Ni(t,r){return r.length<2?t:_n(t,uo(r,0,-1))}function Oi(t,r){for(var n=t.length,o=be(r.length,n),i=Po(t);o--;){var u=r[o];t[o]=Ai(u,n)?i[u]:e}return t}function Pi(t,r){if(("constructor"!==r||"function"!=typeof t[r])&&"__proto__"!=r)return t[r]}var ji=Ri(no),Ti=dr||function(t,r){return hr.setTimeout(t,r)},Ii=Ri(oo);function ki(t,r,e){var n=r+"";return Ii(t,function(t,r){var e=r.length;if(!e)return t;var n=e-1;return r[n]=(e>1?"& ":"")+r[n],r=r.join(e>2?", ":" "),t.replace(st,"{\n/* [wrapped with "+r+"] */\n")}(n,function(t,r){return Cr(g,(function(e){var n="_."+e[0];r&e[1]&&!Nr(t,n)&&t.push(n)})),t.sort()}(function(t){var r=t.match(ct);return r?r[1].split(ft):[]}(n),e)))}function Ri(t){var r=0,n=0;return function(){var o=Ae(),i=16-(o-n);if(n=o,i>0){if(++r>=800)return arguments[0]}else r=0;return t.apply(e,arguments)}}function zi(t,r){var n=-1,o=t.length,i=o-1;for(r=r===e?o:r;++n<r;){var u=Kn(n,i),a=t[u];t[u]=t[n],t[n]=a}return t.length=r,t}var Ui=function(t){var r=Ru(t,(function(t){return 500===e.size&&e.clear(),t})),e=r.cache;return r}((function(t){var r=[];return 46===t.charCodeAt(0)&&r.push(""),t.replace(nt,(function(t,e,n,o){r.push(n?o.replace(ht,"$1"):e||t)})),r}));function Wi(t){if("string"==typeof t||pa(t))return t;var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function qi(t){if(null!=t){try{return It.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Li(t){if(t instanceof Ze)return t.clone();var r=new Ge(t.__wrapped__,t.__chain__);return r.__actions__=Po(t.__actions__),r.__index__=t.__index__,r.__values__=t.__values__,r}var $i=Qn((function(t,r){return Ku(t)?yn(t,wn(r,1,Ku,!0)):[]})),Gi=Qn((function(t,r){var n=tu(r);return Ku(n)&&(n=e),Ku(t)?yn(t,wn(r,1,Ku,!0),pi(n,2)):[]})),Zi=Qn((function(t,r){var n=tu(r);return Ku(n)&&(n=e),Ku(t)?yn(t,wn(r,1,Ku,!0),e,n):[]}));function Vi(t,r,e){var n=null==t?0:t.length;if(!n)return-1;var o=null==e?0:ma(e);return o<0&&(o=we(n+o,0)),Ur(t,pi(r,3),o)}function Ji(t,r,n){var o=null==t?0:t.length;if(!o)return-1;var i=o-1;return n!==e&&(i=ma(n),i=n<0?we(o+i,0):be(i,o-1)),Ur(t,pi(r,3),i,!0)}function Hi(t){return(null==t?0:t.length)?wn(t,1):[]}function Yi(t){return t&&t.length?t[0]:e}var Ki=Qn((function(t){var r=Pr(t,bo);return r.length&&r[0]===t[0]?On(r):[]})),Xi=Qn((function(t){var r=tu(t),n=Pr(t,bo);return r===tu(n)?r=e:n.pop(),n.length&&n[0]===t[0]?On(n,pi(r,2)):[]})),Qi=Qn((function(t){var r=tu(t),n=Pr(t,bo);return(r="function"==typeof r?r:e)&&n.pop(),n.length&&n[0]===t[0]?On(n,e,r):[]}));function tu(t){var r=null==t?0:t.length;return r?t[r-1]:e}var ru=Qn(eu);function eu(t,r){return t&&t.length&&r&&r.length?Hn(t,r):t}var nu=ui((function(t,r){var e=null==t?0:t.length,n=cn(t,r);return Yn(t,Pr(r,(function(t){return Ai(t,e)?+t:t})).sort(Mo)),n}));function ou(t){return null==t?t:Fe.call(t)}var iu=Qn((function(t){return ho(wn(t,1,Ku,!0))})),uu=Qn((function(t){var r=tu(t);return Ku(r)&&(r=e),ho(wn(t,1,Ku,!0),pi(r,2))})),au=Qn((function(t){var r=tu(t);return r="function"==typeof r?r:e,ho(wn(t,1,Ku,!0),e,r)}));function su(t){if(!t||!t.length)return[];var r=0;return t=Mr(t,(function(t){if(Ku(t))return r=we(t.length,r),!0})),Hr(r,(function(r){return Pr(t,Gr(r))}))}function cu(t,r){if(!t||!t.length)return[];var n=su(t);return null==r?n:Pr(n,(function(t){return Fr(r,e,t)}))}var fu=Qn((function(t,r){return Ku(t)?yn(t,r):[]})),lu=Qn((function(t){return Do(Mr(t,Ku))})),pu=Qn((function(t){var r=tu(t);return Ku(r)&&(r=e),Do(Mr(t,Ku),pi(r,2))})),hu=Qn((function(t){var r=tu(t);return r="function"==typeof r?r:e,Do(Mr(t,Ku),e,r)})),yu=Qn(su);var du=Qn((function(t){var r=t.length,n=r>1?t[r-1]:e;return n="function"==typeof n?(t.pop(),n):e,cu(t,n)}));function vu(t){var r=qe(t);return r.__chain__=!0,r}function gu(t,r){return r(t)}var mu=ui((function(t){var r=t.length,n=r?t[0]:0,o=this.__wrapped__,i=function(r){return cn(r,t)};return!(r>1||this.__actions__.length)&&o instanceof Ze&&Ai(n)?((o=o.slice(n,+n+(r?1:0))).__actions__.push({func:gu,args:[i],thisArg:e}),new Ge(o,this.__chain__).thru((function(t){return r&&!t.length&&t.push(e),t}))):this.thru(i)}));var Du=To((function(t,r,e){kt.call(t,e)?++t[e]:sn(t,e,1)}));var wu=qo(Vi),bu=qo(Ji);function Au(t,r){return(Ju(t)?Cr:dn)(t,pi(r,3))}function xu(t,r){return(Ju(t)?Sr:vn)(t,pi(r,3))}var Eu=To((function(t,r,e){kt.call(t,e)?t[e].push(r):sn(t,e,[r])}));var Fu=Qn((function(t,r,e){var n=-1,o="function"==typeof r,i=Yu(t)?at(t.length):[];return dn(t,(function(t){i[++n]=o?Fr(r,t,e):Pn(t,r,e)})),i})),_u=To((function(t,r,e){sn(t,e,r)}));function Cu(t,r){return(Ju(t)?Pr:qn)(t,pi(r,3))}var Su=To((function(t,r,e){t[e?0:1].push(r)}),(function(){return[[],[]]}));var Bu=Qn((function(t,r){if(null==t)return[];var e=r.length;return e>1&&xi(t,r[0],r[1])?r=[]:e>2&&xi(r[0],r[1],r[2])&&(r=[r[0]]),Vn(t,wn(r,1),[])})),Mu=yr||function(){return hr.Date.now()};function Nu(t,r,n){return r=n?e:r,r=t&&null==r?t.length:r,ri(t,f,e,e,e,e,r)}function Ou(t,r){var o;if("function"!=typeof r)throw new Nt(n);return t=ma(t),function(){return--t>0&&(o=r.apply(this,arguments)),t<=1&&(r=e),o}}var Pu=Qn((function(t,r,e){var n=1;if(e.length){var o=ce(e,li(Pu));n|=s}return ri(t,n,r,e,o)})),ju=Qn((function(t,r,e){var n=3;if(e.length){var o=ce(e,li(ju));n|=s}return ri(r,n,t,e,o)}));function Tu(t,r,o){var i,u,a,s,c,f,l=0,p=!1,h=!1,y=!0;if("function"!=typeof t)throw new Nt(n);function d(r){var n=i,o=u;return i=u=e,l=r,s=t.apply(o,n)}function v(t){return l=t,c=Ti(m,r),p?d(t):s}function g(t){var n=t-f;return f===e||n>=r||n<0||h&&t-l>=a}function m(){var t=Mu();if(g(t))return D(t);c=Ti(m,function(t){var e=r-(t-f);return h?be(e,a-(t-l)):e}(t))}function D(t){return c=e,y&&i?d(t):(i=u=e,s)}function w(){var t=Mu(),n=g(t);if(i=arguments,u=this,f=t,n){if(c===e)return v(f);if(h)return _o(c),c=Ti(m,r),d(f)}return c===e&&(c=Ti(m,r)),s}return r=wa(r)||0,oa(o)&&(p=!!o.leading,a=(h="maxWait"in o)?we(wa(o.maxWait)||0,r):a,y="trailing"in o?!!o.trailing:y),w.cancel=function(){c!==e&&_o(c),l=0,i=f=u=c=e},w.flush=function(){return c===e?s:D(Mu())},w}var Iu=Qn((function(t,r){return hn(t,1,r)})),ku=Qn((function(t,r,e){return hn(t,wa(r)||0,e)}));function Ru(t,r){if("function"!=typeof t||null!=r&&"function"!=typeof r)throw new Nt(n);var e=function e(){var n=arguments,o=r?r.apply(this,n):n[0],i=e.cache;if(i.has(o))return i.get(o);var u=t.apply(this,n);return e.cache=i.set(o,u)||i,u};return e.cache=new(Ru.Cache||He),e}function zu(t){if("function"!=typeof t)throw new Nt(n);return function(){var r=arguments;switch(r.length){case 0:return!t.call(this);case 1:return!t.call(this,r[0]);case 2:return!t.call(this,r[0],r[1]);case 3:return!t.call(this,r[0],r[1],r[2])}return!t.apply(this,r)}}Ru.Cache=He;var Uu=Eo((function(t,r){var e=(r=1==r.length&&Ju(r[0])?Pr(r[0],Kr(pi())):Pr(wn(r,1),Kr(pi()))).length;return Qn((function(n){for(var o=-1,i=be(n.length,e);++o<i;)n[o]=r[o].call(this,n[o]);return Fr(t,this,n)}))})),Wu=Qn((function(t,r){var n=ce(r,li(Wu));return ri(t,s,e,r,n)})),qu=Qn((function(t,r){var n=ce(r,li(qu));return ri(t,c,e,r,n)})),Lu=ui((function(t,r){return ri(t,l,e,e,e,r)}));function $u(t,r){return t===r||t!=t&&r!=r}var Gu=Yo(Bn),Zu=Yo((function(t,r){return t>=r})),Vu=jn(function(){return arguments}())?jn:function(t){return ia(t)&&kt.call(t,"callee")&&!Yt.call(t,"callee")},Ju=at.isArray,Hu=Dr?Kr(Dr):function(t){return ia(t)&&Sn(t)==j};function Yu(t){return null!=t&&na(t.length)&&!ra(t)}function Ku(t){return ia(t)&&Yu(t)}var Xu=Zr||ws,Qu=wr?Kr(wr):function(t){return ia(t)&&Sn(t)==b};function ta(t){if(!ia(t))return!1;var r=Sn(t);return r==A||"[object DOMException]"==r||"string"==typeof t.message&&"string"==typeof t.name&&!sa(t)}function ra(t){if(!oa(t))return!1;var r=Sn(t);return r==x||r==E||"[object AsyncFunction]"==r||"[object Proxy]"==r}function ea(t){return"number"==typeof t&&t==ma(t)}function na(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=y}function oa(t){var r=o(t);return null!=t&&("object"==r||"function"==r)}function ia(t){return null!=t&&"object"==o(t)}var ua=br?Kr(br):function(t){return ia(t)&&mi(t)==F};function aa(t){return"number"==typeof t||ia(t)&&Sn(t)==_}function sa(t){if(!ia(t)||Sn(t)!=C)return!1;var r=Jt(t);if(null===r)return!0;var e=kt.call(r,"constructor")&&r.constructor;return"function"==typeof e&&e instanceof e&&It.call(e)==Wt}var ca=Ar?Kr(Ar):function(t){return ia(t)&&Sn(t)==B};var fa=xr?Kr(xr):function(t){return ia(t)&&mi(t)==M};function la(t){return"string"==typeof t||!Ju(t)&&ia(t)&&Sn(t)==N}function pa(t){return"symbol"==o(t)||ia(t)&&Sn(t)==O}var ha=Er?Kr(Er):function(t){return ia(t)&&na(t.length)&&!!ur[Sn(t)]};var ya=Yo(Wn),da=Yo((function(t,r){return t<=r}));function va(t){if(!t)return[];if(Yu(t))return la(t)?he(t):Po(t);if(er&&t[er])return function(t){for(var r,e=[];!(r=t.next()).done;)e.push(r.value);return e}(t[er]());var r=mi(t);return(r==F?ae:r==M?fe:$a)(t)}function ga(t){return t?(t=wa(t))===p||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ma(t){var r=ga(t),e=r%1;return r==r?e?r-e:r:0}function Da(t){return t?fn(ma(t),0,v):0}function wa(t){if("number"==typeof t)return t;if(pa(t))return d;if(oa(t)){var r="function"==typeof t.valueOf?t.valueOf():t;t=oa(r)?r+"":r}if("string"!=typeof t)return 0===t?t:+t;t=Yr(t);var e=gt.test(t);return e||Dt.test(t)?fr(t.slice(2),e?2:8):vt.test(t)?d:+t}function ba(t){return jo(t,Ia(t))}function Aa(t){return null==t?"":po(t)}var xa=Io((function(t,r){if(Ci(r)||Yu(r))jo(r,Ta(r),t);else for(var e in r)kt.call(r,e)&&nn(t,e,r[e])})),Ea=Io((function(t,r){jo(r,Ia(r),t)})),Fa=Io((function(t,r,e,n){jo(r,Ia(r),t,n)})),_a=Io((function(t,r,e,n){jo(r,Ta(r),t,n)})),Ca=ui(cn);var Sa=Qn((function(t,r){t=St(t);var n=-1,o=r.length,i=o>2?r[2]:e;for(i&&xi(r[0],r[1],i)&&(o=1);++n<o;)for(var u=r[n],a=Ia(u),s=-1,c=a.length;++s<c;){var f=a[s],l=t[f];(l===e||$u(l,jt[f])&&!kt.call(t,f))&&(t[f]=u[f])}return t})),Ba=Qn((function(t){return t.push(e,ni),Fr(Ra,e,t)}));function Ma(t,r,n){var o=null==t?e:_n(t,r);return o===e?n:o}function Na(t,r){return null!=t&&Di(t,r,Nn)}var Oa=Go((function(t,r,e){null!=r&&"function"!=typeof r.toString&&(r=Ut.call(r)),t[r]=e}),os(as)),Pa=Go((function(t,r,e){null!=r&&"function"!=typeof r.toString&&(r=Ut.call(r)),kt.call(t,r)?t[r].push(e):t[r]=[e]}),pi),ja=Qn(Pn);function Ta(t){return Yu(t)?Xe(t):zn(t)}function Ia(t){return Yu(t)?Xe(t,!0):Un(t)}var ka=Io((function(t,r,e){Gn(t,r,e)})),Ra=Io((function(t,r,e,n){Gn(t,r,e,n)})),za=ui((function(t,r){var e={};if(null==t)return e;var n=!1;r=Pr(r,(function(r){return r=xo(r,t),n||(n=r.length>1),r})),jo(t,si(t),e),n&&(e=ln(e,7,oi));for(var o=r.length;o--;)yo(e,r[o]);return e}));var Ua=ui((function(t,r){return null==t?{}:function(t,r){return Jn(t,r,(function(r,e){return Na(t,e)}))}(t,r)}));function Wa(t,r){if(null==t)return{};var e=Pr(si(t),(function(t){return[t]}));return r=pi(r),Jn(t,e,(function(t,e){return r(t,e[0])}))}var qa=ti(Ta),La=ti(Ia);function $a(t){return null==t?[]:Xr(t,Ta(t))}var Ga=Uo((function(t,r,e){return r=r.toLowerCase(),t+(e?Za(r):r)}));function Za(t){return ts(Aa(t).toLowerCase())}function Va(t){return(t=Aa(t))&&t.replace(bt,ne).replace(Qt,"")}var Ja=Uo((function(t,r,e){return t+(e?"-":"")+r.toLowerCase()})),Ha=Uo((function(t,r,e){return t+(e?" ":"")+r.toLowerCase()})),Ya=zo("toLowerCase");var Ka=Uo((function(t,r,e){return t+(e?"_":"")+r.toLowerCase()}));var Xa=Uo((function(t,r,e){return t+(e?" ":"")+ts(r)}));var Qa=Uo((function(t,r,e){return t+(e?" ":"")+r.toUpperCase()})),ts=zo("toUpperCase");function rs(t,r,n){return t=Aa(t),(r=n?e:r)===e?function(t){return nr.test(t)}(t)?function(t){return t.match(rr)||[]}(t):function(t){return t.match(lt)||[]}(t):t.match(r)||[]}var es=Qn((function(t,r){try{return Fr(t,e,r)}catch(t){return ta(t)?t:new Ft(t)}})),ns=ui((function(t,r){return Cr(r,(function(r){r=Wi(r),sn(t,r,Pu(t[r],t))})),t}));function os(t){return function(){return t}}var is=Lo(),us=Lo(!0);function as(t){return t}function ss(t){return Rn("function"==typeof t?t:ln(t,1))}var cs=Qn((function(t,r){return function(e){return Pn(e,t,r)}})),fs=Qn((function(t,r){return function(e){return Pn(t,e,r)}}));function ls(t,r,e){var n=Ta(r),o=Fn(r,n);null!=e||oa(r)&&(o.length||!n.length)||(e=r,r=t,t=this,o=Fn(r,Ta(r)));var i=!(oa(e)&&"chain"in e&&!e.chain),u=ra(t);return Cr(o,(function(e){var n=r[e];t[e]=n,u&&(t.prototype[e]=function(){var r=this.__chain__;if(i||r){var e=t(this.__wrapped__),o=e.__actions__=Po(this.__actions__);return o.push({func:n,args:arguments,thisArg:t}),e.__chain__=r,e}return n.apply(t,jr([this.value()],arguments))})})),t}function ps(){}var hs=Vo(Pr),ys=Vo(Br),ds=Vo(kr);function vs(t){return Ei(t)?Gr(Wi(t)):function(t){return function(r){return _n(r,t)}}(t)}var gs=Ho(),ms=Ho(!0);function Ds(){return[]}function ws(){return!1}var bs=Zo((function(t,r){return t+r}),0),As=Xo("ceil"),xs=Zo((function(t,r){return t/r}),1),Es=Xo("floor");var Fs,_s=Zo((function(t,r){return t*r}),1),Cs=Xo("round"),Ss=Zo((function(t,r){return t-r}),0);return qe.after=function(t,r){if("function"!=typeof r)throw new Nt(n);return t=ma(t),function(){if(--t<1)return r.apply(this,arguments)}},qe.ary=Nu,qe.assign=xa,qe.assignIn=Ea,qe.assignInWith=Fa,qe.assignWith=_a,qe.at=Ca,qe.before=Ou,qe.bind=Pu,qe.bindAll=ns,qe.bindKey=ju,qe.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ju(t)?t:[t]},qe.chain=vu,qe.chunk=function(t,r,n){r=(n?xi(t,r,n):r===e)?1:we(ma(r),0);var o=null==t?0:t.length;if(!o||r<1)return[];for(var i=0,u=0,a=at(gr(o/r));i<o;)a[u++]=uo(t,i,i+=r);return a},qe.compact=function(t){for(var r=-1,e=null==t?0:t.length,n=0,o=[];++r<e;){var i=t[r];i&&(o[n++]=i)}return o},qe.concat=function(){var t=arguments.length;if(!t)return[];for(var r=at(t-1),e=arguments[0],n=t;n--;)r[n-1]=arguments[n];return jr(Ju(e)?Po(e):[e],wn(r,1))},qe.cond=function(t){var r=null==t?0:t.length,e=pi();return t=r?Pr(t,(function(t){if("function"!=typeof t[1])throw new Nt(n);return[e(t[0]),t[1]]})):[],Qn((function(e){for(var n=-1;++n<r;){var o=t[n];if(Fr(o[0],this,e))return Fr(o[1],this,e)}}))},qe.conforms=function(t){return function(t){var r=Ta(t);return function(e){return pn(e,t,r)}}(ln(t,1))},qe.constant=os,qe.countBy=Du,qe.create=function(t,r){var e=Le(t);return null==r?e:an(e,r)},qe.curry=function t(r,n,o){var i=ri(r,8,e,e,e,e,e,n=o?e:n);return i.placeholder=t.placeholder,i},qe.curryRight=function t(r,n,o){var i=ri(r,a,e,e,e,e,e,n=o?e:n);return i.placeholder=t.placeholder,i},qe.debounce=Tu,qe.defaults=Sa,qe.defaultsDeep=Ba,qe.defer=Iu,qe.delay=ku,qe.difference=$i,qe.differenceBy=Gi,qe.differenceWith=Zi,qe.drop=function(t,r,n){var o=null==t?0:t.length;return o?uo(t,(r=n||r===e?1:ma(r))<0?0:r,o):[]},qe.dropRight=function(t,r,n){var o=null==t?0:t.length;return o?uo(t,0,(r=o-(r=n||r===e?1:ma(r)))<0?0:r):[]},qe.dropRightWhile=function(t,r){return t&&t.length?go(t,pi(r,3),!0,!0):[]},qe.dropWhile=function(t,r){return t&&t.length?go(t,pi(r,3),!0):[]},qe.fill=function(t,r,n,o){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&xi(t,r,n)&&(n=0,o=i),function(t,r,n,o){var i=t.length;for((n=ma(n))<0&&(n=-n>i?0:i+n),(o=o===e||o>i?i:ma(o))<0&&(o+=i),o=n>o?0:Da(o);n<o;)t[n++]=r;return t}(t,r,n,o)):[]},qe.filter=function(t,r){return(Ju(t)?Mr:Dn)(t,pi(r,3))},qe.flatMap=function(t,r){return wn(Cu(t,r),1)},qe.flatMapDeep=function(t,r){return wn(Cu(t,r),p)},qe.flatMapDepth=function(t,r,n){return n=n===e?1:ma(n),wn(Cu(t,r),n)},qe.flatten=Hi,qe.flattenDeep=function(t){return(null==t?0:t.length)?wn(t,p):[]},qe.flattenDepth=function(t,r){return(null==t?0:t.length)?wn(t,r=r===e?1:ma(r)):[]},qe.flip=function(t){return ri(t,512)},qe.flow=is,qe.flowRight=us,qe.fromPairs=function(t){for(var r=-1,e=null==t?0:t.length,n={};++r<e;){var o=t[r];n[o[0]]=o[1]}return n},qe.functions=function(t){return null==t?[]:Fn(t,Ta(t))},qe.functionsIn=function(t){return null==t?[]:Fn(t,Ia(t))},qe.groupBy=Eu,qe.initial=function(t){return(null==t?0:t.length)?uo(t,0,-1):[]},qe.intersection=Ki,qe.intersectionBy=Xi,qe.intersectionWith=Qi,qe.invert=Oa,qe.invertBy=Pa,qe.invokeMap=Fu,qe.iteratee=ss,qe.keyBy=_u,qe.keys=Ta,qe.keysIn=Ia,qe.map=Cu,qe.mapKeys=function(t,r){var e={};return r=pi(r,3),xn(t,(function(t,n,o){sn(e,r(t,n,o),t)})),e},qe.mapValues=function(t,r){var e={};return r=pi(r,3),xn(t,(function(t,n,o){sn(e,n,r(t,n,o))})),e},qe.matches=function(t){return Ln(ln(t,1))},qe.matchesProperty=function(t,r){return $n(t,ln(r,1))},qe.memoize=Ru,qe.merge=ka,qe.mergeWith=Ra,qe.method=cs,qe.methodOf=fs,qe.mixin=ls,qe.negate=zu,qe.nthArg=function(t){return t=ma(t),Qn((function(r){return Zn(r,t)}))},qe.omit=za,qe.omitBy=function(t,r){return Wa(t,zu(pi(r)))},qe.once=function(t){return Ou(2,t)},qe.orderBy=function(t,r,n,o){return null==t?[]:(Ju(r)||(r=null==r?[]:[r]),Ju(n=o?e:n)||(n=null==n?[]:[n]),Vn(t,r,n))},qe.over=hs,qe.overArgs=Uu,qe.overEvery=ys,qe.overSome=ds,qe.partial=Wu,qe.partialRight=qu,qe.partition=Su,qe.pick=Ua,qe.pickBy=Wa,qe.property=vs,qe.propertyOf=function(t){return function(r){return null==t?e:_n(t,r)}},qe.pull=ru,qe.pullAll=eu,qe.pullAllBy=function(t,r,e){return t&&t.length&&r&&r.length?Hn(t,r,pi(e,2)):t},qe.pullAllWith=function(t,r,n){return t&&t.length&&r&&r.length?Hn(t,r,e,n):t},qe.pullAt=nu,qe.range=gs,qe.rangeRight=ms,qe.rearg=Lu,qe.reject=function(t,r){return(Ju(t)?Mr:Dn)(t,zu(pi(r,3)))},qe.remove=function(t,r){var e=[];if(!t||!t.length)return e;var n=-1,o=[],i=t.length;for(r=pi(r,3);++n<i;){var u=t[n];r(u,n,t)&&(e.push(u),o.push(n))}return Yn(t,o),e},qe.rest=function(t,r){if("function"!=typeof t)throw new Nt(n);return Qn(t,r=r===e?r:ma(r))},qe.reverse=ou,qe.sampleSize=function(t,r,n){return r=(n?xi(t,r,n):r===e)?1:ma(r),(Ju(t)?tn:ro)(t,r)},qe.set=function(t,r,e){return null==t?t:eo(t,r,e)},qe.setWith=function(t,r,n,o){return o="function"==typeof o?o:e,null==t?t:eo(t,r,n,o)},qe.shuffle=function(t){return(Ju(t)?rn:io)(t)},qe.slice=function(t,r,n){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&xi(t,r,n)?(r=0,n=o):(r=null==r?0:ma(r),n=n===e?o:ma(n)),uo(t,r,n)):[]},qe.sortBy=Bu,qe.sortedUniq=function(t){return t&&t.length?fo(t):[]},qe.sortedUniqBy=function(t,r){return t&&t.length?fo(t,pi(r,2)):[]},qe.split=function(t,r,n){return n&&"number"!=typeof n&&xi(t,r,n)&&(r=n=e),(n=n===e?v:n>>>0)?(t=Aa(t))&&("string"==typeof r||null!=r&&!ca(r))&&!(r=po(r))&&ue(t)?Fo(he(t),0,n):t.split(r,n):[]},qe.spread=function(t,r){if("function"!=typeof t)throw new Nt(n);return r=null==r?0:we(ma(r),0),Qn((function(e){var n=e[r],o=Fo(e,0,r);return n&&jr(o,n),Fr(t,this,o)}))},qe.tail=function(t){var r=null==t?0:t.length;return r?uo(t,1,r):[]},qe.take=function(t,r,n){return t&&t.length?uo(t,0,(r=n||r===e?1:ma(r))<0?0:r):[]},qe.takeRight=function(t,r,n){var o=null==t?0:t.length;return o?uo(t,(r=o-(r=n||r===e?1:ma(r)))<0?0:r,o):[]},qe.takeRightWhile=function(t,r){return t&&t.length?go(t,pi(r,3),!1,!0):[]},qe.takeWhile=function(t,r){return t&&t.length?go(t,pi(r,3)):[]},qe.tap=function(t,r){return r(t),t},qe.throttle=function(t,r,e){var o=!0,i=!0;if("function"!=typeof t)throw new Nt(n);return oa(e)&&(o="leading"in e?!!e.leading:o,i="trailing"in e?!!e.trailing:i),Tu(t,r,{leading:o,maxWait:r,trailing:i})},qe.thru=gu,qe.toArray=va,qe.toPairs=qa,qe.toPairsIn=La,qe.toPath=function(t){return Ju(t)?Pr(t,Wi):pa(t)?[t]:Po(Ui(Aa(t)))},qe.toPlainObject=ba,qe.transform=function(t,r,e){var n=Ju(t),o=n||Xu(t)||ha(t);if(r=pi(r,4),null==e){var i=t&&t.constructor;e=o?n?new i:[]:oa(t)&&ra(i)?Le(Jt(t)):{}}return(o?Cr:xn)(t,(function(t,n,o){return r(e,t,n,o)})),e},qe.unary=function(t){return Nu(t,1)},qe.union=iu,qe.unionBy=uu,qe.unionWith=au,qe.uniq=function(t){return t&&t.length?ho(t):[]},qe.uniqBy=function(t,r){return t&&t.length?ho(t,pi(r,2)):[]},qe.uniqWith=function(t,r){return r="function"==typeof r?r:e,t&&t.length?ho(t,e,r):[]},qe.unset=function(t,r){return null==t||yo(t,r)},qe.unzip=su,qe.unzipWith=cu,qe.update=function(t,r,e){return null==t?t:vo(t,r,Ao(e))},qe.updateWith=function(t,r,n,o){return o="function"==typeof o?o:e,null==t?t:vo(t,r,Ao(n),o)},qe.values=$a,qe.valuesIn=function(t){return null==t?[]:Xr(t,Ia(t))},qe.without=fu,qe.words=rs,qe.wrap=function(t,r){return Wu(Ao(r),t)},qe.xor=lu,qe.xorBy=pu,qe.xorWith=hu,qe.zip=yu,qe.zipObject=function(t,r){return wo(t||[],r||[],nn)},qe.zipObjectDeep=function(t,r){return wo(t||[],r||[],eo)},qe.zipWith=du,qe.entries=qa,qe.entriesIn=La,qe.extend=Ea,qe.extendWith=Fa,ls(qe,qe),qe.add=bs,qe.attempt=es,qe.camelCase=Ga,qe.capitalize=Za,qe.ceil=As,qe.clamp=function(t,r,n){return n===e&&(n=r,r=e),n!==e&&(n=(n=wa(n))==n?n:0),r!==e&&(r=(r=wa(r))==r?r:0),fn(wa(t),r,n)},qe.clone=function(t){return ln(t,4)},qe.cloneDeep=function(t){return ln(t,5)},qe.cloneDeepWith=function(t,r){return ln(t,5,r="function"==typeof r?r:e)},qe.cloneWith=function(t,r){return ln(t,4,r="function"==typeof r?r:e)},qe.conformsTo=function(t,r){return null==r||pn(t,r,Ta(r))},qe.deburr=Va,qe.defaultTo=function(t,r){return null==t||t!=t?r:t},qe.divide=xs,qe.endsWith=function(t,r,n){t=Aa(t),r=po(r);var o=t.length,i=n=n===e?o:fn(ma(n),0,o);return(n-=r.length)>=0&&t.slice(n,i)==r},qe.eq=$u,qe.escape=function(t){return(t=Aa(t))&&K.test(t)?t.replace(H,oe):t},qe.escapeRegExp=function(t){return(t=Aa(t))&&it.test(t)?t.replace(ot,"\\$&"):t},qe.every=function(t,r,n){var o=Ju(t)?Br:gn;return n&&xi(t,r,n)&&(r=e),o(t,pi(r,3))},qe.find=wu,qe.findIndex=Vi,qe.findKey=function(t,r){return zr(t,pi(r,3),xn)},qe.findLast=bu,qe.findLastIndex=Ji,qe.findLastKey=function(t,r){return zr(t,pi(r,3),En)},qe.floor=Es,qe.forEach=Au,qe.forEachRight=xu,qe.forIn=function(t,r){return null==t?t:bn(t,pi(r,3),Ia)},qe.forInRight=function(t,r){return null==t?t:An(t,pi(r,3),Ia)},qe.forOwn=function(t,r){return t&&xn(t,pi(r,3))},qe.forOwnRight=function(t,r){return t&&En(t,pi(r,3))},qe.get=Ma,qe.gt=Gu,qe.gte=Zu,qe.has=function(t,r){return null!=t&&Di(t,r,Mn)},qe.hasIn=Na,qe.head=Yi,qe.identity=as,qe.includes=function(t,r,e,n){t=Yu(t)?t:$a(t),e=e&&!n?ma(e):0;var o=t.length;return e<0&&(e=we(o+e,0)),la(t)?e<=o&&t.indexOf(r,e)>-1:!!o&&Wr(t,r,e)>-1},qe.indexOf=function(t,r,e){var n=null==t?0:t.length;if(!n)return-1;var o=null==e?0:ma(e);return o<0&&(o=we(n+o,0)),Wr(t,r,o)},qe.inRange=function(t,r,n){return r=ga(r),n===e?(n=r,r=0):n=ga(n),function(t,r,e){return t>=be(r,e)&&t<we(r,e)}(t=wa(t),r,n)},qe.invoke=ja,qe.isArguments=Vu,qe.isArray=Ju,qe.isArrayBuffer=Hu,qe.isArrayLike=Yu,qe.isArrayLikeObject=Ku,qe.isBoolean=function(t){return!0===t||!1===t||ia(t)&&Sn(t)==w},qe.isBuffer=Xu,qe.isDate=Qu,qe.isElement=function(t){return ia(t)&&1===t.nodeType&&!sa(t)},qe.isEmpty=function(t){if(null==t)return!0;if(Yu(t)&&(Ju(t)||"string"==typeof t||"function"==typeof t.splice||Xu(t)||ha(t)||Vu(t)))return!t.length;var r=mi(t);if(r==F||r==M)return!t.size;if(Ci(t))return!zn(t).length;for(var e in t)if(kt.call(t,e))return!1;return!0},qe.isEqual=function(t,r){return Tn(t,r)},qe.isEqualWith=function(t,r,n){var o=(n="function"==typeof n?n:e)?n(t,r):e;return o===e?Tn(t,r,e,n):!!o},qe.isError=ta,qe.isFinite=function(t){return"number"==typeof t&&ge(t)},qe.isFunction=ra,qe.isInteger=ea,qe.isLength=na,qe.isMap=ua,qe.isMatch=function(t,r){return t===r||In(t,r,yi(r))},qe.isMatchWith=function(t,r,n){return n="function"==typeof n?n:e,In(t,r,yi(r),n)},qe.isNaN=function(t){return aa(t)&&t!=+t},qe.isNative=function(t){if(_i(t))throw new Ft("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return kn(t)},qe.isNil=function(t){return null==t},qe.isNull=function(t){return null===t},qe.isNumber=aa,qe.isObject=oa,qe.isObjectLike=ia,qe.isPlainObject=sa,qe.isRegExp=ca,qe.isSafeInteger=function(t){return ea(t)&&t>=-9007199254740991&&t<=y},qe.isSet=fa,qe.isString=la,qe.isSymbol=pa,qe.isTypedArray=ha,qe.isUndefined=function(t){return t===e},qe.isWeakMap=function(t){return ia(t)&&mi(t)==P},qe.isWeakSet=function(t){return ia(t)&&"[object WeakSet]"==Sn(t)},qe.join=function(t,r){return null==t?"":me.call(t,r)},qe.kebabCase=Ja,qe.last=tu,qe.lastIndexOf=function(t,r,n){var o=null==t?0:t.length;if(!o)return-1;var i=o;return n!==e&&(i=(i=ma(n))<0?we(o+i,0):be(i,o-1)),r==r?function(t,r,e){for(var n=e+1;n--;)if(t[n]===r)return n;return n}(t,r,i):Ur(t,Lr,i,!0)},qe.lowerCase=Ha,qe.lowerFirst=Ya,qe.lt=ya,qe.lte=da,qe.max=function(t){return t&&t.length?mn(t,as,Bn):e},qe.maxBy=function(t,r){return t&&t.length?mn(t,pi(r,2),Bn):e},qe.mean=function(t){return $r(t,as)},qe.meanBy=function(t,r){return $r(t,pi(r,2))},qe.min=function(t){return t&&t.length?mn(t,as,Wn):e},qe.minBy=function(t,r){return t&&t.length?mn(t,pi(r,2),Wn):e},qe.stubArray=Ds,qe.stubFalse=ws,qe.stubObject=function(){return{}},qe.stubString=function(){return""},qe.stubTrue=function(){return!0},qe.multiply=_s,qe.nth=function(t,r){return t&&t.length?Zn(t,ma(r)):e},qe.noConflict=function(){return hr._===this&&(hr._=qt),this},qe.noop=ps,qe.now=Mu,qe.pad=function(t,r,e){t=Aa(t);var n=(r=ma(r))?pe(t):0;if(!r||n>=r)return t;var o=(r-n)/2;return Jo(mr(o),e)+t+Jo(gr(o),e)},qe.padEnd=function(t,r,e){t=Aa(t);var n=(r=ma(r))?pe(t):0;return r&&n<r?t+Jo(r-n,e):t},qe.padStart=function(t,r,e){t=Aa(t);var n=(r=ma(r))?pe(t):0;return r&&n<r?Jo(r-n,e)+t:t},qe.parseInt=function(t,r,e){return e||null==r?r=0:r&&(r=+r),xe(Aa(t).replace(ut,""),r||0)},qe.random=function(t,r,n){if(n&&"boolean"!=typeof n&&xi(t,r,n)&&(r=n=e),n===e&&("boolean"==typeof r?(n=r,r=e):"boolean"==typeof t&&(n=t,t=e)),t===e&&r===e?(t=0,r=1):(t=ga(t),r===e?(r=t,t=0):r=ga(r)),t>r){var o=t;t=r,r=o}if(n||t%1||r%1){var i=Ee();return be(t+i*(r-t+cr("1e-"+((i+"").length-1))),r)}return Kn(t,r)},qe.reduce=function(t,r,e){var n=Ju(t)?Tr:Vr,o=arguments.length<3;return n(t,pi(r,4),e,o,dn)},qe.reduceRight=function(t,r,e){var n=Ju(t)?Ir:Vr,o=arguments.length<3;return n(t,pi(r,4),e,o,vn)},qe.repeat=function(t,r,n){return r=(n?xi(t,r,n):r===e)?1:ma(r),Xn(Aa(t),r)},qe.replace=function(){var t=arguments,r=Aa(t[0]);return t.length<3?r:r.replace(t[1],t[2])},qe.result=function(t,r,n){var o=-1,i=(r=xo(r,t)).length;for(i||(i=1,t=e);++o<i;){var u=null==t?e:t[Wi(r[o])];u===e&&(o=i,u=n),t=ra(u)?u.call(t):u}return t},qe.round=Cs,qe.runInContext=t,qe.sample=function(t){return(Ju(t)?Qe:to)(t)},qe.size=function(t){if(null==t)return 0;if(Yu(t))return la(t)?pe(t):t.length;var r=mi(t);return r==F||r==M?t.size:zn(t).length},qe.snakeCase=Ka,qe.some=function(t,r,n){var o=Ju(t)?kr:ao;return n&&xi(t,r,n)&&(r=e),o(t,pi(r,3))},qe.sortedIndex=function(t,r){return so(t,r)},qe.sortedIndexBy=function(t,r,e){return co(t,r,pi(e,2))},qe.sortedIndexOf=function(t,r){var e=null==t?0:t.length;if(e){var n=so(t,r);if(n<e&&$u(t[n],r))return n}return-1},qe.sortedLastIndex=function(t,r){return so(t,r,!0)},qe.sortedLastIndexBy=function(t,r,e){return co(t,r,pi(e,2),!0)},qe.sortedLastIndexOf=function(t,r){if(null==t?0:t.length){var e=so(t,r,!0)-1;if($u(t[e],r))return e}return-1},qe.startCase=Xa,qe.startsWith=function(t,r,e){return t=Aa(t),e=null==e?0:fn(ma(e),0,t.length),r=po(r),t.slice(e,e+r.length)==r},qe.subtract=Ss,qe.sum=function(t){return t&&t.length?Jr(t,as):0},qe.sumBy=function(t,r){return t&&t.length?Jr(t,pi(r,2)):0},qe.template=function(t,r,n){var o=qe.templateSettings;n&&xi(t,r,n)&&(r=e),t=Aa(t),r=Fa({},r,o,ei);var i,u,a=Fa({},r.imports,o.imports,ei),s=Ta(a),c=Xr(a,s),f=0,l=r.interpolate||At,p="__p += '",h=Bt((r.escape||At).source+"|"+l.source+"|"+(l===tt?yt:At).source+"|"+(r.evaluate||At).source+"|$","g"),y="//# sourceURL="+(kt.call(r,"sourceURL")?(r.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ir+"]")+"\n";t.replace(h,(function(r,e,n,o,a,s){return n||(n=o),p+=t.slice(f,s).replace(xt,ie),e&&(i=!0,p+="' +\n__e("+e+") +\n'"),a&&(u=!0,p+="';\n"+a+";\n__p += '"),n&&(p+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),f=s+r.length,r})),p+="';\n";var d=kt.call(r,"variable")&&r.variable;if(d){if(pt.test(d))throw new Ft("Invalid `variable` option passed into `_.template`")}else p="with (obj) {\n"+p+"\n}\n";p=(u?p.replace(G,""):p).replace(Z,"$1").replace(V,"$1;"),p="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var v=es((function(){return _t(s,y+"return "+p).apply(e,c)}));if(v.source=p,ta(v))throw v;return v},qe.times=function(t,r){if((t=ma(t))<1||t>y)return[];var e=v,n=be(t,v);r=pi(r),t-=v;for(var o=Hr(n,r);++e<t;)r(e);return o},qe.toFinite=ga,qe.toInteger=ma,qe.toLength=Da,qe.toLower=function(t){return Aa(t).toLowerCase()},qe.toNumber=wa,qe.toSafeInteger=function(t){return t?fn(ma(t),-9007199254740991,y):0===t?t:0},qe.toString=Aa,qe.toUpper=function(t){return Aa(t).toUpperCase()},qe.trim=function(t,r,n){if((t=Aa(t))&&(n||r===e))return Yr(t);if(!t||!(r=po(r)))return t;var o=he(t),i=he(r);return Fo(o,te(o,i),re(o,i)+1).join("")},qe.trimEnd=function(t,r,n){if((t=Aa(t))&&(n||r===e))return t.slice(0,ye(t)+1);if(!t||!(r=po(r)))return t;var o=he(t);return Fo(o,0,re(o,he(r))+1).join("")},qe.trimStart=function(t,r,n){if((t=Aa(t))&&(n||r===e))return t.replace(ut,"");if(!t||!(r=po(r)))return t;var o=he(t);return Fo(o,te(o,he(r))).join("")},qe.truncate=function(t,r){var n=30,o="...";if(oa(r)){var i="separator"in r?r.separator:i;n="length"in r?ma(r.length):n,o="omission"in r?po(r.omission):o}var u=(t=Aa(t)).length;if(ue(t)){var a=he(t);u=a.length}if(n>=u)return t;var s=n-pe(o);if(s<1)return o;var c=a?Fo(a,0,s).join(""):t.slice(0,s);if(i===e)return c+o;if(a&&(s+=c.length-s),ca(i)){if(t.slice(s).search(i)){var f,l=c;for(i.global||(i=Bt(i.source,Aa(dt.exec(i))+"g")),i.lastIndex=0;f=i.exec(l);)var p=f.index;c=c.slice(0,p===e?s:p)}}else if(t.indexOf(po(i),s)!=s){var h=c.lastIndexOf(i);h>-1&&(c=c.slice(0,h))}return c+o},qe.unescape=function(t){return(t=Aa(t))&&Y.test(t)?t.replace(J,de):t},qe.uniqueId=function(t){var r=++Rt;return Aa(t)+r},qe.upperCase=Qa,qe.upperFirst=ts,qe.each=Au,qe.eachRight=xu,qe.first=Yi,ls(qe,(Fs={},xn(qe,(function(t,r){kt.call(qe.prototype,r)||(Fs[r]=t)})),Fs),{chain:!1}),qe.VERSION="4.17.21",Cr(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){qe[t].placeholder=qe})),Cr(["drop","take"],(function(t,r){Ze.prototype[t]=function(n){n=n===e?1:we(ma(n),0);var o=this.__filtered__&&!r?new Ze(this):this.clone();return o.__filtered__?o.__takeCount__=be(n,o.__takeCount__):o.__views__.push({size:be(n,v),type:t+(o.__dir__<0?"Right":"")}),o},Ze.prototype[t+"Right"]=function(r){return this.reverse()[t](r).reverse()}})),Cr(["filter","map","takeWhile"],(function(t,r){var e=r+1,n=1==e||3==e;Ze.prototype[t]=function(t){var r=this.clone();return r.__iteratees__.push({iteratee:pi(t,3),type:e}),r.__filtered__=r.__filtered__||n,r}})),Cr(["head","last"],(function(t,r){var e="take"+(r?"Right":"");Ze.prototype[t]=function(){return this[e](1).value()[0]}})),Cr(["initial","tail"],(function(t,r){var e="drop"+(r?"":"Right");Ze.prototype[t]=function(){return this.__filtered__?new Ze(this):this[e](1)}})),Ze.prototype.compact=function(){return this.filter(as)},Ze.prototype.find=function(t){return this.filter(t).head()},Ze.prototype.findLast=function(t){return this.reverse().find(t)},Ze.prototype.invokeMap=Qn((function(t,r){return"function"==typeof t?new Ze(this):this.map((function(e){return Pn(e,t,r)}))})),Ze.prototype.reject=function(t){return this.filter(zu(pi(t)))},Ze.prototype.slice=function(t,r){t=ma(t);var n=this;return n.__filtered__&&(t>0||r<0)?new Ze(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),r!==e&&(n=(r=ma(r))<0?n.dropRight(-r):n.take(r-t)),n)},Ze.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Ze.prototype.toArray=function(){return this.take(v)},xn(Ze.prototype,(function(t,r){var n=/^(?:filter|find|map|reject)|While$/.test(r),o=/^(?:head|last)$/.test(r),i=qe[o?"take"+("last"==r?"Right":""):r],u=o||/^find/.test(r);i&&(qe.prototype[r]=function(){var r=this.__wrapped__,a=o?[1]:arguments,s=r instanceof Ze,c=a[0],f=s||Ju(r),l=function(t){var r=i.apply(qe,jr([t],a));return o&&p?r[0]:r};f&&n&&"function"==typeof c&&1!=c.length&&(s=f=!1);var p=this.__chain__,h=!!this.__actions__.length,y=u&&!p,d=s&&!h;if(!u&&f){r=d?r:new Ze(this);var v=t.apply(r,a);return v.__actions__.push({func:gu,args:[l],thisArg:e}),new Ge(v,p)}return y&&d?t.apply(this,a):(v=this.thru(l),y?o?v.value()[0]:v.value():v)})})),Cr(["pop","push","shift","sort","splice","unshift"],(function(t){var r=Ot[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);qe.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var o=this.value();return r.apply(Ju(o)?o:[],t)}return this[e]((function(e){return r.apply(Ju(e)?e:[],t)}))}})),xn(Ze.prototype,(function(t,r){var e=qe[r];if(e){var n=e.name+"";kt.call(Pe,n)||(Pe[n]=[]),Pe[n].push({name:r,func:e})}})),Pe[$o(e,2).name]=[{name:"wrapper",func:e}],Ze.prototype.clone=function(){var t=new Ze(this.__wrapped__);return t.__actions__=Po(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Po(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Po(this.__views__),t},Ze.prototype.reverse=function(){if(this.__filtered__){var t=new Ze(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Ze.prototype.value=function(){var t=this.__wrapped__.value(),r=this.__dir__,e=Ju(t),n=r<0,o=e?t.length:0,i=function(t,r,e){var n=-1,o=e.length;for(;++n<o;){var i=e[n],u=i.size;switch(i.type){case"drop":t+=u;break;case"dropRight":r-=u;break;case"take":r=be(r,t+u);break;case"takeRight":t=we(t,r-u)}}return{start:t,end:r}}(0,o,this.__views__),u=i.start,a=i.end,s=a-u,c=n?a:u-1,f=this.__iteratees__,l=f.length,p=0,h=be(s,this.__takeCount__);if(!e||!n&&o==s&&h==s)return mo(t,this.__actions__);var y=[];t:for(;s--&&p<h;){for(var d=-1,v=t[c+=r];++d<l;){var g=f[d],m=g.iteratee,D=g.type,w=m(v);if(2==D)v=w;else if(!w){if(1==D)continue t;break t}}y[p++]=v}return y},qe.prototype.at=mu,qe.prototype.chain=function(){return vu(this)},qe.prototype.commit=function(){return new Ge(this.value(),this.__chain__)},qe.prototype.next=function(){this.__values__===e&&(this.__values__=va(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?e:this.__values__[this.__index__++]}},qe.prototype.plant=function(t){for(var r,n=this;n instanceof $e;){var o=Li(n);o.__index__=0,o.__values__=e,r?i.__wrapped__=o:r=o;var i=o;n=n.__wrapped__}return i.__wrapped__=t,r},qe.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Ze){var r=t;return this.__actions__.length&&(r=new Ze(this)),(r=r.reverse()).__actions__.push({func:gu,args:[ou],thisArg:e}),new Ge(r,this.__chain__)}return this.thru(ou)},qe.prototype.toJSON=qe.prototype.valueOf=qe.prototype.value=function(){return mo(this.__wrapped__,this.__actions__)},qe.prototype.first=qe.prototype.head,er&&(qe.prototype[er]=function(){return this}),qe}();dr?((dr.exports=ve)._=ve,yr._=ve):hr._=ve}).call(h)}(d,d.exports);var v=function(t,r,e){var n=-1,o=t.length;r<0&&(r=-r>o?0:o+r),(e=e>o?o:e)<0&&(e+=o),o=r>e?0:e-r>>>0,r>>>=0;for(var i=Array(o);++n<o;)i[n]=t[n+r];return i};var g=function(t,r){return t===r||t!=t&&r!=r},m="object"==o(h)&&h&&h.Object===Object&&h,D="object"==("undefined"==typeof self?"undefined":o(self))&&self&&self.Object===Object&&self,w=(m||D||Function("return this")()).Symbol,b=w,A=Object.prototype,x=A.hasOwnProperty,E=A.toString,F=b?b.toStringTag:void 0;var _=function(t){var r=x.call(t,F),e=t[F];try{t[F]=void 0;var n=!0}catch(t){}var o=E.call(t);return n&&(r?t[F]=e:delete t[F]),o},C=Object.prototype.toString;var S=_,B=function(t){return C.call(t)},M=w?w.toStringTag:void 0;var N=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":M&&M in Object(t)?S(t):B(t)};var O=function(t){var r=o(t);return null!=t&&("object"==r||"function"==r)},P=N,j=O;var T=function(t){if(!j(t))return!1;var r=P(t);return"[object Function]"==r||"[object GeneratorFunction]"==r||"[object AsyncFunction]"==r||"[object Proxy]"==r};var I=T,k=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991};var R=/^(?:0|[1-9]\d*)$/;var z=g,U=function(t){return null!=t&&k(t.length)&&!I(t)},W=function(t,r){var e=o(t);return!!(r=null==r?9007199254740991:r)&&("number"==e||"symbol"!=e&&R.test(t))&&t>-1&&t%1==0&&t<r},q=O;var L=/\s/;var $=function(t){for(var r=t.length;r--&&L.test(t.charAt(r)););return r},G=/^\s+/;var Z=N,V=function(t){return null!=t&&"object"==o(t)};var J=function(t){return t?t.slice(0,$(t)+1).replace(G,""):t},H=O,Y=function(t){return"symbol"==o(t)||V(t)&&"[object Symbol]"==Z(t)},K=/^[-+]0x[0-9a-f]+$/i,X=/^0b[01]+$/i,Q=/^0o[0-7]+$/i,tt=parseInt;var rt=function(t){if("number"==typeof t)return t;if(Y(t))return NaN;if(H(t)){var r="function"==typeof t.valueOf?t.valueOf():t;t=H(r)?r+"":r}if("string"!=typeof t)return 0===t?t:+t;t=J(t);var e=X.test(t);return e||Q.test(t)?tt(t.slice(2),e?2:8):K.test(t)?NaN:+t},et=rt,nt=1/0;var ot=function(t){return t?(t=et(t))===nt||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0};var it=v,ut=function(t,r,e){if(!q(e))return!1;var n=o(r);return!!("number"==n?U(e)&&W(r,e.length):"string"==n&&r in e)&&z(e[r],t)},at=function(t){var r=ot(t),e=r%1;return r==r?e?r-e:r:0},st=Math.ceil,ct=Math.max;var ft,lt,pt,ht,yt=function(t,r,e){r=(e?ut(t,r,e):void 0===r)?1:ct(at(r),0);var n=null==t?0:t.length;if(!n||r<1)return[];for(var o=0,i=0,u=Array(st(n/r));o<n;)u[i++]=it(t,o,o+=r);return u};t.Ki=void 0,(ft=t.Ki||(t.Ki={}))[ft.Black=1]="Black",ft[ft.White=-1]="White",ft[ft.Empty=0]="Empty",t.Theme=void 0,(lt=t.Theme||(t.Theme={})).BlackAndWhite="black-and-white",lt.Flat="flat",lt.Subdued="subdued",lt.ShellStone="shell",lt.SlateAndShell="slate-and-shell",lt.Walnut="walnet",lt.Photorealistic="photorealistic",t.Center=void 0,(pt=t.Center||(t.Center={})).TopRight="tr",pt.TopLeft="tl",pt.BottomLeft="bl",pt.BottomRight="br",pt.Center="c",t.Markup=void 0,function(t){t.Current="cu",t.Circle="ci",t.Square="sq",t.Triangle="tri",t.Cross="cr",t.Number="num",t.Letter="le",t.None=""}(t.Markup||(t.Markup={}));var dt="https://s.shaowq.com",vt=["A","B","C","D","E","F","G","H","J","K","L","M","N","O","P","Q","R","S","T"],gt=[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],mt=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"];yt(new Array(361).fill(0),19);var Dt,wt=((ht={})[t.Theme.BlackAndWhite]={blacks:[],whites:[]},ht[t.Theme.Subdued]={board:dt+"/assets/theme/subdued/board.png",blacks:[dt+"/assets/theme/subdued/black.png"],whites:[dt+"/assets/theme/subdued/white.png"]},ht[t.Theme.ShellStone]={board:dt+"/assets/theme/shell-stone/board.png",blacks:[dt+"/assets/theme/shell-stone/black.png"],whites:[dt+"/assets/theme/shell-stone/white0.png",dt+"/assets/theme/shell-stone/white1.png",dt+"/assets/theme/shell-stone/white2.png",dt+"/assets/theme/shell-stone/white3.png",dt+"/assets/theme/shell-stone/white4.png"]},ht[t.Theme.SlateAndShell]={board:dt+"/assets/theme/slate-and-shell/board.png",blacks:[dt+"/assets/theme/slate-and-shell/slate1.png",dt+"/assets/theme/slate-and-shell/slate2.png",dt+"/assets/theme/slate-and-shell/slate3.png",dt+"/assets/theme/slate-and-shell/slate4.png",dt+"/assets/theme/slate-and-shell/slate5.png"],whites:[dt+"/assets/theme/slate-and-shell/shell1.png",dt+"/assets/theme/slate-and-shell/shell2.png",dt+"/assets/theme/slate-and-shell/shell3.png",dt+"/assets/theme/slate-and-shell/shell4.png",dt+"/assets/theme/slate-and-shell/shell5.png"]},ht[t.Theme.Walnut]={board:dt+"/assets/theme/walnut/board.jpg",blacks:[dt+"/assets/theme/walnut/black.png"],whites:[dt+"/assets/theme/walnut/white.png"]},ht[t.Theme.Photorealistic]={board:dt+"/assets/theme/photorealistic/board.png",blacks:[dt+"/assets/theme/photorealistic/black.png"],whites:[dt+"/assets/theme/photorealistic/white.png"]},ht[t.Theme.Flat]={blacks:[],whites:[]},ht),bt={exports:{}},At={exports:{}};At.exports=(Dt=Dt||function(t,r){var e;if("undefined"!=typeof window&&window.crypto&&(e=window.crypto),"undefined"!=typeof self&&self.crypto&&(e=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(e=globalThis.crypto),!e&&"undefined"!=typeof window&&window.msCrypto&&(e=window.msCrypto),!e&&void 0!==h&&h.crypto&&(e=h.crypto),!e)try{e=require("crypto")}catch(t){}var n=function(){if(e){if("function"==typeof e.getRandomValues)try{return e.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof e.randomBytes)try{return e.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function t(){}return function(r){var e;return t.prototype=r,e=new t,t.prototype=null,e}}(),i={},u=i.lib={},a=u.Base={extend:function(t){var r=o(this);return t&&r.mixIn(t),r.hasOwnProperty("init")&&this.init!==r.init||(r.init=function(){r.$super.init.apply(this,arguments)}),r.init.prototype=r,r.$super=this,r},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var r in t)t.hasOwnProperty(r)&&(this[r]=t[r]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},s=u.WordArray=a.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=e!=r?e:4*t.length},toString:function(t){return(t||f).stringify(this)},concat:function(t){var r=this.words,e=t.words,n=this.sigBytes,o=t.sigBytes;if(this.clamp(),n%4)for(var i=0;i<o;i++){var u=e[i>>>2]>>>24-i%4*8&255;r[n+i>>>2]|=u<<24-(n+i)%4*8}else for(var a=0;a<o;a+=4)r[n+a>>>2]=e[a>>>2];return this.sigBytes+=o,this},clamp:function(){var r=this.words,e=this.sigBytes;r[e>>>2]&=4294967295<<32-e%4*8,r.length=t.ceil(e/4)},clone:function(){var t=a.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var r=[],e=0;e<t;e+=4)r.push(n());return new s.init(r,t)}}),c=i.enc={},f=c.Hex={stringify:function(t){for(var r=t.words,e=t.sigBytes,n=[],o=0;o<e;o++){var i=r[o>>>2]>>>24-o%4*8&255;n.push((i>>>4).toString(16)),n.push((15&i).toString(16))}return n.join("")},parse:function(t){for(var r=t.length,e=[],n=0;n<r;n+=2)e[n>>>3]|=parseInt(t.substr(n,2),16)<<24-n%8*4;return new s.init(e,r/2)}},l=c.Latin1={stringify:function(t){for(var r=t.words,e=t.sigBytes,n=[],o=0;o<e;o++){var i=r[o>>>2]>>>24-o%4*8&255;n.push(String.fromCharCode(i))}return n.join("")},parse:function(t){for(var r=t.length,e=[],n=0;n<r;n++)e[n>>>2]|=(255&t.charCodeAt(n))<<24-n%4*8;return new s.init(e,r)}},p=c.Utf8={stringify:function(t){try{return decodeURIComponent(escape(l.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return l.parse(unescape(encodeURIComponent(t)))}},y=u.BufferedBlockAlgorithm=a.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=p.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(r){var e,n=this._data,o=n.words,i=n.sigBytes,u=this.blockSize,a=i/(4*u),c=(a=r?t.ceil(a):t.max((0|a)-this._minBufferSize,0))*u,f=t.min(4*c,i);if(c){for(var l=0;l<c;l+=u)this._doProcessBlock(o,l);e=o.splice(0,c),n.sigBytes-=f}return new s.init(e,f)},clone:function(){var t=a.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});u.Hasher=y.extend({cfg:a.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){y.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(r,e){return new t.init(e).finalize(r)}},_createHmacHelper:function(t){return function(r,e){return new d.HMAC.init(t,e).finalize(r)}}});var d=i.algo={};return i}(Math),Dt),function(t,r){t.exports=function(t){return function(r){var e=t,n=e.lib,o=n.WordArray,i=n.Hasher,u=e.algo,a=[],s=[];!function(){function t(t){for(var e=r.sqrt(t),n=2;n<=e;n++)if(!(t%n))return!1;return!0}function e(t){return 4294967296*(t-(0|t))|0}for(var n=2,o=0;o<64;)t(n)&&(o<8&&(a[o]=e(r.pow(n,.5))),s[o]=e(r.pow(n,1/3)),o++),n++}();var c=[],f=u.SHA256=i.extend({_doReset:function(){this._hash=new o.init(a.slice(0))},_doProcessBlock:function(t,r){for(var e=this._hash.words,n=e[0],o=e[1],i=e[2],u=e[3],a=e[4],f=e[5],l=e[6],p=e[7],h=0;h<64;h++){if(h<16)c[h]=0|t[r+h];else{var y=c[h-15],d=(y<<25|y>>>7)^(y<<14|y>>>18)^y>>>3,v=c[h-2],g=(v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10;c[h]=d+c[h-7]+g+c[h-16]}var m=n&o^n&i^o&i,D=(n<<30|n>>>2)^(n<<19|n>>>13)^(n<<10|n>>>22),w=p+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&f^~a&l)+s[h]+c[h];p=l,l=f,f=a,a=u+w|0,u=i,i=o,o=n,n=w+(D+m)|0}e[0]=e[0]+n|0,e[1]=e[1]+o|0,e[2]=e[2]+i|0,e[3]=e[3]+u|0,e[4]=e[4]+a|0,e[5]=e[5]+f|0,e[6]=e[6]+l|0,e[7]=e[7]+p|0},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,o=8*t.sigBytes;return e[o>>>5]|=128<<24-o%32,e[14+(o+64>>>9<<4)]=r.floor(n/4294967296),e[15+(o+64>>>9<<4)]=n,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=i._createHelper(f),e.HmacSHA256=i._createHmacHelper(f)}(Math),t.SHA256}(At.exports)}(bt);var xt=bt.exports,Et=function(t,r,e){return void 0===r&&(r=1),void 0===e&&(e=3),(Math.round(1e3*t)/1e3*r).toFixed(e)},Ft=function(t){return d.exports.filter(t,(function(r,e){return e===d.exports.findLastIndex(t,(function(t){return r.token===t.token&&r.value===t.value}))}))},_t=function(t){return t.model.moveProps.length>0},Ct=function(t,r){var e=t.getPath().filter((function(t){return _t(t)})).length;return r&&(e+=r.getPath().filter((function(t){return _t(t)})).length),e},St=function(t,r,e){void 0===r&&(r=[]),void 0===e&&(e=[]);var n="r";r.length>0&&(n="m"),e.length>0&&(n="s");var o=""+n;r.length>0&&(o+=""+r[0].token+r[0].value);var i=o;return t&&(i=t.getPath().map((function(t){return t.model.id})).join("=>")+"=>"+o),xt(i).toString().slice(0,6)},Bt=function(t,r){void 0===r&&(r=1);var e=[{value:1,symbol:""},{value:1e3,symbol:"k"},{value:1e6,symbol:"M"},{value:1e9,symbol:"G"},{value:1e12,symbol:"T"},{value:1e15,symbol:"P"},{value:1e18,symbol:"E"}].slice().reverse().find((function(r){return t>=r.value}));return e?(t/e.value).toFixed(r).replace(/\.0+$|(\.[0-9]*[1-9])0+$/,"$1")+e.symbol:"0"},Mt=function(t){var r="B"===t[0]?1:-1,e=/\[(.*)\]/.exec(t);if(e){var n=e[1];return{x:mt.indexOf(n[0]),y:mt.indexOf(n[1]),ki:r}}return{x:-1,y:-1,ki:0}},Nt=function(t){return{x:vt.indexOf(t[0]),y:gt.indexOf(parseInt(t.substr(1),0))}},Ot=function(t,r){if(void 0===r&&(r=0),0===r)return t;var e=d.exports.clone(t),n=mt.indexOf(t[2])-r;return e.substr(0,2)+mt[n]+e.substr(3)},Pt=function(t,r,e){if(void 0===e&&(e=1),!t||!r)return"";var n=jt(t,r),o=n.toFixed(e);return n>0?"+"+o:""+o},jt=function(t,r){var e="B"===t.currentPlayer?1:-1;return Math.round((r.scoreLead-t.scoreLead)*e*1e3)/1e3},Tt=function(t,r){var e="B"===t.currentPlayer?1:-1;return Math.round((r.winrate-t.winrate)*e*1e3*100)/1e3},It=function(t){return new Array(t[0]).fill(0).map((function(){return new Array(t[1]).fill(0)}))},kt=function(t){return new Array(t[0]).fill("").map((function(){return new Array(t[1]).fill("")}))},Rt=0,zt=[],Ut=function(t,r){void 0===r&&(r=19);for(var e=r-1,n=0,o=r-1,i=0,u=0;u<t.length;u++)for(var a=0;a<t[u].length;a++){0!==t[u][a]&&(e>u&&(e=u),n<u&&(n=u),o>a&&(o=a),i<a&&(i=a))}return{leftMost:e,rightMost:n,topMost:o,bottomMost:i}},Wt=function(r,e){void 0===e&&(e=19);var n=Ut(r,e),o=n.leftMost,i=n.rightMost,u=n.topMost<e-1-n.bottomMost,a=o<e-1-i;return u&&a?t.Center.TopLeft:!u&&a?t.Center.BottomLeft:u&&!a?t.Center.TopRight:u||a?t.Center.Center:t.Center.BottomRight},qt=function(r,e,n){void 0===e&&(e=19),void 0===n&&(n=2);var o=[19,19],i=Wt(r),u=Ut(r,e),a=u.leftMost,s=u.rightMost,c=u.topMost,f=u.bottomMost;return i===t.Center.TopLeft&&(o[0]=s+n+1,o[1]=f+n+1),i===t.Center.TopRight&&(o[0]=e-a+n,o[1]=f+n+1),i===t.Center.BottomLeft&&(o[0]=s+n+1,o[1]=e-c+n),i===t.Center.BottomRight&&(o[0]=e-a+n,o[1]=e-c+n),o},Lt=function(r,e,n){void 0===e&&(e=19),void 0===n&&(n=19);var o=19-e,i=19-n,u=o,a=i;switch(Wt(r)){case t.Center.TopLeft:u=0,a=-i;break;case t.Center.TopRight:u=o,a=-i;break;case t.Center.BottomLeft:u=0,a=0;break;case t.Center.BottomRight:u=o,a=0}return{x:u,y:a}},$t=function(r,e,n){void 0===e&&(e=19),void 0===n&&(n=2);var o=Wt(r),i=Ut(r,e),u=i.leftMost,a=i.rightMost,s=i.topMost,c=i.bottomMost,f=[[0,18],[0,18]],l=e-1;return o===t.Center.TopLeft?f=[[0,l=Math.min(Math.max(a,c)+n,e-1)],[0,l]]:o===t.Center.TopRight?f=[[e-1-(l=Math.min(Math.max(c+n,e-1-(u-n)),e-1)),18],[0,l]]:o===t.Center.BottomLeft?f=[[0,l=Math.min(Math.max(e-1-(s-n),a+n),e-1)],[e-1-l,18]]:o===t.Center.BottomRight&&(f=[[e-1-(l=Math.min(Math.max(e-1-(s-n),e-1-(u-n)),e-1)),18],[e-1-l,18]]),{visibleArea:f,center:o}};function Gt(t,r,e,n){r>=0&&r<19&&e>=0&&e<19&&(t[r][e]!==n||zt.includes(r+","+e)?0===t[r][e]&&(Rt+=1):(zt.push(r+","+e),Gt(t,r-1,e,n),Gt(t,r+1,e,n),Gt(t,r,e-1,n),Gt(t,r,e+1,n)))}function Zt(t,r,e,n){return Rt=0,zt=[],r<0||e<0||r>18||e>18||0===t[r][e]?{liberty:4,recursionPath:[]}:(Gt(t,r,e,n),{liberty:Rt,recursionPath:zt})}function Vt(t,r,e,n){var o=d.exports.cloneDeep(t),i=Zt(t,r,e-1,n),u=i.liberty,a=i.recursionPath,s=Zt(t,r,e+1,n),c=s.liberty,f=s.recursionPath,l=Zt(t,r-1,e,n),p=l.liberty,h=l.recursionPath,y=Zt(t,r+1,e,n),v=y.liberty,g=y.recursionPath;return 0===u&&a.forEach((function(t){var r=t.split(",");o[parseInt(r[0])][parseInt(r[1])]=0})),0===c&&f.forEach((function(t){var r=t.split(",");o[parseInt(r[0])][parseInt(r[1])]=0})),0===p&&h.forEach((function(t){var r=t.split(",");o[parseInt(r[0])][parseInt(r[1])]=0})),0===v&&g.forEach((function(t){var r=t.split(",");o[parseInt(r[0])][parseInt(r[1])]=0})),o}function Jt(t,r,e,n){var o=Zt(t,r,e-1,n),i=o.liberty,u=o.recursionPath,a=Zt(t,r,e+1,n),s=a.liberty,c=a.recursionPath,f=Zt(t,r-1,e,n),l=f.liberty,p=f.recursionPath,h=Zt(t,r+1,e,n),y=h.liberty,d=h.recursionPath;return 0===i&&u.length>0||(0===s&&c.length>0||(0===l&&p.length>0||0===y&&d.length>0))}function Ht(t,r,e,n){if(r<0||e<0)return!0;var o=d.exports.cloneDeep(t);if(0!==o[r][e])return!1;o[r][e]=n;var i=Zt(o,r,e,n).liberty;return!!Jt(o,r,e,-n)||!Jt(o,r,e,n)&&0!==i}var Yt=function(){function t(t,r,e,n,o){this.ctx=t,this.x=r,this.y=e,this.r=n,this.ki=o}return t.prototype.draw=function(){console.log("TBD")},t}(),Kt=function(t){function r(r,e,n,o,i){return t.call(this,r,e,n,o,i)||this}return c(r,t),r.prototype.draw=function(){var t=this,r=t.ctx,e=t.x,n=t.y,o=t.r,i=t.ki;o<=0||(r.beginPath(),r.arc(e,n,o,0,2*Math.PI,!0),r.lineWidth=1,r.strokeStyle="#000",1===i?r.fillStyle="#000":-1===i&&(r.fillStyle="#fff"),r.fill(),r.stroke())},r}(Yt),Xt=function(t){function r(r,e,n,o,i,u,a,s){var c=t.call(this,r,e,n,o,i)||this;return c.mod=u,c.blacks=a,c.whites=s,c}return c(r,t),r.prototype.draw=function(){var t,r=this,e=r.ctx,n=r.x,o=r.y,i=r.r,u=r.ki,a=r.blacks,s=r.whites,c=r.mod;i<=0||(t=1===u?a[c%a.length]:s[c%s.length])&&e.drawImage(t,n-i,o-i,2*i,2*i)},r}(Yt),Qt=function(){function t(t,r,e,n,o,i,u,a){this.ctx=t,this.x=r,this.y=e,this.r=n,this.rootInfo=o,this.moveInfo=i,this.norm=u||0,this.detail=a}return t.prototype.draw=function(){var t=this,r=t.ctx,e=t.x,n=t.y,o=t.r,i=t.rootInfo,u=t.moveInfo;if(!(o<0)){var a=u.prior,s=u.order,c=jt(i,u),f="rgba(255, 255, 255, 0.5)";if(f=a>=.5||a>=.1&&s<3&&c>-.3||0===s||c>=0?"rgba(136, 170, 60, 1)":a>.05&&c>-.5||a>.01&&c>-.1?"rgba(206, 210, 83, 1)":a>.01&&c>-1?"rgba(242, 217, 60, 1)":"rgba(236, 146, 73, 1)",r.save(),r.shadowOffsetX=0,r.shadowOffsetY=0,r.shadowColor="#fff",r.shadowBlur=0,u.visits>50&&c>-1&&(a>.01||s<5)){r.beginPath(),r.arc(e,n,o,0,2*Math.PI,!0),r.lineWidth=0,r.strokeStyle="rgba(255,255,255,0)",(d=r.createRadialGradient(e,n,.9*o,e,n,o)).addColorStop(0,f),d.addColorStop(.9,"rgba(255, 255, 255, 0"),r.fillStyle=d,r.fill();var l=o/1.5;r.font=.8*l+"px Tahoma",r.fillStyle="black",r.textAlign="center";var p="B"===i.currentPlayer?u.winrate:1-u.winrate;r.fillText(Et(p,100,1),e,n-o/2+l/5),r.font=l+"px Tahoma";var h=Pt(i,u);r.fillText(h,e,n+l/3),r.font=.8*l+"px Tahoma",r.fillStyle="black",r.textAlign="center",r.fillText(Bt(u.visits),e,n+o/2+l/3);var y=u.order;r.fillText((y+1).toString(),e+o,n-o/2)}else{var d;r.beginPath(),r.arc(e,n,.6*o,0,2*Math.PI,!0),r.lineWidth=0,r.strokeStyle="rgba(255,255,255,0)",(d=r.createRadialGradient(e,n,.4*o,e,n,o)).addColorStop(0,f),d.addColorStop(.95,"rgba(255, 255, 255, 0"),r.fillStyle=d,r.fill(),r.stroke()}r.restore()}},t}(),tr={exports:{}};!function(t){function r(){return t.exports=r=Object.assign?Object.assign.bind():function(t){for(var r=1;r<arguments.length;r++){var e=arguments[r];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}return t},t.exports.__esModule=!0,t.exports.default=t.exports,r.apply(this,arguments)}t.exports=r,t.exports.__esModule=!0,t.exports.default=t.exports}(tr);var rr=y(tr.exports),er={epsilon:1e-12,matrix:"Matrix",number:"number",precision:64,predictable:!1,randomSeed:null};function nr(t){return"number"==typeof t}function or(t){return!(!t||"object"!==o(t)||"function"!=typeof t.constructor)&&(!0===t.isBigNumber&&"object"===o(t.constructor.prototype)&&!0===t.constructor.prototype.isBigNumber||"function"==typeof t.constructor.isDecimal&&!0===t.constructor.isDecimal(t))}function ir(t){return t&&"object"===o(t)&&!0===Object.getPrototypeOf(t).isComplex||!1}function ur(t){return t&&"object"===o(t)&&!0===Object.getPrototypeOf(t).isFraction||!1}function ar(t){return t&&!0===t.constructor.prototype.isUnit||!1}function sr(t){return"string"==typeof t}var cr=Array.isArray;function fr(t){return t&&!0===t.constructor.prototype.isMatrix||!1}function lr(t){return Array.isArray(t)||fr(t)}function pr(t){return t&&t.isDenseMatrix&&!0===t.constructor.prototype.isMatrix||!1}function hr(t){return t&&t.isSparseMatrix&&!0===t.constructor.prototype.isMatrix||!1}function yr(t){return t&&!0===t.constructor.prototype.isRange||!1}function dr(t){return t&&!0===t.constructor.prototype.isIndex||!1}function vr(t){return"boolean"==typeof t}function gr(t){return t&&!0===t.constructor.prototype.isResultSet||!1}function mr(t){return t&&!0===t.constructor.prototype.isHelp||!1}function Dr(t){return"function"==typeof t}function wr(t){return t instanceof Date}function br(t){return t instanceof RegExp}function Ar(t){return!(!t||"object"!==o(t)||t.constructor!==Object||ir(t)||ur(t))}function xr(t){return null===t}function Er(t){return void 0===t}function Fr(t){return t&&!0===t.isAccessorNode&&!0===t.constructor.prototype.isNode||!1}function _r(t){return t&&!0===t.isArrayNode&&!0===t.constructor.prototype.isNode||!1}function Cr(t){return t&&!0===t.isAssignmentNode&&!0===t.constructor.prototype.isNode||!1}function Sr(t){return t&&!0===t.isBlockNode&&!0===t.constructor.prototype.isNode||!1}function Br(t){return t&&!0===t.isConditionalNode&&!0===t.constructor.prototype.isNode||!1}function Mr(t){return t&&!0===t.isConstantNode&&!0===t.constructor.prototype.isNode||!1}function Nr(t){return t&&!0===t.isFunctionAssignmentNode&&!0===t.constructor.prototype.isNode||!1}function Or(t){return t&&!0===t.isFunctionNode&&!0===t.constructor.prototype.isNode||!1}function Pr(t){return t&&!0===t.isIndexNode&&!0===t.constructor.prototype.isNode||!1}function jr(t){return t&&!0===t.isNode&&!0===t.constructor.prototype.isNode||!1}function Tr(t){return t&&!0===t.isObjectNode&&!0===t.constructor.prototype.isNode||!1}function Ir(t){return t&&!0===t.isOperatorNode&&!0===t.constructor.prototype.isNode||!1}function kr(t){return t&&!0===t.isParenthesisNode&&!0===t.constructor.prototype.isNode||!1}function Rr(t){return t&&!0===t.isRangeNode&&!0===t.constructor.prototype.isNode||!1}function zr(t){return t&&!0===t.isRelationalNode&&!0===t.constructor.prototype.isNode||!1}function Ur(t){return t&&!0===t.isSymbolNode&&!0===t.constructor.prototype.isNode||!1}function Wr(t){return t&&!0===t.constructor.prototype.isChain||!1}function qr(t){var r=o(t);return"object"===r?null===t?"null":or(t)?"BigNumber":t.constructor&&t.constructor.name?t.constructor.name:"Object":r}function Lr(t){var r=o(t);if("number"===r||"string"===r||"boolean"===r||null==t)return t;if("function"==typeof t.clone)return t.clone();if(Array.isArray(t))return t.map((function(t){return Lr(t)}));if(t instanceof Date)return new Date(t.valueOf());if(or(t))return t;if(t instanceof RegExp)throw new TypeError("Cannot clone "+t);return $r(t,Lr)}function $r(t,r){var e={};for(var n in t)Kr(t,n)&&(e[n]=r(t[n]));return e}function Gr(t,r){for(var e in r)Kr(r,e)&&(t[e]=r[e]);return t}function Zr(t,r){if(Array.isArray(r))throw new TypeError("Arrays are not supported by deepExtend");for(var e in r)if(Kr(r,e)&&!(e in Object.prototype)&&!(e in Function.prototype))if(r[e]&&r[e].constructor===Object)void 0===t[e]&&(t[e]={}),t[e]&&t[e].constructor===Object?Zr(t[e],r[e]):t[e]=r[e];else{if(Array.isArray(r[e]))throw new TypeError("Arrays are not supported by deepExtend");t[e]=r[e]}return t}function Vr(t,r){var e,n,o;if(Array.isArray(t)){if(!Array.isArray(r))return!1;if(t.length!==r.length)return!1;for(n=0,o=t.length;n<o;n++)if(!Vr(t[n],r[n]))return!1;return!0}if("function"==typeof t)return t===r;if(t instanceof Object){if(Array.isArray(r)||!(r instanceof Object))return!1;for(e in t)if(!(e in r)||!Vr(t[e],r[e]))return!1;for(e in r)if(!(e in t))return!1;return!0}return t===r}function Jr(t){var r={};return Hr(t,r),r}function Hr(t,r){for(var e in t)if(Kr(t,e)){var n=t[e];"object"===o(n)&&null!==n?Hr(n,r):r[e]=n}}function Yr(t,r,e){var n,o=!0;Object.defineProperty(t,r,{get:function(){return o&&(n=e(),o=!1),n},set:function(t){n=t,o=!1},configurable:!0,enumerable:!0})}function Kr(t,r){return t&&Object.hasOwnProperty.call(t,r)}function Xr(t){return Object.keys(t).map((function(r){return t[r]}))}var Qr=["Matrix","Array"],te=["number","BigNumber","Fraction"];function re(t,r){function e(e){if(e){var n=$r(t,Lr);ee(e,"matrix",Qr),ee(e,"number",te),Zr(t,e);var o=$r(t,Lr),i=$r(e,Lr);return r("config",o,n,i),o}return $r(t,Lr)}return e.MATRIX_OPTIONS=Qr,e.NUMBER_OPTIONS=te,Object.keys(er).forEach((function(r){Object.defineProperty(e,r,{get:function(){return t[r]},enumerable:!0,configurable:!0})})),e}function ee(t,r,e){var n,o;void 0!==t[r]&&(n=e,o=t[r],-1===n.indexOf(o))&&console.warn('Warning: Unknown value "'+t[r]+'" for configuration option "'+r+'". Available options: '+e.map((function(t){return JSON.stringify(t)})).join(", ")+".")}var ne={exports:{}};!function(t,r){t.exports=function(){function t(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=r(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,a=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,u=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw u}}}}function r(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}function e(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(){return!0}function i(){return!1}function u(){}var a="Argument is not a typed-function.";function s(){function r(t){return"object"===n(t)&&null!==t&&t.constructor===Object}var e,c,f=[{name:"number",test:function(t){return"number"==typeof t}},{name:"string",test:function(t){return"string"==typeof t}},{name:"boolean",test:function(t){return"boolean"==typeof t}},{name:"Function",test:function(t){return"function"==typeof t}},{name:"Array",test:Array.isArray},{name:"Date",test:function(t){return t instanceof Date}},{name:"RegExp",test:function(t){return t instanceof RegExp}},{name:"Object",test:r},{name:"null",test:function(t){return null===t}},{name:"undefined",test:function(t){return void 0===t}}],l={name:"any",test:o,isAny:!0},p=0,h={createCount:0};function y(r){var n=e.get(r);if(n)return n;var o,i,u='Unknown type "'+r+'"',a=r.toLowerCase(),s=t(c);try{for(s.s();!(i=s.n()).done;)if((o=i.value).toLowerCase()===a){u+='. Did you mean "'+o+'" ?';break}}catch(t){s.e(t)}finally{s.f()}throw new TypeError(u)}function d(t){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"any",n=r?y(r).index:c.length,o=[],i=0;i<t.length;++i){if(!t[i]||"string"!=typeof t[i].name||"function"!=typeof t[i].test)throw new TypeError("Object with properties {name: string, test: function} expected");var u=t[i].name;if(e.has(u))throw new TypeError('Duplicate type name "'+u+'"');o.push(u),e.set(u,{name:u,test:t[i].test,isAny:t[i].isAny,index:n+i,conversionsTo:[]})}var a=c.slice(n);c=c.slice(0,n).concat(o).concat(a);for(var s=n+o.length;s<c.length;++s)e.get(c[s]).index=s}function v(){e=new Map,c=[],p=0,d([l],!1)}function g(){var r,n,o=t(c);try{for(o.s();!(n=o.n()).done;)r=n.value,e.get(r).conversionsTo=[]}catch(t){o.e(t)}finally{o.f()}p=0}function m(t){var r=c.filter((function(r){var n=e.get(r);return!n.isAny&&n.test(t)}));return r.length?r:["any"]}function D(t){return t&&"function"==typeof t&&"_typedFunctionData"in t}function w(r,e,n){if(!D(r))throw new TypeError(a);var o=n&&n.exact,i=C(Array.isArray(e)?e.join(","):e),u=x(i);if(!o||u in r.signatures){var s=r._typedFunctionData.signatureMap.get(u);if(s)return s}var c,f,l,p=i.length;if(o)for(f in c=[],r.signatures)c.push(r._typedFunctionData.signatureMap.get(f));else c=r._typedFunctionData.signatures;for(var h=0;h<p;++h){var y,d=i[h],v=[],g=void 0,m=t(c);try{for(m.s();!(y=m.n()).done;){var w=N((g=y.value).params,h);if(w&&(!d.restParam||w.restParam)){if(!w.hasAny&&"continue"===function(){var t=_(w);if(d.types.some((function(r){return!t.has(r.name)})))return"continue"}())continue;v.push(g)}}}catch(t){m.e(t)}finally{m.f()}if(0===(c=v).length)break}var b,A=t(c);try{for(A.s();!(b=A.n()).done;)if((l=b.value).params.length<=p)return l}catch(t){A.e(t)}finally{A.f()}throw new TypeError("Signature not found (signature: "+(r.name||"unnamed")+"("+x(i,", ")+"))")}function b(t,r,e){return w(t,r,e).implementation}function A(t,r){var e=y(r);if(e.test(t))return t;var n=e.conversionsTo;if(0===n.length)throw new Error("There are no conversions to "+r+" defined.");for(var o=0;o<n.length;o++)if(y(n[o].from).test(t))return n[o].convert(t);throw new Error("Cannot convert "+t+" to "+r)}function x(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return t.map((function(t){return t.name})).join(r)}function E(t){var r=0===t.indexOf("..."),e=(r?t.length>3?t.slice(3):"any":t).split("|").map((function(t){return y(t.trim())})),n=!1,o=r?"...":"";return{types:e.map((function(t){return n=t.isAny||n,o+=t.name+"|",{name:t.name,typeIndex:t.index,test:t.test,isAny:t.isAny,conversion:null,conversionIndex:-1}})),name:o.slice(0,-1),hasAny:n,hasConversion:!1,restParam:r}}function F(t){var r=U(t.types.map((function(t){return t.name}))),e=t.hasAny,n=t.name,o=r.map((function(t){var r=y(t.from);return e=r.isAny||e,n+="|"+t.from,{name:t.from,typeIndex:r.index,test:r.test,isAny:r.isAny,conversion:t,conversionIndex:t.index}}));return{types:t.types.concat(o),name:n,hasAny:e,hasConversion:o.length>0,restParam:t.restParam}}function _(t){return t.typeSet||(t.typeSet=new Set,t.types.forEach((function(r){return t.typeSet.add(r.name)}))),t.typeSet}function C(t){var r=[];if("string"!=typeof t)throw new TypeError("Signatures must be strings");var e=t.trim();if(""===e)return r;for(var n=e.split(","),o=0;o<n.length;++o){var i=E(n[o].trim());if(i.restParam&&o!==n.length-1)throw new SyntaxError('Unexpected rest parameter "'+n[o]+'": only allowed for the last parameter');if(0===i.types.length)return null;r.push(i)}return r}function S(t){var r=X(t);return!!r&&r.restParam}function B(t){if(t&&0!==t.types.length){if(1===t.types.length)return y(t.types[0].name).test;if(2===t.types.length){var r=y(t.types[0].name).test,e=y(t.types[1].name).test;return function(t){return r(t)||e(t)}}var n=t.types.map((function(t){return y(t.name).test}));return function(t){for(var r=0;r<n.length;r++)if(n[r](t))return!0;return!1}}return o}function M(t){var r,e,n;if(S(t)){var o=(r=K(t).map(B)).length,i=B(X(t)),u=function(t){for(var r=o;r<t.length;r++)if(!i(t[r]))return!1;return!0};return function(t){for(var e=0;e<r.length;e++)if(!r[e](t[e]))return!1;return u(t)&&t.length>=o+1}}return 0===t.length?function(t){return 0===t.length}:1===t.length?(e=B(t[0]),function(t){return e(t[0])&&1===t.length}):2===t.length?(e=B(t[0]),n=B(t[1]),function(t){return e(t[0])&&n(t[1])&&2===t.length}):(r=t.map(B),function(t){for(var e=0;e<r.length;e++)if(!r[e](t[e]))return!1;return t.length===r.length})}function N(t,r){return r<t.length?t[r]:S(t)?X(t):null}function O(t,r){var e=N(t,r);return e?_(e):new Set}function P(t){return null===t.conversion||void 0===t.conversion}function j(r,e){var n=new Set;return r.forEach((function(r){var o,i,u=t(O(r.params,e));try{for(u.s();!(i=u.n()).done;)o=i.value,n.add(o)}catch(t){u.e(t)}finally{u.f()}})),n.has("any")?["any"]:Array.from(n)}function T(t,r,e){var o,i,u,a=t||"unnamed",s=e,c=function(){var t=[];if(s.forEach((function(e){var n=B(N(e.params,u));(u<e.params.length||S(e.params))&&n(r[u])&&t.push(e)})),0===t.length){if((i=j(s,u)).length>0){var e=m(r[u]);return(o=new TypeError("Unexpected type of argument in function "+a+" (expected: "+i.join(" or ")+", actual: "+e.join(" | ")+", index: "+u+")")).data={category:"wrongType",fn:a,index:u,actual:e,expected:i},{v:o}}}else s=t};for(u=0;u<r.length;u++){var f=c();if("object"===n(f))return f.v}var l=s.map((function(t){return S(t.params)?1/0:t.params.length}));if(r.length<Math.min.apply(null,l))return i=j(s,u),(o=new TypeError("Too few arguments in function "+a+" (expected: "+i.join(" or ")+", index: "+r.length+")")).data={category:"tooFewArgs",fn:a,index:r.length,expected:i},o;var p=Math.max.apply(null,l);if(r.length>p)return(o=new TypeError("Too many arguments in function "+a+" (expected: "+p+", actual: "+r.length+")")).data={category:"tooManyArgs",fn:a,index:r.length,expectedLength:p},o;for(var h=[],y=0;y<r.length;++y)h.push(m(r[y]).join("|"));return(o=new TypeError('Arguments of type "'+h.join(", ")+'" do not match any of the defined signatures of function '+a+".")).data={category:"mismatch",actual:h},o}function I(t){for(var r=c.length+1,e=0;e<t.types.length;e++)P(t.types[e])&&(r=Math.min(r,t.types[e].typeIndex));return r}function k(t){for(var r=p+1,e=0;e<t.types.length;e++)P(t.types[e])||(r=Math.min(r,t.types[e].conversionIndex));return r}function R(t,r){if(t.hasAny){if(!r.hasAny)return 1}else if(r.hasAny)return-1;if(t.restParam){if(!r.restParam)return 1}else if(r.restParam)return-1;if(t.hasConversion){if(!r.hasConversion)return 1}else if(r.hasConversion)return-1;var e=I(t)-I(r);if(e<0)return-1;if(e>0)return 1;var n=k(t)-k(r);return n<0?-1:n>0?1:0}function z(r,e){var n=r.params,o=e.params,i=X(n),u=X(o),a=S(n),s=S(o);if(a&&i.hasAny){if(!s||!u.hasAny)return 1}else if(s&&u.hasAny)return-1;var c,f,l=0,p=0,h=t(n);try{for(h.s();!(f=h.n()).done;)(c=f.value).hasAny&&++l,c.hasConversion&&++p}catch(t){h.e(t)}finally{h.f()}var y,d=0,v=0,g=t(o);try{for(g.s();!(y=g.n()).done;)(c=y.value).hasAny&&++d,c.hasConversion&&++v}catch(t){g.e(t)}finally{g.f()}if(l!==d)return l-d;if(a&&i.hasConversion){if(!s||!u.hasConversion)return 1}else if(s&&u.hasConversion)return-1;if(p!==v)return p-v;if(a){if(!s)return 1}else if(s)return-1;var m=(n.length-o.length)*(a?-1:1);if(0!==m)return m;for(var D,w=[],b=0,A=0;A<n.length;++A){var x=R(n[A],o[A]);w.push(x),b+=x}if(0!==b)return b;for(var E=0,F=w;E<F.length;E++)if(0!==(D=F[E]))return D;return 0}function U(r){if(0===r.length)return[];var e=r.map(y);r.length>1&&e.sort((function(t,r){return t.index-r.index}));var n=e[0].conversionsTo;if(1===r.length)return n;n=n.concat([]);for(var o=new Set(r),i=1;i<e.length;++i){var u,a=void 0,s=t(e[i].conversionsTo);try{for(s.s();!(u=s.n()).done;)a=u.value,o.has(a.from)||(n.push(a),o.add(a.from))}catch(t){s.e(t)}finally{s.f()}}return n}function W(t,r){var e=r;if(t.some((function(t){return t.hasConversion}))){var n=S(t),o=t.map(q);e=function(){for(var t=[],e=n?arguments.length-1:arguments.length,i=0;i<e;i++)t[i]=o[i](arguments[i]);return n&&(t[e]=arguments[e].map(o[e])),r.apply(this,t)}}var i=e;if(S(t)){var u=t.length-1;i=function(){return e.apply(this,Q(arguments,0,u).concat([Q(arguments,u)]))}}return i}function q(t){var r,e,n,o,i=[],u=[];switch(t.types.forEach((function(t){t.conversion&&(i.push(y(t.conversion.from).test),u.push(t.conversion.convert))})),u.length){case 0:return function(t){return t};case 1:return r=i[0],n=u[0],function(t){return r(t)?n(t):t};case 2:return r=i[0],e=i[1],n=u[0],o=u[1],function(t){return r(t)?n(t):e(t)?o(t):t};default:return function(t){for(var r=0;r<u.length;r++)if(i[r](t))return u[r](t);return t}}}function L(t){function r(t,e,n){if(e<t.length){var o=t[e],i=[];if(o.restParam){var u=o.types.filter(P);u.length<o.types.length&&i.push({types:u,name:"..."+u.map((function(t){return t.name})).join("|"),hasAny:u.some((function(t){return t.isAny})),hasConversion:!1,restParam:!0}),i.push(o)}else i=o.types.map((function(t){return{types:[t],name:t.name,hasAny:t.isAny,hasConversion:t.conversion,restParam:!1}}));return rt(i,(function(o){return r(t,e+1,n.concat([o]))}))}return[n]}return r(t,0,[])}function $(r,e){for(var n=Math.max(r.length,e.length),o=0;o<n;o++){var i,u=O(r,o),a=!1,s=void 0,c=t(O(e,o));try{for(c.s();!(i=c.n()).done;)if(s=i.value,u.has(s)){a=!0;break}}catch(t){c.e(t)}finally{c.f()}if(!a)return!1}var f=r.length,l=e.length,p=S(r),h=S(e);return p?h?f===l:l>=f:h?f>=l:f===l}function G(t){return t.map((function(t){return ut(t)?ot(t.referToSelf.callback):it(t)?nt(t.referTo.references,t.referTo.callback):t}))}function Z(r,e,n){var o,i,u=[],a=t(r);try{for(a.s();!(i=a.n()).done;){var s=n[o=i.value];if("number"!=typeof s)throw new TypeError('No definition for referenced signature "'+o+'"');if("function"!=typeof(s=e[s]))return!1;u.push(s)}}catch(t){a.e(t)}finally{a.f()}return u}function V(t,r,e){for(var n=G(t),o=new Array(n.length).fill(!1),i=!0;i;){i=!1;for(var u=!0,a=0;a<n.length;++a)if(!o[a]){var s=n[a];if(ut(s))n[a]=s.referToSelf.callback(e),n[a].referToSelf=s.referToSelf,o[a]=!0,u=!1;else if(it(s)){var c=Z(s.referTo.references,n,r);c?(n[a]=s.referTo.callback.apply(this,c),n[a].referTo=s.referTo,o[a]=!0,u=!1):i=!0}}if(u&&i)throw new SyntaxError("Circular reference detected in resolving typed.referTo")}return n}function J(t){var r=/\bthis(\(|\.signatures\b)/;Object.keys(t).forEach((function(e){var n=t[e];if(r.test(n.toString()))throw new SyntaxError("Using `this` to self-reference a function is deprecated since typed-function@3. Use typed.referTo and typed.referToSelf instead.")}))}function H(r,e){if(h.createCount++,0===Object.keys(e).length)throw new SyntaxError("No signatures provided");h.warnAgainstDeprecatedThis&&J(e);var n,o=[],a=[],s={},c=[],f=function(){if(!Object.prototype.hasOwnProperty.call(e,n))return"continue";var r=C(n);if(!r)return"continue";o.forEach((function(t){if($(t,r))throw new TypeError('Conflicting signatures "'+x(t)+'" and "'+x(r)+'".')})),o.push(r);var i=a.length;a.push(e[n]);var u,f=void 0,l=t(L(r.map(F)));try{for(l.s();!(u=l.n()).done;){var p=x(f=u.value);c.push({params:f,name:p,fn:i}),f.every((function(t){return!t.hasConversion}))&&(s[p]=i)}}catch(t){l.e(t)}finally{l.f()}};for(n in e)f();c.sort(z);var l,p=V(a,s,yt);for(l in s)Object.prototype.hasOwnProperty.call(s,l)&&(s[l]=p[s[l]]);for(var y=[],d=new Map,v=0,g=c;v<g.length;v++)l=g[v],d.has(l.name)||(l.fn=p[l.fn],y.push(l),d.set(l.name,l));for(var m=y[0]&&y[0].params.length<=2&&!S(y[0].params),D=y[1]&&y[1].params.length<=2&&!S(y[1].params),w=y[2]&&y[2].params.length<=2&&!S(y[2].params),b=y[3]&&y[3].params.length<=2&&!S(y[3].params),A=y[4]&&y[4].params.length<=2&&!S(y[4].params),E=y[5]&&y[5].params.length<=2&&!S(y[5].params),_=m&&D&&w&&b&&A&&E,N=0;N<y.length;++N)y[N].test=M(y[N].params);for(var O=m?B(y[0].params[0]):i,P=D?B(y[1].params[0]):i,j=w?B(y[2].params[0]):i,T=b?B(y[3].params[0]):i,I=A?B(y[4].params[0]):i,k=E?B(y[5].params[0]):i,R=m?B(y[0].params[1]):i,U=D?B(y[1].params[1]):i,q=w?B(y[2].params[1]):i,G=b?B(y[3].params[1]):i,Z=A?B(y[4].params[1]):i,H=E?B(y[5].params[1]):i,Y=0;Y<y.length;++Y)y[Y].implementation=W(y[Y].params,y[Y].fn);var K=m?y[0].implementation:u,X=D?y[1].implementation:u,Q=w?y[2].implementation:u,tt=b?y[3].implementation:u,rt=A?y[4].implementation:u,et=E?y[5].implementation:u,nt=m?y[0].params.length:-1,ot=D?y[1].params.length:-1,it=w?y[2].params.length:-1,ut=b?y[3].params.length:-1,at=A?y[4].params.length:-1,st=E?y[5].params.length:-1,ct=_?6:0,ft=y.length,lt=y.map((function(t){return t.test})),pt=y.map((function(t){return t.implementation})),ht=function(){for(var t=ct;t<ft;t++)if(lt[t](arguments))return pt[t].apply(this,arguments);return h.onMismatch(r,arguments,y)};function yt(t,r){return arguments.length===nt&&O(t)&&R(r)?K.apply(this,arguments):arguments.length===ot&&P(t)&&U(r)?X.apply(this,arguments):arguments.length===it&&j(t)&&q(r)?Q.apply(this,arguments):arguments.length===ut&&T(t)&&G(r)?tt.apply(this,arguments):arguments.length===at&&I(t)&&Z(r)?rt.apply(this,arguments):arguments.length===st&&k(t)&&H(r)?et.apply(this,arguments):ht.apply(this,arguments)}try{Object.defineProperty(yt,"name",{value:r})}catch(t){}return yt.signatures=s,yt._typedFunctionData={signatures:y,signatureMap:d},yt}function Y(t,r,e){throw T(t,r,e)}function K(t){return Q(t,0,t.length-1)}function X(t){return t[t.length-1]}function Q(t,r,e){return Array.prototype.slice.call(t,r,e)}function tt(t,r){for(var e=0;e<t.length;e++)if(r(t[e]))return t[e]}function rt(t,r){return Array.prototype.concat.apply([],t.map(r))}function et(){var t=K(arguments).map((function(t){return x(C(t))})),r=X(arguments);if("function"!=typeof r)throw new TypeError("Callback function expected as last argument");return nt(t,r)}function nt(t,r){return{referTo:{references:t,callback:r}}}function ot(t){if("function"!=typeof t)throw new TypeError("Callback function expected as first argument");return{referToSelf:{callback:t}}}function it(t){return t&&"object"===n(t.referTo)&&Array.isArray(t.referTo.references)&&"function"==typeof t.referTo.callback}function ut(t){return t&&"object"===n(t.referToSelf)&&"function"==typeof t.referToSelf.callback}function at(t,r){if(!t)return r;if(r&&r!==t){var e=new Error("Function names do not match (expected: "+t+", actual: "+r+")");throw e.data={actual:r,expected:t},e}return t}function st(t){var r;for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(D(t[e])||"string"==typeof t[e].signature)&&(r=at(r,t[e].name));return r}function ct(t,r){var e;for(e in r)if(Object.prototype.hasOwnProperty.call(r,e)){if(e in t&&r[e]!==t[e]){var n=new Error('Signature "'+e+'" is defined twice');throw n.data={signature:e,sourceFunction:r[e],destFunction:t[e]},n}t[e]=r[e]}}v(),d(f);var ft=h;function lt(t){if(!t||"string"!=typeof t.from||"string"!=typeof t.to||"function"!=typeof t.convert)throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");if(t.to===t.from)throw new SyntaxError('Illegal to define conversion from "'+t.from+'" to itself.')}return h=function(t){for(var e="string"==typeof t,n=e?t:"",o={},i=e?1:0;i<arguments.length;++i){var u=arguments[i],a={},s=void 0;if("function"==typeof u?(s=u.name,"string"==typeof u.signature?a[u.signature]=u:D(u)&&(a=u.signatures)):r(u)&&(a=u,e||(s=st(u))),0===Object.keys(a).length){var c=new TypeError("Argument to 'typed' at index "+i+" is not a (typed) function, nor an object with signatures as keys and functions as values.");throw c.data={index:i,argument:u},c}e||(n=at(n,s)),ct(o,a)}return H(n||"",o)},h.create=s,h.createCount=ft.createCount,h.onMismatch=Y,h.throwMismatchError=Y,h.createError=T,h.clear=v,h.clearConversions=g,h.addTypes=d,h._findType=y,h.referTo=et,h.referToSelf=ot,h.convert=A,h.findSignature=w,h.find=b,h.isTypedFunction=D,h.warnAgainstDeprecatedThis=!0,h.addType=function(t,r){var n="any";!1!==r&&e.has("Object")&&(n="Object"),h.addTypes([t],n)},h.addConversion=function(t){lt(t);var r=y(t.to);if(!r.conversionsTo.every((function(r){return r.from!==t.from})))throw new Error('There is already a conversion from "'+t.from+'" to "'+r.name+'"');r.conversionsTo.push({from:t.from,convert:t.convert,index:p++})},h.addConversions=function(t){t.forEach(h.addConversion)},h.removeConversion=function(t){lt(t);var r=y(t.to),e=tt(r.conversionsTo,(function(r){return r.from===t.from}));if(!e)throw new Error("Attempt to remove nonexistent conversion from "+t.from+" to "+t.to);if(e.convert!==t.convert)throw new Error("Conversion to remove does not match existing conversion");var n=r.conversionsTo.indexOf(e);r.conversionsTo.splice(n,1)},h.resolve=function(t,r){if(!D(t))throw new TypeError(a);for(var e=t._typedFunctionData.signatures,n=0;n<e.length;++n)if(e[n].test(r))return e[n];return null},h}return s()}()}(ne);var oe=ne.exports;function ie(t){return"boolean"==typeof t||!!isFinite(t)&&t===Math.round(t)}function ue(t,r,e){var n={2:"0b",8:"0o",16:"0x"}[r],o="";if(e){if(e<1)throw new Error("size must be in greater than 0");if(!ie(e))throw new Error("size must be an integer");if(t>Math.pow(2,e-1)-1||t<-Math.pow(2,e-1))throw new Error("Value must be in range [-2^".concat(e-1,", 2^").concat(e-1,"-1]"));if(!ie(t))throw new Error("Value must be an integer");t<0&&(t+=Math.pow(2,e)),o="i".concat(e)}var i="";return t<0&&(t=-t,i="-"),"".concat(i).concat(n).concat(t.toString(r)).concat(o)}function ae(t,r){if("function"==typeof r)return r(t);if(t===1/0)return"Infinity";if(t===-1/0)return"-Infinity";if(isNaN(t))return"NaN";var e,n,o="auto";if(r&&(r.notation&&(o=r.notation),nr(r)?e=r:nr(r.precision)&&(e=r.precision),r.wordSize&&"number"!=typeof(n=r.wordSize)))throw new Error('Option "wordSize" must be a number');switch(o){case"fixed":return function(t,r){if(isNaN(t)||!isFinite(t))return String(t);var e=se(t),n="number"==typeof r?fe(e,e.exponent+1+r):e,o=n.coefficients,i=n.exponent+1,u=i+(r||0);o.length<u&&(o=o.concat(le(u-o.length)));i<0&&(o=le(1-i).concat(o),i=1);i<o.length&&o.splice(i,0,0===i?"0.":".");return n.sign+o.join("")}(t,e);case"exponential":return ce(t,e);case"engineering":return function(t,r){if(isNaN(t)||!isFinite(t))return String(t);var e=fe(se(t),r),n=e.exponent,o=e.coefficients,i=n%3==0?n:n<0?n-3-n%3:n-n%3;if(nr(r))for(;r>o.length||n-i+1>o.length;)o.push(0);else for(var u=Math.abs(n-i)-(o.length-1),a=0;a<u;a++)o.push(0);var s=Math.abs(n-i),c=1;for(;s>0;)c++,s--;var f=o.slice(c).join(""),l=nr(r)&&f.length||f.match(/[1-9]/)?"."+f:"",p=o.slice(0,c).join("")+l+"e"+(n>=0?"+":"")+i.toString();return e.sign+p}(t,e);case"bin":return ue(t,2,n);case"oct":return ue(t,8,n);case"hex":return ue(t,16,n);case"auto":return function(t,r,e){if(isNaN(t)||!isFinite(t))return String(t);var n=e&&void 0!==e.lowerExp?e.lowerExp:-3,o=e&&void 0!==e.upperExp?e.upperExp:5,i=se(t),u=r?fe(i,r):i;if(u.exponent<n||u.exponent>=o)return ce(t,r);var a=u.coefficients,s=u.exponent;a.length<r&&(a=a.concat(le(r-a.length))),a=a.concat(le(s-a.length+1+(a.length<r?r-a.length:0)));var c=s>0?s:0;return c<(a=le(-s).concat(a)).length-1&&a.splice(c+1,0,"."),u.sign+a.join("")}(t,e,r&&r).replace(/((\.\d*?)(0+))($|e)/,(function(){var t=arguments[2],r=arguments[4];return"."!==t?t+r:r}));default:throw new Error('Unknown notation "'+o+'". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.')}}function se(t){var r=String(t).toLowerCase().match(/^(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);if(!r)throw new SyntaxError("Invalid number "+t);var e=r[1],n=r[2],o=parseFloat(r[4]||"0"),i=n.indexOf(".");o+=-1!==i?i-1:n.length-1;var u=n.replace(".","").replace(/^0*/,(function(t){return o-=t.length,""})).replace(/0*$/,"").split("").map((function(t){return parseInt(t)}));return 0===u.length&&(u.push(0),o++),{sign:e,coefficients:u,exponent:o}}function ce(t,r){if(isNaN(t)||!isFinite(t))return String(t);var e=se(t),n=r?fe(e,r):e,o=n.coefficients,i=n.exponent;o.length<r&&(o=o.concat(le(r-o.length)));var u=o.shift();return n.sign+u+(o.length>0?"."+o.join(""):"")+"e"+(i>=0?"+":"")+i}function fe(t,r){for(var e={sign:t.sign,coefficients:t.coefficients,exponent:t.exponent},n=e.coefficients;r<=0;)n.unshift(0),e.exponent++,r++;if(n.length>r&&n.splice(r,n.length-r)[0]>=5){var o=r-1;for(n[o]++;10===n[o];)n.pop(),0===o&&(n.unshift(0),e.exponent++,o++),n[--o]++}return e}function le(t){for(var r=[],e=0;e<t;e++)r.push(0);return r}var pe=Number.EPSILON||2220446049250313e-31;function he(t,r,e){if(null==e)return t===r;if(t===r)return!0;if(isNaN(t)||isNaN(r))return!1;if(isFinite(t)&&isFinite(r)){var n=Math.abs(t-r);return n<pe||n<=Math.max(Math.abs(t),Math.abs(r))*e}return!1}function ye(t,r,e){var n=new(0,t.constructor)(2),o="";if(e){if(e<1)throw new Error("size must be in greater than 0");if(!ie(e))throw new Error("size must be an integer");if(t.greaterThan(n.pow(e-1).sub(1))||t.lessThan(n.pow(e-1).mul(-1)))throw new Error("Value must be in range [-2^".concat(e-1,", 2^").concat(e-1,"-1]"));if(!t.isInteger())throw new Error("Value must be an integer");t.lessThan(0)&&(t=t.add(n.pow(e))),o="i".concat(e)}switch(r){case 2:return"".concat(t.toBinary()).concat(o);case 8:return"".concat(t.toOctal()).concat(o);case 16:return"".concat(t.toHexadecimal()).concat(o);default:throw new Error("Base ".concat(r," not supported "))}}function de(t,r){if("function"==typeof r)return r(t);if(!t.isFinite())return t.isNaN()?"NaN":t.gt(0)?"Infinity":"-Infinity";var e,n,o="auto";if(void 0!==r&&(r.notation&&(o=r.notation),"number"==typeof r?e=r:r.precision&&(e=r.precision),r.wordSize&&"number"!=typeof(n=r.wordSize)))throw new Error('Option "wordSize" must be a number');switch(o){case"fixed":return function(t,r){return t.toFixed(r)}(t,e);case"exponential":return ve(t,e);case"engineering":return function(t,r){var e=t.e,n=e%3==0?e:e<0?e-3-e%3:e-e%3,o=t.mul(Math.pow(10,-n)),i=o.toPrecision(r);-1!==i.indexOf("e")&&(i=o.toString());return i+"e"+(e>=0?"+":"")+n.toString()}(t,e);case"bin":return ye(t,2,n);case"oct":return ye(t,8,n);case"hex":return ye(t,16,n);case"auto":var i=r&&void 0!==r.lowerExp?r.lowerExp:-3,u=r&&void 0!==r.upperExp?r.upperExp:5;if(t.isZero())return"0";var a=t.toSignificantDigits(e),s=a.e;return(s>=i&&s<u?a.toFixed():ve(t,e)).replace(/((\.\d*?)(0+))($|e)/,(function(){var t=arguments[2],r=arguments[4];return"."!==t?t+r:r}));default:throw new Error('Unknown notation "'+o+'". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.')}}function ve(t,r){return void 0!==r?t.toExponential(r-1):t.toExponential()}function ge(t,r){var e=function(t,r){if("number"==typeof t)return ae(t,r);if(or(t))return de(t,r);if(function(t){return t&&"object"===o(t)&&"number"==typeof t.s&&"number"==typeof t.n&&"number"==typeof t.d||!1}(t))return r&&"decimal"===r.fraction?t.toString():t.s*t.n+"/"+t.d;if(Array.isArray(t))return me(t,r);if(sr(t))return'"'+t+'"';if("function"==typeof t)return t.syntax?String(t.syntax):"function";if(t&&"object"===o(t)){return"function"==typeof t.format?t.format(r):t&&t.toString(r)!=={}.toString()?t.toString(r):"{"+Object.keys(t).map((function(e){return'"'+e+'": '+ge(t[e],r)})).join(", ")+"}"}return String(t)}(t,r);return r&&"object"===o(r)&&"truncate"in r&&e.length>r.truncate?e.substring(0,r.truncate-3)+"...":e}function me(t,r){if(Array.isArray(t)){for(var e="[",n=t.length,o=0;o<n;o++)0!==o&&(e+=", "),e+=me(t[o],r);return e+="]"}return ge(t,r)}function De(t,r,e){if(!(this instanceof De))throw new SyntaxError("Constructor must be called with the new operator");this.actual=t,this.expected=r,this.relation=e,this.message="Dimension mismatch ("+(Array.isArray(t)?"["+t.join(", ")+"]":t)+" "+(this.relation||"!=")+" "+(Array.isArray(r)?"["+r.join(", ")+"]":r)+")",this.stack=(new Error).stack}function we(t,r,e){if(!(this instanceof we))throw new SyntaxError("Constructor must be called with the new operator");this.index=t,arguments.length<3?(this.min=0,this.max=r):(this.min=r,this.max=e),void 0!==this.min&&this.index<this.min?this.message="Index out of range ("+this.index+" < "+this.min+")":void 0!==this.max&&this.index>=this.max?this.message="Index out of range ("+this.index+" > "+(this.max-1)+")":this.message="Index out of range ("+this.index+")",this.stack=(new Error).stack}function be(t){for(var r=[];Array.isArray(t);)r.push(t.length),t=t[0];return r}function Ae(t,r,e){var n,o=t.length;if(o!==r[e])throw new De(o,r[e]);if(e<r.length-1){var i=e+1;for(n=0;n<o;n++){var u=t[n];if(!Array.isArray(u))throw new De(r.length-1,r.length,"<");Ae(t[n],r,i)}}else for(n=0;n<o;n++)if(Array.isArray(t[n]))throw new De(r.length+1,r.length,">")}function xe(t,r){if(0===r.length){if(Array.isArray(t))throw new De(t.length,0)}else Ae(t,r,0)}function Ee(t,r){if(!nr(t)||!ie(t))throw new TypeError("Index must be an integer (value: "+t+")");if(t<0||"number"==typeof r&&t>=r)throw new we(t,r)}function Fe(t,r,e){if(!Array.isArray(t)||!Array.isArray(r))throw new TypeError("Array expected");if(0===r.length)throw new Error("Resizing to scalar is not supported");return r.forEach((function(t){if(!nr(t)||!ie(t)||t<0)throw new TypeError("Invalid size, must contain positive integers (size: "+ge(r)+")")})),_e(t,r,0,void 0!==e?e:0),t}function _e(t,r,e,n){var o,i,u=t.length,a=r[e],s=Math.min(u,a);if(t.length=a,e<r.length-1){var c=e+1;for(o=0;o<s;o++)i=t[o],Array.isArray(i)||(i=[i],t[o]=i),_e(i,r,c,n);for(o=s;o<a;o++)i=[],t[o]=i,_e(i,r,c,n)}else{for(o=0;o<s;o++)for(;Array.isArray(t[o]);)t[o]=t[o][0];for(o=s;o<a;o++)t[o]=n}}function Ce(t,r){var e=function(t){if(!Array.isArray(t))return t;var r=[];return t.forEach((function t(e){Array.isArray(e)?e.forEach(t):r.push(e)})),r}(t),n=e.length;if(!Array.isArray(t)||!Array.isArray(r))throw new TypeError("Array expected");if(0===r.length)throw new De(0,n,"!=");var o=Be(r=Se(r,n));if(n!==o)throw new De(o,n,"!=");try{return function(t,r){for(var e,n=t,o=r.length-1;o>0;o--){var i=r[o];e=[];for(var u=n.length/i,a=0;a<u;a++)e.push(n.slice(a*i,(a+1)*i));n=e}return n}(e,r)}catch(t){if(t instanceof De)throw new De(o,n,"!=");throw t}}function Se(t,r){var e=Be(t),n=t.slice(),o=t.indexOf(-1);if(t.indexOf(-1,o+1)>=0)throw new Error("More than one wildcard in sizes");if(o>=0){if(!(r%e==0))throw new Error("Could not replace wildcard, since "+r+" is no multiple of "+-e);n[o]=-r/e}return n}function Be(t){return t.reduce((function(t,r){return t*r}),1)}function Me(t,r,e,n){var o=n||be(t);if(e)for(var i=0;i<e;i++)t=[t],o.unshift(1);for(t=Ne(t,r,0);o.length<r;)o.push(1);return t}function Ne(t,r,e){var n,o;if(Array.isArray(t)){var i=e+1;for(n=0,o=t.length;n<o;n++)t[n]=Ne(t[n],r,i)}else for(var u=e;u<r;u++)t=[t];return t}function Oe(t,r){for(var e,n=0,o=0;o<t.length;o++){var i=t[o],u=Array.isArray(i);if(0===o&&u&&(n=i.length),u&&i.length!==n)return;var a=u?Oe(i,r):r(i);if(void 0===e)e=a;else if(e!==a)return"mixed"}return e}function Pe(t,r){return-1!==t.indexOf(r)}function je(t,r,e,n){function o(n){var o=function(t,r){for(var e={},n=0;n<r.length;n++){var o=r[n],i=t[o];void 0!==i&&(e[o]=i)}return e}(n,r.map(Ie));return function(t,r,e){if(!r.filter((function(t){return!function(t){return t&&"?"===t[0]}(t)})).every((function(t){return void 0!==e[t]}))){var n=r.filter((function(t){return void 0===e[t]}));throw new Error('Cannot create function "'.concat(t,'", ')+"some dependencies are missing: ".concat(n.map((function(t){return'"'.concat(t,'"')})).join(", "),"."))}}(t,r,n),e(o)}return o.isFactory=!0,o.fn=t,o.dependencies=r.slice().sort(),n&&(o.meta=n),o}function Te(t){return"function"==typeof t&&"string"==typeof t.fn&&Array.isArray(t.dependencies)}function Ie(t){return t&&"?"===t[0]?t.slice(1):t}function ke(t,r){if(ze(t)&&Re(t,r))return t[r];if("function"==typeof t[r]&&function(t,r){if(null==t||"function"!=typeof t[r])return!1;if(Kr(t,r)&&Object.getPrototypeOf&&r in Object.getPrototypeOf(t))return!1;if(Kr(We,r))return!0;if(r in Object.prototype)return!1;if(r in Function.prototype)return!1;return!0}(t,r))throw new Error('Cannot access method "'+r+'" as a property');throw new Error('No access to property "'+r+'"')}function Re(t,r){return!(!t||"object"!==o(t))&&(!!Kr(Ue,r)||!(r in Object.prototype)&&!(r in Function.prototype))}function ze(t){return"object"===o(t)&&t&&t.constructor===Object}De.prototype=new RangeError,De.prototype.constructor=RangeError,De.prototype.name="DimensionError",De.prototype.isDimensionError=!0,we.prototype=new RangeError,we.prototype.constructor=RangeError,we.prototype.name="IndexError",we.prototype.isIndexError=!0;var Ue={length:!0,name:!0},We={toString:!0,valueOf:!0,toLocaleString:!0},qe=function(){function t(r){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.wrappedObject=r}var r,e,n;return r=t,(e=[{key:"keys",value:function(){return Object.keys(this.wrappedObject)}},{key:"get",value:function(t){return ke(this.wrappedObject,t)}},{key:"set",value:function(t,r){return function(t,r,e){if(ze(t)&&Re(t,r))return t[r]=e,e;throw new Error('No access to property "'+r+'"')}(this.wrappedObject,t,r),this}},{key:"has",value:function(t){return r=this.wrappedObject,t in r;var r}}])&&i(r.prototype,e),n&&i(r,n),t}();function Le(t){return!!t&&(t instanceof Map||t instanceof qe||"function"==typeof t.set&&"function"==typeof t.get&&"function"==typeof t.keys&&"function"==typeof t.has)}var $e=function(){return $e=oe.create,oe},Ge=je("typed",["?BigNumber","?Complex","?DenseMatrix","?Fraction"],(function(t){var r=t.BigNumber,e=t.Complex,n=t.DenseMatrix,o=t.Fraction,i=$e();return i.clear(),i.addTypes([{name:"number",test:nr},{name:"Complex",test:ir},{name:"BigNumber",test:or},{name:"Fraction",test:ur},{name:"Unit",test:ar},{name:"identifier",test:function(t){return sr&&/^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])*$/.test(t)}},{name:"string",test:sr},{name:"Chain",test:Wr},{name:"Array",test:cr},{name:"Matrix",test:fr},{name:"DenseMatrix",test:pr},{name:"SparseMatrix",test:hr},{name:"Range",test:yr},{name:"Index",test:dr},{name:"boolean",test:vr},{name:"ResultSet",test:gr},{name:"Help",test:mr},{name:"function",test:Dr},{name:"Date",test:wr},{name:"RegExp",test:br},{name:"null",test:xr},{name:"undefined",test:Er},{name:"AccessorNode",test:Fr},{name:"ArrayNode",test:_r},{name:"AssignmentNode",test:Cr},{name:"BlockNode",test:Sr},{name:"ConditionalNode",test:Br},{name:"ConstantNode",test:Mr},{name:"FunctionNode",test:Or},{name:"FunctionAssignmentNode",test:Nr},{name:"IndexNode",test:Pr},{name:"Node",test:jr},{name:"ObjectNode",test:Tr},{name:"OperatorNode",test:Ir},{name:"ParenthesisNode",test:kr},{name:"RangeNode",test:Rr},{name:"RelationalNode",test:zr},{name:"SymbolNode",test:Ur},{name:"Map",test:Le},{name:"Object",test:Ar}]),i.addConversions([{from:"number",to:"BigNumber",convert:function(t){if(r||Ze(t),t.toExponential().replace(/e.*$/,"").replace(/^0\.?0*|\./,"").length>15)throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: "+t+"). Use function bignumber(x) to convert to BigNumber.");return new r(t)}},{from:"number",to:"Complex",convert:function(t){return e||Ve(t),new e(t,0)}},{from:"BigNumber",to:"Complex",convert:function(t){return e||Ve(t),new e(t.toNumber(),0)}},{from:"Fraction",to:"BigNumber",convert:function(t){throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.")}},{from:"Fraction",to:"Complex",convert:function(t){return e||Ve(t),new e(t.valueOf(),0)}},{from:"number",to:"Fraction",convert:function(t){o||Je(t);var r=new o(t);if(r.valueOf()!==t)throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: "+t+"). Use function fraction(x) to convert to Fraction.");return r}},{from:"string",to:"number",convert:function(t){var r=Number(t);if(isNaN(r))throw new Error('Cannot convert "'+t+'" to a number');return r}},{from:"string",to:"BigNumber",convert:function(t){r||Ze(t);try{return new r(t)}catch(r){throw new Error('Cannot convert "'+t+'" to BigNumber')}}},{from:"string",to:"Fraction",convert:function(t){o||Je(t);try{return new o(t)}catch(r){throw new Error('Cannot convert "'+t+'" to Fraction')}}},{from:"string",to:"Complex",convert:function(t){e||Ve(t);try{return new e(t)}catch(r){throw new Error('Cannot convert "'+t+'" to Complex')}}},{from:"boolean",to:"number",convert:function(t){return+t}},{from:"boolean",to:"BigNumber",convert:function(t){return r||Ze(t),new r(+t)}},{from:"boolean",to:"Fraction",convert:function(t){return o||Je(t),new o(+t)}},{from:"boolean",to:"string",convert:function(t){return String(t)}},{from:"Array",to:"Matrix",convert:function(t){return n||function(){throw new Error("Cannot convert array into a Matrix: no class 'DenseMatrix' provided")}(),new n(t)}},{from:"Matrix",to:"Array",convert:function(t){return t.valueOf()}}]),i.onMismatch=function(t,r,e){var n=i.createError(t,r,e);if(["wrongType","mismatch"].includes(n.data.category)&&1===r.length&&lr(r[0])&&e.some((function(t){return!t.params.includes(",")}))){var o=new TypeError("Function '".concat(t,"' doesn't apply to matrices. To call it ")+"elementwise on a matrix 'M', try 'map(M, ".concat(t,")'."));throw o.data=n.data,o}throw n},i.onMismatch=function(t,r,e){var n=i.createError(t,r,e);if(["wrongType","mismatch"].includes(n.data.category)&&1===r.length&&lr(r[0])&&e.some((function(t){return!t.params.includes(",")}))){var o=new TypeError("Function '".concat(t,"' doesn't apply to matrices. To call it ")+"elementwise on a matrix 'M', try 'map(M, ".concat(t,")'."));throw o.data=n.data,o}throw n},i}));function Ze(t){throw new Error("Cannot convert value ".concat(t," into a BigNumber: no class 'BigNumber' provided"))}function Ve(t){throw new Error("Cannot convert value ".concat(t," into a Complex number: no class 'Complex' provided"))}function Je(t){throw new Error("Cannot convert value ".concat(t," into a Fraction, no class 'Fraction' provided."))}
/*!
   *  decimal.js v10.4.3
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */var He,Ye,Ke=9e15,Xe=1e9,Qe="0123456789abcdef",tn="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",rn="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",en={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-Ke,maxE:Ke,crypto:!1},nn=!0,on="[DecimalError] ",un=on+"Invalid argument: ",an=on+"Precision limit exceeded",sn=on+"crypto unavailable",cn="[object Decimal]",fn=Math.floor,ln=Math.pow,pn=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,hn=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,yn=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,dn=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,vn=1e7,gn=tn.length-1,mn=rn.length-1,Dn={toStringTag:cn};function wn(t){var r,e,n,o=t.length-1,i="",u=t[0];if(o>0){for(i+=u,r=1;r<o;r++)(e=7-(n=t[r]+"").length)&&(i+=Nn(e)),i+=n;(e=7-(n=(u=t[r])+"").length)&&(i+=Nn(e))}else if(0===u)return"0";for(;u%10==0;)u/=10;return i+u}function bn(t,r,e){if(t!==~~t||t<r||t>e)throw Error(un+t)}function An(t,r,e,n){var o,i,u,a;for(i=t[0];i>=10;i/=10)--r;return--r<0?(r+=7,o=0):(o=Math.ceil((r+1)/7),r%=7),i=ln(10,7-r),a=t[o]%i|0,null==n?r<3?(0==r?a=a/100|0:1==r&&(a=a/10|0),u=e<4&&99999==a||e>3&&49999==a||5e4==a||0==a):u=(e<4&&a+1==i||e>3&&a+1==i/2)&&(t[o+1]/i/100|0)==ln(10,r-2)-1||(a==i/2||0==a)&&0==(t[o+1]/i/100|0):r<4?(0==r?a=a/1e3|0:1==r?a=a/100|0:2==r&&(a=a/10|0),u=(n||e<4)&&9999==a||!n&&e>3&&4999==a):u=((n||e<4)&&a+1==i||!n&&e>3&&a+1==i/2)&&(t[o+1]/i/1e3|0)==ln(10,r-3)-1,u}function xn(t,r,e){for(var n,o,i=[0],u=0,a=t.length;u<a;){for(o=i.length;o--;)i[o]*=r;for(i[0]+=Qe.indexOf(t.charAt(u++)),n=0;n<i.length;n++)i[n]>e-1&&(void 0===i[n+1]&&(i[n+1]=0),i[n+1]+=i[n]/e|0,i[n]%=e)}return i.reverse()}Dn.absoluteValue=Dn.abs=function(){var t=new this.constructor(this);return t.s<0&&(t.s=1),Fn(t)},Dn.ceil=function(){return Fn(new this.constructor(this),this.e+1,2)},Dn.clampedTo=Dn.clamp=function(t,r){var e=this,n=e.constructor;if(t=new n(t),r=new n(r),!t.s||!r.s)return new n(NaN);if(t.gt(r))throw Error(un+r);return e.cmp(t)<0?t:e.cmp(r)>0?r:new n(e)},Dn.comparedTo=Dn.cmp=function(t){var r,e,n,o,i=this,u=i.d,a=(t=new i.constructor(t)).d,s=i.s,c=t.s;if(!u||!a)return s&&c?s!==c?s:u===a?0:!u^s<0?1:-1:NaN;if(!u[0]||!a[0])return u[0]?s:a[0]?-c:0;if(s!==c)return s;if(i.e!==t.e)return i.e>t.e^s<0?1:-1;for(r=0,e=(n=u.length)<(o=a.length)?n:o;r<e;++r)if(u[r]!==a[r])return u[r]>a[r]^s<0?1:-1;return n===o?0:n>o^s<0?1:-1},Dn.cosine=Dn.cos=function(){var t,r,e=this,n=e.constructor;return e.d?e.d[0]?(t=n.precision,r=n.rounding,n.precision=t+Math.max(e.e,e.sd())+7,n.rounding=1,e=function(t,r){var e,n,o;if(r.isZero())return r;(n=r.d.length)<32?o=(1/Wn(4,e=Math.ceil(n/3))).toString():(e=16,o="2.3283064365386962890625e-10");t.precision+=e,r=Un(t,1,r.times(o),new t(1));for(var i=e;i--;){var u=r.times(r);r=u.times(u).minus(u).times(8).plus(1)}return t.precision-=e,r}(n,qn(n,e)),n.precision=t,n.rounding=r,Fn(2==Ye||3==Ye?e.neg():e,t,r,!0)):new n(1):new n(NaN)},Dn.cubeRoot=Dn.cbrt=function(){var t,r,e,n,o,i,u,a,s,c,f=this,l=f.constructor;if(!f.isFinite()||f.isZero())return new l(f);for(nn=!1,(i=f.s*ln(f.s*f,1/3))&&Math.abs(i)!=1/0?n=new l(i.toString()):(e=wn(f.d),(i=((t=f.e)-e.length+1)%3)&&(e+=1==i||-2==i?"0":"00"),i=ln(e,1/3),t=fn((t+1)/3)-(t%3==(t<0?-1:2)),(n=new l(e=i==1/0?"5e"+t:(e=i.toExponential()).slice(0,e.indexOf("e")+1)+t)).s=f.s),u=(t=l.precision)+3;;)if(c=(s=(a=n).times(a).times(a)).plus(f),n=En(c.plus(f).times(a),c.plus(s),u+2,1),wn(a.d).slice(0,u)===(e=wn(n.d)).slice(0,u)){if("9999"!=(e=e.slice(u-3,u+1))&&(o||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(Fn(n,t+1,1),r=!n.times(n).times(n).eq(f));break}if(!o&&(Fn(a,t+1,0),a.times(a).times(a).eq(f))){n=a;break}u+=4,o=1}return nn=!0,Fn(n,t,l.rounding,r)},Dn.decimalPlaces=Dn.dp=function(){var t,r=this.d,e=NaN;if(r){if(e=7*((t=r.length-1)-fn(this.e/7)),t=r[t])for(;t%10==0;t/=10)e--;e<0&&(e=0)}return e},Dn.dividedBy=Dn.div=function(t){return En(this,new this.constructor(t))},Dn.dividedToIntegerBy=Dn.divToInt=function(t){var r=this.constructor;return Fn(En(this,new r(t),0,1,1),r.precision,r.rounding)},Dn.equals=Dn.eq=function(t){return 0===this.cmp(t)},Dn.floor=function(){return Fn(new this.constructor(this),this.e+1,3)},Dn.greaterThan=Dn.gt=function(t){return this.cmp(t)>0},Dn.greaterThanOrEqualTo=Dn.gte=function(t){var r=this.cmp(t);return 1==r||0===r},Dn.hyperbolicCosine=Dn.cosh=function(){var t,r,e,n,o,i=this,u=i.constructor,a=new u(1);if(!i.isFinite())return new u(i.s?1/0:NaN);if(i.isZero())return a;e=u.precision,n=u.rounding,u.precision=e+Math.max(i.e,i.sd())+4,u.rounding=1,(o=i.d.length)<32?r=(1/Wn(4,t=Math.ceil(o/3))).toString():(t=16,r="2.3283064365386962890625e-10"),i=Un(u,1,i.times(r),new u(1),!0);for(var s,c=t,f=new u(8);c--;)s=i.times(i),i=a.minus(s.times(f.minus(s.times(f))));return Fn(i,u.precision=e,u.rounding=n,!0)},Dn.hyperbolicSine=Dn.sinh=function(){var t,r,e,n,o=this,i=o.constructor;if(!o.isFinite()||o.isZero())return new i(o);if(r=i.precision,e=i.rounding,i.precision=r+Math.max(o.e,o.sd())+4,i.rounding=1,(n=o.d.length)<3)o=Un(i,2,o,o,!0);else{t=(t=1.4*Math.sqrt(n))>16?16:0|t,o=Un(i,2,o=o.times(1/Wn(5,t)),o,!0);for(var u,a=new i(5),s=new i(16),c=new i(20);t--;)u=o.times(o),o=o.times(a.plus(u.times(s.times(u).plus(c))))}return i.precision=r,i.rounding=e,Fn(o,r,e,!0)},Dn.hyperbolicTangent=Dn.tanh=function(){var t,r,e=this,n=e.constructor;return e.isFinite()?e.isZero()?new n(e):(t=n.precision,r=n.rounding,n.precision=t+7,n.rounding=1,En(e.sinh(),e.cosh(),n.precision=t,n.rounding=r)):new n(e.s)},Dn.inverseCosine=Dn.acos=function(){var t,r=this,e=r.constructor,n=r.abs().cmp(1),o=e.precision,i=e.rounding;return-1!==n?0===n?r.isNeg()?Bn(e,o,i):new e(0):new e(NaN):r.isZero()?Bn(e,o+4,i).times(.5):(e.precision=o+6,e.rounding=1,r=r.asin(),t=Bn(e,o+4,i).times(.5),e.precision=o,e.rounding=i,t.minus(r))},Dn.inverseHyperbolicCosine=Dn.acosh=function(){var t,r,e=this,n=e.constructor;return e.lte(1)?new n(e.eq(1)?0:NaN):e.isFinite()?(t=n.precision,r=n.rounding,n.precision=t+Math.max(Math.abs(e.e),e.sd())+4,n.rounding=1,nn=!1,e=e.times(e).minus(1).sqrt().plus(e),nn=!0,n.precision=t,n.rounding=r,e.ln()):new n(e)},Dn.inverseHyperbolicSine=Dn.asinh=function(){var t,r,e=this,n=e.constructor;return!e.isFinite()||e.isZero()?new n(e):(t=n.precision,r=n.rounding,n.precision=t+2*Math.max(Math.abs(e.e),e.sd())+6,n.rounding=1,nn=!1,e=e.times(e).plus(1).sqrt().plus(e),nn=!0,n.precision=t,n.rounding=r,e.ln())},Dn.inverseHyperbolicTangent=Dn.atanh=function(){var t,r,e,n,o=this,i=o.constructor;return o.isFinite()?o.e>=0?new i(o.abs().eq(1)?o.s/0:o.isZero()?o:NaN):(t=i.precision,r=i.rounding,n=o.sd(),Math.max(n,t)<2*-o.e-1?Fn(new i(o),t,r,!0):(i.precision=e=n-o.e,o=En(o.plus(1),new i(1).minus(o),e+t,1),i.precision=t+4,i.rounding=1,o=o.ln(),i.precision=t,i.rounding=r,o.times(.5))):new i(NaN)},Dn.inverseSine=Dn.asin=function(){var t,r,e,n,o=this,i=o.constructor;return o.isZero()?new i(o):(r=o.abs().cmp(1),e=i.precision,n=i.rounding,-1!==r?0===r?((t=Bn(i,e+4,n).times(.5)).s=o.s,t):new i(NaN):(i.precision=e+6,i.rounding=1,o=o.div(new i(1).minus(o.times(o)).sqrt().plus(1)).atan(),i.precision=e,i.rounding=n,o.times(2)))},Dn.inverseTangent=Dn.atan=function(){var t,r,e,n,o,i,u,a,s,c=this,f=c.constructor,l=f.precision,p=f.rounding;if(c.isFinite()){if(c.isZero())return new f(c);if(c.abs().eq(1)&&l+4<=mn)return(u=Bn(f,l+4,p).times(.25)).s=c.s,u}else{if(!c.s)return new f(NaN);if(l+4<=mn)return(u=Bn(f,l+4,p).times(.5)).s=c.s,u}for(f.precision=a=l+10,f.rounding=1,t=e=Math.min(28,a/7+2|0);t;--t)c=c.div(c.times(c).plus(1).sqrt().plus(1));for(nn=!1,r=Math.ceil(a/7),n=1,s=c.times(c),u=new f(c),o=c;-1!==t;)if(o=o.times(s),i=u.minus(o.div(n+=2)),o=o.times(s),void 0!==(u=i.plus(o.div(n+=2))).d[r])for(t=r;u.d[t]===i.d[t]&&t--;);return e&&(u=u.times(2<<e-1)),nn=!0,Fn(u,f.precision=l,f.rounding=p,!0)},Dn.isFinite=function(){return!!this.d},Dn.isInteger=Dn.isInt=function(){return!!this.d&&fn(this.e/7)>this.d.length-2},Dn.isNaN=function(){return!this.s},Dn.isNegative=Dn.isNeg=function(){return this.s<0},Dn.isPositive=Dn.isPos=function(){return this.s>0},Dn.isZero=function(){return!!this.d&&0===this.d[0]},Dn.lessThan=Dn.lt=function(t){return this.cmp(t)<0},Dn.lessThanOrEqualTo=Dn.lte=function(t){return this.cmp(t)<1},Dn.logarithm=Dn.log=function(t){var r,e,n,o,i,u,a,s,c=this,f=c.constructor,l=f.precision,p=f.rounding;if(null==t)t=new f(10),r=!0;else{if(e=(t=new f(t)).d,t.s<0||!e||!e[0]||t.eq(1))return new f(NaN);r=t.eq(10)}if(e=c.d,c.s<0||!e||!e[0]||c.eq(1))return new f(e&&!e[0]?-1/0:1!=c.s?NaN:e?0:1/0);if(r)if(e.length>1)i=!0;else{for(o=e[0];o%10==0;)o/=10;i=1!==o}if(nn=!1,u=In(c,a=l+5),n=r?Sn(f,a+10):In(t,a),An((s=En(u,n,a,1)).d,o=l,p))do{if(u=In(c,a+=10),n=r?Sn(f,a+10):In(t,a),s=En(u,n,a,1),!i){+wn(s.d).slice(o+1,o+15)+1==1e14&&(s=Fn(s,l+1,0));break}}while(An(s.d,o+=10,p));return nn=!0,Fn(s,l,p)},Dn.minus=Dn.sub=function(t){var r,e,n,o,i,u,a,s,c,f,l,p,h=this,y=h.constructor;if(t=new y(t),!h.d||!t.d)return h.s&&t.s?h.d?t.s=-t.s:t=new y(t.d||h.s!==t.s?h:NaN):t=new y(NaN),t;if(h.s!=t.s)return t.s=-t.s,h.plus(t);if(c=h.d,p=t.d,a=y.precision,s=y.rounding,!c[0]||!p[0]){if(p[0])t.s=-t.s;else{if(!c[0])return new y(3===s?-0:0);t=new y(h)}return nn?Fn(t,a,s):t}if(e=fn(t.e/7),f=fn(h.e/7),c=c.slice(),i=f-e){for((l=i<0)?(r=c,i=-i,u=p.length):(r=p,e=f,u=c.length),i>(n=Math.max(Math.ceil(a/7),u)+2)&&(i=n,r.length=1),r.reverse(),n=i;n--;)r.push(0);r.reverse()}else{for((l=(n=c.length)<(u=p.length))&&(u=n),n=0;n<u;n++)if(c[n]!=p[n]){l=c[n]<p[n];break}i=0}for(l&&(r=c,c=p,p=r,t.s=-t.s),u=c.length,n=p.length-u;n>0;--n)c[u++]=0;for(n=p.length;n>i;){if(c[--n]<p[n]){for(o=n;o&&0===c[--o];)c[o]=vn-1;--c[o],c[n]+=vn}c[n]-=p[n]}for(;0===c[--u];)c.pop();for(;0===c[0];c.shift())--e;return c[0]?(t.d=c,t.e=Cn(c,e),nn?Fn(t,a,s):t):new y(3===s?-0:0)},Dn.modulo=Dn.mod=function(t){var r,e=this,n=e.constructor;return t=new n(t),!e.d||!t.s||t.d&&!t.d[0]?new n(NaN):!t.d||e.d&&!e.d[0]?Fn(new n(e),n.precision,n.rounding):(nn=!1,9==n.modulo?(r=En(e,t.abs(),0,3,1)).s*=t.s:r=En(e,t,0,n.modulo,1),r=r.times(t),nn=!0,e.minus(r))},Dn.naturalExponential=Dn.exp=function(){return Tn(this)},Dn.naturalLogarithm=Dn.ln=function(){return In(this)},Dn.negated=Dn.neg=function(){var t=new this.constructor(this);return t.s=-t.s,Fn(t)},Dn.plus=Dn.add=function(t){var r,e,n,o,i,u,a,s,c,f,l=this,p=l.constructor;if(t=new p(t),!l.d||!t.d)return l.s&&t.s?l.d||(t=new p(t.d||l.s===t.s?l:NaN)):t=new p(NaN),t;if(l.s!=t.s)return t.s=-t.s,l.minus(t);if(c=l.d,f=t.d,a=p.precision,s=p.rounding,!c[0]||!f[0])return f[0]||(t=new p(l)),nn?Fn(t,a,s):t;if(i=fn(l.e/7),n=fn(t.e/7),c=c.slice(),o=i-n){for(o<0?(e=c,o=-o,u=f.length):(e=f,n=i,u=c.length),o>(u=(i=Math.ceil(a/7))>u?i+1:u+1)&&(o=u,e.length=1),e.reverse();o--;)e.push(0);e.reverse()}for((u=c.length)-(o=f.length)<0&&(o=u,e=f,f=c,c=e),r=0;o;)r=(c[--o]=c[o]+f[o]+r)/vn|0,c[o]%=vn;for(r&&(c.unshift(r),++n),u=c.length;0==c[--u];)c.pop();return t.d=c,t.e=Cn(c,n),nn?Fn(t,a,s):t},Dn.precision=Dn.sd=function(t){var r,e=this;if(void 0!==t&&t!==!!t&&1!==t&&0!==t)throw Error(un+t);return e.d?(r=Mn(e.d),t&&e.e+1>r&&(r=e.e+1)):r=NaN,r},Dn.round=function(){var t=this,r=t.constructor;return Fn(new r(t),t.e+1,r.rounding)},Dn.sine=Dn.sin=function(){var t,r,e=this,n=e.constructor;return e.isFinite()?e.isZero()?new n(e):(t=n.precision,r=n.rounding,n.precision=t+Math.max(e.e,e.sd())+7,n.rounding=1,e=function(t,r){var e,n=r.d.length;if(n<3)return r.isZero()?r:Un(t,2,r,r);e=(e=1.4*Math.sqrt(n))>16?16:0|e,r=r.times(1/Wn(5,e)),r=Un(t,2,r,r);for(var o,i=new t(5),u=new t(16),a=new t(20);e--;)o=r.times(r),r=r.times(i.plus(o.times(u.times(o).minus(a))));return r}(n,qn(n,e)),n.precision=t,n.rounding=r,Fn(Ye>2?e.neg():e,t,r,!0)):new n(NaN)},Dn.squareRoot=Dn.sqrt=function(){var t,r,e,n,o,i,u=this,a=u.d,s=u.e,c=u.s,f=u.constructor;if(1!==c||!a||!a[0])return new f(!c||c<0&&(!a||a[0])?NaN:a?u:1/0);for(nn=!1,0==(c=Math.sqrt(+u))||c==1/0?(((r=wn(a)).length+s)%2==0&&(r+="0"),c=Math.sqrt(r),s=fn((s+1)/2)-(s<0||s%2),n=new f(r=c==1/0?"5e"+s:(r=c.toExponential()).slice(0,r.indexOf("e")+1)+s)):n=new f(c.toString()),e=(s=f.precision)+3;;)if(n=(i=n).plus(En(u,i,e+2,1)).times(.5),wn(i.d).slice(0,e)===(r=wn(n.d)).slice(0,e)){if("9999"!=(r=r.slice(e-3,e+1))&&(o||"4999"!=r)){+r&&(+r.slice(1)||"5"!=r.charAt(0))||(Fn(n,s+1,1),t=!n.times(n).eq(u));break}if(!o&&(Fn(i,s+1,0),i.times(i).eq(u))){n=i;break}e+=4,o=1}return nn=!0,Fn(n,s,f.rounding,t)},Dn.tangent=Dn.tan=function(){var t,r,e=this,n=e.constructor;return e.isFinite()?e.isZero()?new n(e):(t=n.precision,r=n.rounding,n.precision=t+10,n.rounding=1,(e=e.sin()).s=1,e=En(e,new n(1).minus(e.times(e)).sqrt(),t+10,0),n.precision=t,n.rounding=r,Fn(2==Ye||4==Ye?e.neg():e,t,r,!0)):new n(NaN)},Dn.times=Dn.mul=function(t){var r,e,n,o,i,u,a,s,c,f=this,l=f.constructor,p=f.d,h=(t=new l(t)).d;if(t.s*=f.s,!(p&&p[0]&&h&&h[0]))return new l(!t.s||p&&!p[0]&&!h||h&&!h[0]&&!p?NaN:p&&h?0*t.s:t.s/0);for(e=fn(f.e/7)+fn(t.e/7),(s=p.length)<(c=h.length)&&(i=p,p=h,h=i,u=s,s=c,c=u),i=[],n=u=s+c;n--;)i.push(0);for(n=c;--n>=0;){for(r=0,o=s+n;o>n;)a=i[o]+h[n]*p[o-n-1]+r,i[o--]=a%vn|0,r=a/vn|0;i[o]=(i[o]+r)%vn|0}for(;!i[--u];)i.pop();return r?++e:i.shift(),t.d=i,t.e=Cn(i,e),nn?Fn(t,l.precision,l.rounding):t},Dn.toBinary=function(t,r){return Ln(this,2,t,r)},Dn.toDecimalPlaces=Dn.toDP=function(t,r){var e=this,n=e.constructor;return e=new n(e),void 0===t?e:(bn(t,0,Xe),void 0===r?r=n.rounding:bn(r,0,8),Fn(e,t+e.e+1,r))},Dn.toExponential=function(t,r){var e,n=this,o=n.constructor;return void 0===t?e=_n(n,!0):(bn(t,0,Xe),void 0===r?r=o.rounding:bn(r,0,8),e=_n(n=Fn(new o(n),t+1,r),!0,t+1)),n.isNeg()&&!n.isZero()?"-"+e:e},Dn.toFixed=function(t,r){var e,n,o=this,i=o.constructor;return void 0===t?e=_n(o):(bn(t,0,Xe),void 0===r?r=i.rounding:bn(r,0,8),e=_n(n=Fn(new i(o),t+o.e+1,r),!1,t+n.e+1)),o.isNeg()&&!o.isZero()?"-"+e:e},Dn.toFraction=function(t){var r,e,n,o,i,u,a,s,c,f,l,p,h=this,y=h.d,d=h.constructor;if(!y)return new d(h);if(c=e=new d(1),n=s=new d(0),u=(i=(r=new d(n)).e=Mn(y)-h.e-1)%7,r.d[0]=ln(10,u<0?7+u:u),null==t)t=i>0?r:c;else{if(!(a=new d(t)).isInt()||a.lt(c))throw Error(un+a);t=a.gt(r)?i>0?r:c:a}for(nn=!1,a=new d(wn(y)),f=d.precision,d.precision=i=7*y.length*2;l=En(a,r,0,1,1),1!=(o=e.plus(l.times(n))).cmp(t);)e=n,n=o,o=c,c=s.plus(l.times(o)),s=o,o=r,r=a.minus(l.times(o)),a=o;return o=En(t.minus(e),n,0,1,1),s=s.plus(o.times(c)),e=e.plus(o.times(n)),s.s=c.s=h.s,p=En(c,n,i,1).minus(h).abs().cmp(En(s,e,i,1).minus(h).abs())<1?[c,n]:[s,e],d.precision=f,nn=!0,p},Dn.toHexadecimal=Dn.toHex=function(t,r){return Ln(this,16,t,r)},Dn.toNearest=function(t,r){var e=this,n=e.constructor;if(e=new n(e),null==t){if(!e.d)return e;t=new n(1),r=n.rounding}else{if(t=new n(t),void 0===r?r=n.rounding:bn(r,0,8),!e.d)return t.s?e:t;if(!t.d)return t.s&&(t.s=e.s),t}return t.d[0]?(nn=!1,e=En(e,t,0,r,1).times(t),nn=!0,Fn(e)):(t.s=e.s,e=t),e},Dn.toNumber=function(){return+this},Dn.toOctal=function(t,r){return Ln(this,8,t,r)},Dn.toPower=Dn.pow=function(t){var r,e,n,o,i,u,a=this,s=a.constructor,c=+(t=new s(t));if(!(a.d&&t.d&&a.d[0]&&t.d[0]))return new s(ln(+a,c));if((a=new s(a)).eq(1))return a;if(n=s.precision,i=s.rounding,t.eq(1))return Fn(a,n,i);if((r=fn(t.e/7))>=t.d.length-1&&(e=c<0?-c:c)<=9007199254740991)return o=On(s,a,e,n),t.s<0?new s(1).div(o):Fn(o,n,i);if((u=a.s)<0){if(r<t.d.length-1)return new s(NaN);if(0==(1&t.d[r])&&(u=1),0==a.e&&1==a.d[0]&&1==a.d.length)return a.s=u,a}return(r=0!=(e=ln(+a,c))&&isFinite(e)?new s(e+"").e:fn(c*(Math.log("0."+wn(a.d))/Math.LN10+a.e+1)))>s.maxE+1||r<s.minE-1?new s(r>0?u/0:0):(nn=!1,s.rounding=a.s=1,e=Math.min(12,(r+"").length),(o=Tn(t.times(In(a,n+e)),n)).d&&An((o=Fn(o,n+5,1)).d,n,i)&&(r=n+10,+wn((o=Fn(Tn(t.times(In(a,r+e)),r),r+5,1)).d).slice(n+1,n+15)+1==1e14&&(o=Fn(o,n+1,0))),o.s=u,nn=!0,s.rounding=i,Fn(o,n,i))},Dn.toPrecision=function(t,r){var e,n=this,o=n.constructor;return void 0===t?e=_n(n,n.e<=o.toExpNeg||n.e>=o.toExpPos):(bn(t,1,Xe),void 0===r?r=o.rounding:bn(r,0,8),e=_n(n=Fn(new o(n),t,r),t<=n.e||n.e<=o.toExpNeg,t)),n.isNeg()&&!n.isZero()?"-"+e:e},Dn.toSignificantDigits=Dn.toSD=function(t,r){var e=this.constructor;return void 0===t?(t=e.precision,r=e.rounding):(bn(t,1,Xe),void 0===r?r=e.rounding:bn(r,0,8)),Fn(new e(this),t,r)},Dn.toString=function(){var t=this,r=t.constructor,e=_n(t,t.e<=r.toExpNeg||t.e>=r.toExpPos);return t.isNeg()&&!t.isZero()?"-"+e:e},Dn.truncated=Dn.trunc=function(){return Fn(new this.constructor(this),this.e+1,1)},Dn.valueOf=Dn.toJSON=function(){var t=this,r=t.constructor,e=_n(t,t.e<=r.toExpNeg||t.e>=r.toExpPos);return t.isNeg()?"-"+e:e};var En=function(){function t(t,r,e){var n,o=0,i=t.length;for(t=t.slice();i--;)n=t[i]*r+o,t[i]=n%e|0,o=n/e|0;return o&&t.unshift(o),t}function r(t,r,e,n){var o,i;if(e!=n)i=e>n?1:-1;else for(o=i=0;o<e;o++)if(t[o]!=r[o]){i=t[o]>r[o]?1:-1;break}return i}function e(t,r,e,n){for(var o=0;e--;)t[e]-=o,o=t[e]<r[e]?1:0,t[e]=o*n+t[e]-r[e];for(;!t[0]&&t.length>1;)t.shift()}return function(n,o,i,u,a,s){var c,f,l,p,h,y,d,v,g,m,D,w,b,A,x,E,F,_,C,S,B=n.constructor,M=n.s==o.s?1:-1,N=n.d,O=o.d;if(!(N&&N[0]&&O&&O[0]))return new B(n.s&&o.s&&(N?!O||N[0]!=O[0]:O)?N&&0==N[0]||!O?0*M:M/0:NaN);for(s?(h=1,f=n.e-o.e):(s=vn,h=7,f=fn(n.e/h)-fn(o.e/h)),C=O.length,F=N.length,m=(g=new B(M)).d=[],l=0;O[l]==(N[l]||0);l++);if(O[l]>(N[l]||0)&&f--,null==i?(A=i=B.precision,u=B.rounding):A=a?i+(n.e-o.e)+1:i,A<0)m.push(1),y=!0;else{if(A=A/h+2|0,l=0,1==C){for(p=0,O=O[0],A++;(l<F||p)&&A--;l++)x=p*s+(N[l]||0),m[l]=x/O|0,p=x%O|0;y=p||l<F}else{for((p=s/(O[0]+1)|0)>1&&(O=t(O,p,s),N=t(N,p,s),C=O.length,F=N.length),E=C,w=(D=N.slice(0,C)).length;w<C;)D[w++]=0;(S=O.slice()).unshift(0),_=O[0],O[1]>=s/2&&++_;do{p=0,(c=r(O,D,C,w))<0?(b=D[0],C!=w&&(b=b*s+(D[1]||0)),(p=b/_|0)>1?(p>=s&&(p=s-1),1==(c=r(d=t(O,p,s),D,v=d.length,w=D.length))&&(p--,e(d,C<v?S:O,v,s))):(0==p&&(c=p=1),d=O.slice()),(v=d.length)<w&&d.unshift(0),e(D,d,w,s),-1==c&&(c=r(O,D,C,w=D.length))<1&&(p++,e(D,C<w?S:O,w,s)),w=D.length):0===c&&(p++,D=[0]),m[l++]=p,c&&D[0]?D[w++]=N[E]||0:(D=[N[E]],w=1)}while((E++<F||void 0!==D[0])&&A--);y=void 0!==D[0]}m[0]||m.shift()}if(1==h)g.e=f,He=y;else{for(l=1,p=m[0];p>=10;p/=10)l++;g.e=l+f*h-1,Fn(g,a?i+g.e+1:i,u,y)}return g}}();function Fn(t,r,e,n){var o,i,u,a,s,c,f,l,p,h=t.constructor;t:if(null!=r){if(!(l=t.d))return t;for(o=1,a=l[0];a>=10;a/=10)o++;if((i=r-o)<0)i+=7,u=r,s=(f=l[p=0])/ln(10,o-u-1)%10|0;else if((p=Math.ceil((i+1)/7))>=(a=l.length)){if(!n)break t;for(;a++<=p;)l.push(0);f=s=0,o=1,u=(i%=7)-7+1}else{for(f=a=l[p],o=1;a>=10;a/=10)o++;s=(u=(i%=7)-7+o)<0?0:f/ln(10,o-u-1)%10|0}if(n=n||r<0||void 0!==l[p+1]||(u<0?f:f%ln(10,o-u-1)),c=e<4?(s||n)&&(0==e||e==(t.s<0?3:2)):s>5||5==s&&(4==e||n||6==e&&(i>0?u>0?f/ln(10,o-u):0:l[p-1])%10&1||e==(t.s<0?8:7)),r<1||!l[0])return l.length=0,c?(r-=t.e+1,l[0]=ln(10,(7-r%7)%7),t.e=-r||0):l[0]=t.e=0,t;if(0==i?(l.length=p,a=1,p--):(l.length=p+1,a=ln(10,7-i),l[p]=u>0?(f/ln(10,o-u)%ln(10,u)|0)*a:0),c)for(;;){if(0==p){for(i=1,u=l[0];u>=10;u/=10)i++;for(u=l[0]+=a,a=1;u>=10;u/=10)a++;i!=a&&(t.e++,l[0]==vn&&(l[0]=1));break}if(l[p]+=a,l[p]!=vn)break;l[p--]=0,a=1}for(i=l.length;0===l[--i];)l.pop()}return nn&&(t.e>h.maxE?(t.d=null,t.e=NaN):t.e<h.minE&&(t.e=0,t.d=[0])),t}function _n(t,r,e){if(!t.isFinite())return kn(t);var n,o=t.e,i=wn(t.d),u=i.length;return r?(e&&(n=e-u)>0?i=i.charAt(0)+"."+i.slice(1)+Nn(n):u>1&&(i=i.charAt(0)+"."+i.slice(1)),i=i+(t.e<0?"e":"e+")+t.e):o<0?(i="0."+Nn(-o-1)+i,e&&(n=e-u)>0&&(i+=Nn(n))):o>=u?(i+=Nn(o+1-u),e&&(n=e-o-1)>0&&(i=i+"."+Nn(n))):((n=o+1)<u&&(i=i.slice(0,n)+"."+i.slice(n)),e&&(n=e-u)>0&&(o+1===u&&(i+="."),i+=Nn(n))),i}function Cn(t,r){var e=t[0];for(r*=7;e>=10;e/=10)r++;return r}function Sn(t,r,e){if(r>gn)throw nn=!0,e&&(t.precision=e),Error(an);return Fn(new t(tn),r,1,!0)}function Bn(t,r,e){if(r>mn)throw Error(an);return Fn(new t(rn),r,e,!0)}function Mn(t){var r=t.length-1,e=7*r+1;if(r=t[r]){for(;r%10==0;r/=10)e--;for(r=t[0];r>=10;r/=10)e++}return e}function Nn(t){for(var r="";t--;)r+="0";return r}function On(t,r,e,n){var o,i=new t(1),u=Math.ceil(n/7+4);for(nn=!1;;){if(e%2&&$n((i=i.times(r)).d,u)&&(o=!0),0===(e=fn(e/2))){e=i.d.length-1,o&&0===i.d[e]&&++i.d[e];break}$n((r=r.times(r)).d,u)}return nn=!0,i}function Pn(t){return 1&t.d[t.d.length-1]}function jn(t,r,e){for(var n,o=new t(r[0]),i=0;++i<r.length;){if(!(n=new t(r[i])).s){o=n;break}o[e](n)&&(o=n)}return o}function Tn(t,r){var e,n,o,i,u,a,s,c=0,f=0,l=0,p=t.constructor,h=p.rounding,y=p.precision;if(!t.d||!t.d[0]||t.e>17)return new p(t.d?t.d[0]?t.s<0?0:1/0:1:t.s?t.s<0?0:t:NaN);for(null==r?(nn=!1,s=y):s=r,a=new p(.03125);t.e>-2;)t=t.times(a),l+=5;for(s+=n=Math.log(ln(2,l))/Math.LN10*2+5|0,e=i=u=new p(1),p.precision=s;;){if(i=Fn(i.times(t),s,1),e=e.times(++f),wn((a=u.plus(En(i,e,s,1))).d).slice(0,s)===wn(u.d).slice(0,s)){for(o=l;o--;)u=Fn(u.times(u),s,1);if(null!=r)return p.precision=y,u;if(!(c<3&&An(u.d,s-n,h,c)))return Fn(u,p.precision=y,h,nn=!0);p.precision=s+=10,e=i=a=new p(1),f=0,c++}u=a}}function In(t,r){var e,n,o,i,u,a,s,c,f,l,p,h=1,y=t,d=y.d,v=y.constructor,g=v.rounding,m=v.precision;if(y.s<0||!d||!d[0]||!y.e&&1==d[0]&&1==d.length)return new v(d&&!d[0]?-1/0:1!=y.s?NaN:d?0:y);if(null==r?(nn=!1,f=m):f=r,v.precision=f+=10,n=(e=wn(d)).charAt(0),!(Math.abs(i=y.e)<15e14))return c=Sn(v,f+2,m).times(i+""),y=In(new v(n+"."+e.slice(1)),f-10).plus(c),v.precision=m,null==r?Fn(y,m,g,nn=!0):y;for(;n<7&&1!=n||1==n&&e.charAt(1)>3;)n=(e=wn((y=y.times(t)).d)).charAt(0),h++;for(i=y.e,n>1?(y=new v("0."+e),i++):y=new v(n+"."+e.slice(1)),l=y,s=u=y=En(y.minus(1),y.plus(1),f,1),p=Fn(y.times(y),f,1),o=3;;){if(u=Fn(u.times(p),f,1),wn((c=s.plus(En(u,new v(o),f,1))).d).slice(0,f)===wn(s.d).slice(0,f)){if(s=s.times(2),0!==i&&(s=s.plus(Sn(v,f+2,m).times(i+""))),s=En(s,new v(h),f,1),null!=r)return v.precision=m,s;if(!An(s.d,f-10,g,a))return Fn(s,v.precision=m,g,nn=!0);v.precision=f+=10,c=u=y=En(l.minus(1),l.plus(1),f,1),p=Fn(y.times(y),f,1),o=a=1}s=c,o+=2}}function kn(t){return String(t.s*t.s/0)}function Rn(t,r){var e,n,o;for((e=r.indexOf("."))>-1&&(r=r.replace(".","")),(n=r.search(/e/i))>0?(e<0&&(e=n),e+=+r.slice(n+1),r=r.substring(0,n)):e<0&&(e=r.length),n=0;48===r.charCodeAt(n);n++);for(o=r.length;48===r.charCodeAt(o-1);--o);if(r=r.slice(n,o)){if(o-=n,t.e=e=e-n-1,t.d=[],n=(e+1)%7,e<0&&(n+=7),n<o){for(n&&t.d.push(+r.slice(0,n)),o-=7;n<o;)t.d.push(+r.slice(n,n+=7));n=7-(r=r.slice(n)).length}else n-=o;for(;n--;)r+="0";t.d.push(+r),nn&&(t.e>t.constructor.maxE?(t.d=null,t.e=NaN):t.e<t.constructor.minE&&(t.e=0,t.d=[0]))}else t.e=0,t.d=[0];return t}function zn(t,r){var e,n,o,i,u,a,s,c,f;if(r.indexOf("_")>-1){if(r=r.replace(/(\d)_(?=\d)/g,"$1"),dn.test(r))return Rn(t,r)}else if("Infinity"===r||"NaN"===r)return+r||(t.s=NaN),t.e=NaN,t.d=null,t;if(hn.test(r))e=16,r=r.toLowerCase();else if(pn.test(r))e=2;else{if(!yn.test(r))throw Error(un+r);e=8}for((i=r.search(/p/i))>0?(s=+r.slice(i+1),r=r.substring(2,i)):r=r.slice(2),u=(i=r.indexOf("."))>=0,n=t.constructor,u&&(i=(a=(r=r.replace(".","")).length)-i,o=On(n,new n(e),i,2*i)),i=f=(c=xn(r,e,vn)).length-1;0===c[i];--i)c.pop();return i<0?new n(0*t.s):(t.e=Cn(c,f),t.d=c,nn=!1,u&&(t=En(t,o,4*a)),s&&(t=t.times(Math.abs(s)<54?ln(2,s):Oo.pow(2,s))),nn=!0,t)}function Un(t,r,e,n,o){var i,u,a,s,c=t.precision,f=Math.ceil(c/7);for(nn=!1,s=e.times(e),a=new t(n);;){if(u=En(a.times(s),new t(r++*r++),c,1),a=o?n.plus(u):n.minus(u),n=En(u.times(s),new t(r++*r++),c,1),void 0!==(u=a.plus(n)).d[f]){for(i=f;u.d[i]===a.d[i]&&i--;);if(-1==i)break}i=a,a=n,n=u,u=i}return nn=!0,u.d.length=f+1,u}function Wn(t,r){for(var e=t;--r;)e*=t;return e}function qn(t,r){var e,n=r.s<0,o=Bn(t,t.precision,1),i=o.times(.5);if((r=r.abs()).lte(i))return Ye=n?4:1,r;if((e=r.divToInt(o)).isZero())Ye=n?3:2;else{if((r=r.minus(e.times(o))).lte(i))return Ye=Pn(e)?n?2:3:n?4:1,r;Ye=Pn(e)?n?1:4:n?3:2}return r.minus(o).abs()}function Ln(t,r,e,n){var o,i,u,a,s,c,f,l,p,h=t.constructor,y=void 0!==e;if(y?(bn(e,1,Xe),void 0===n?n=h.rounding:bn(n,0,8)):(e=h.precision,n=h.rounding),t.isFinite()){for(y?(o=2,16==r?e=4*e-3:8==r&&(e=3*e-2)):o=r,(u=(f=_n(t)).indexOf("."))>=0&&(f=f.replace(".",""),(p=new h(1)).e=f.length-u,p.d=xn(_n(p),10,o),p.e=p.d.length),i=s=(l=xn(f,10,o)).length;0==l[--s];)l.pop();if(l[0]){if(u<0?i--:((t=new h(t)).d=l,t.e=i,l=(t=En(t,p,e,n,0,o)).d,i=t.e,c=He),u=l[e],a=o/2,c=c||void 0!==l[e+1],c=n<4?(void 0!==u||c)&&(0===n||n===(t.s<0?3:2)):u>a||u===a&&(4===n||c||6===n&&1&l[e-1]||n===(t.s<0?8:7)),l.length=e,c)for(;++l[--e]>o-1;)l[e]=0,e||(++i,l.unshift(1));for(s=l.length;!l[s-1];--s);for(u=0,f="";u<s;u++)f+=Qe.charAt(l[u]);if(y){if(s>1)if(16==r||8==r){for(u=16==r?4:3,--s;s%u;s++)f+="0";for(s=(l=xn(f,o,r)).length;!l[s-1];--s);for(u=1,f="1.";u<s;u++)f+=Qe.charAt(l[u])}else f=f.charAt(0)+"."+f.slice(1);f=f+(i<0?"p":"p+")+i}else if(i<0){for(;++i;)f="0"+f;f="0."+f}else if(++i>s)for(i-=s;i--;)f+="0";else i<s&&(f=f.slice(0,i)+"."+f.slice(i))}else f=y?"0p+0":"0";f=(16==r?"0x":2==r?"0b":8==r?"0o":"")+f}else f=kn(t);return t.s<0?"-"+f:f}function $n(t,r){if(t.length>r)return t.length=r,!0}function Gn(t){return new this(t).abs()}function Zn(t){return new this(t).acos()}function Vn(t){return new this(t).acosh()}function Jn(t,r){return new this(t).plus(r)}function Hn(t){return new this(t).asin()}function Yn(t){return new this(t).asinh()}function Kn(t){return new this(t).atan()}function Xn(t){return new this(t).atanh()}function Qn(t,r){t=new this(t),r=new this(r);var e,n=this.precision,o=this.rounding,i=n+4;return t.s&&r.s?t.d||r.d?!r.d||t.isZero()?(e=r.s<0?Bn(this,n,o):new this(0)).s=t.s:!t.d||r.isZero()?(e=Bn(this,i,1).times(.5)).s=t.s:r.s<0?(this.precision=i,this.rounding=1,e=this.atan(En(t,r,i,1)),r=Bn(this,i,1),this.precision=n,this.rounding=o,e=t.s<0?e.minus(r):e.plus(r)):e=this.atan(En(t,r,i,1)):(e=Bn(this,i,1).times(r.s>0?.25:.75)).s=t.s:e=new this(NaN),e}function to(t){return new this(t).cbrt()}function ro(t){return Fn(t=new this(t),t.e+1,2)}function eo(t,r,e){return new this(t).clamp(r,e)}function no(t){if(!t||"object"!==o(t))throw Error(on+"Object expected");var r,e,n,i=!0===t.defaults,u=["precision",1,Xe,"rounding",0,8,"toExpNeg",-Ke,0,"toExpPos",0,Ke,"maxE",0,Ke,"minE",-Ke,0,"modulo",0,9];for(r=0;r<u.length;r+=3)if(e=u[r],i&&(this[e]=en[e]),void 0!==(n=t[e])){if(!(fn(n)===n&&n>=u[r+1]&&n<=u[r+2]))throw Error(un+e+": "+n);this[e]=n}if(e="crypto",i&&(this[e]=en[e]),void 0!==(n=t[e])){if(!0!==n&&!1!==n&&0!==n&&1!==n)throw Error(un+e+": "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(sn);this[e]=!0}else this[e]=!1}return this}function oo(t){return new this(t).cos()}function io(t){return new this(t).cosh()}function uo(t,r){return new this(t).div(r)}function ao(t){return new this(t).exp()}function so(t){return Fn(t=new this(t),t.e+1,3)}function co(){var t,r,e=new this(0);for(nn=!1,t=0;t<arguments.length;)if((r=new this(arguments[t++])).d)e.d&&(e=e.plus(r.times(r)));else{if(r.s)return nn=!0,new this(1/0);e=r}return nn=!0,e.sqrt()}function fo(t){return t instanceof Oo||t&&t.toStringTag===cn||!1}function lo(t){return new this(t).ln()}function po(t,r){return new this(t).log(r)}function ho(t){return new this(t).log(2)}function yo(t){return new this(t).log(10)}function vo(){return jn(this,arguments,"lt")}function go(){return jn(this,arguments,"gt")}function mo(t,r){return new this(t).mod(r)}function Do(t,r){return new this(t).mul(r)}function wo(t,r){return new this(t).pow(r)}function bo(t){var r,e,n,o,i=0,u=new this(1),a=[];if(void 0===t?t=this.precision:bn(t,1,Xe),n=Math.ceil(t/7),this.crypto)if(crypto.getRandomValues)for(r=crypto.getRandomValues(new Uint32Array(n));i<n;)(o=r[i])>=429e7?r[i]=crypto.getRandomValues(new Uint32Array(1))[0]:a[i++]=o%1e7;else{if(!crypto.randomBytes)throw Error(sn);for(r=crypto.randomBytes(n*=4);i<n;)(o=r[i]+(r[i+1]<<8)+(r[i+2]<<16)+((127&r[i+3])<<24))>=214e7?crypto.randomBytes(4).copy(r,i):(a.push(o%1e7),i+=4);i=n/4}else for(;i<n;)a[i++]=1e7*Math.random()|0;for(t%=7,(n=a[--i])&&t&&(o=ln(10,7-t),a[i]=(n/o|0)*o);0===a[i];i--)a.pop();if(i<0)e=0,a=[0];else{for(e=-1;0===a[0];e-=7)a.shift();for(n=1,o=a[0];o>=10;o/=10)n++;n<7&&(e-=7-n)}return u.e=e,u.d=a,u}function Ao(t){return Fn(t=new this(t),t.e+1,this.rounding)}function xo(t){return(t=new this(t)).d?t.d[0]?t.s:0*t.s:t.s||NaN}function Eo(t){return new this(t).sin()}function Fo(t){return new this(t).sinh()}function _o(t){return new this(t).sqrt()}function Co(t,r){return new this(t).sub(r)}function So(){var t=0,r=arguments,e=new this(r[t]);for(nn=!1;e.s&&++t<r.length;)e=e.plus(r[t]);return nn=!0,Fn(e,this.precision,this.rounding)}function Bo(t){return new this(t).tan()}function Mo(t){return new this(t).tanh()}function No(t){return Fn(t=new this(t),t.e+1,1)}Dn[Symbol.for("nodejs.util.inspect.custom")]=Dn.toString,Dn[Symbol.toStringTag]="Decimal";var Oo=Dn.constructor=function t(r){var e,n,i;function u(t){var r,e,n,i=this;if(!(i instanceof u))return new u(t);if(i.constructor=u,fo(t))return i.s=t.s,void(nn?!t.d||t.e>u.maxE?(i.e=NaN,i.d=null):t.e<u.minE?(i.e=0,i.d=[0]):(i.e=t.e,i.d=t.d.slice()):(i.e=t.e,i.d=t.d?t.d.slice():t.d));if("number"===(n=o(t))){if(0===t)return i.s=1/t<0?-1:1,i.e=0,void(i.d=[0]);if(t<0?(t=-t,i.s=-1):i.s=1,t===~~t&&t<1e7){for(r=0,e=t;e>=10;e/=10)r++;return void(nn?r>u.maxE?(i.e=NaN,i.d=null):r<u.minE?(i.e=0,i.d=[0]):(i.e=r,i.d=[t]):(i.e=r,i.d=[t]))}return 0*t!=0?(t||(i.s=NaN),i.e=NaN,void(i.d=null)):Rn(i,t.toString())}if("string"!==n)throw Error(un+t);return 45===(e=t.charCodeAt(0))?(t=t.slice(1),i.s=-1):(43===e&&(t=t.slice(1)),i.s=1),dn.test(t)?Rn(i,t):zn(i,t)}if(u.prototype=Dn,u.ROUND_UP=0,u.ROUND_DOWN=1,u.ROUND_CEIL=2,u.ROUND_FLOOR=3,u.ROUND_HALF_UP=4,u.ROUND_HALF_DOWN=5,u.ROUND_HALF_EVEN=6,u.ROUND_HALF_CEIL=7,u.ROUND_HALF_FLOOR=8,u.EUCLID=9,u.config=u.set=no,u.clone=t,u.isDecimal=fo,u.abs=Gn,u.acos=Zn,u.acosh=Vn,u.add=Jn,u.asin=Hn,u.asinh=Yn,u.atan=Kn,u.atanh=Xn,u.atan2=Qn,u.cbrt=to,u.ceil=ro,u.clamp=eo,u.cos=oo,u.cosh=io,u.div=uo,u.exp=ao,u.floor=so,u.hypot=co,u.ln=lo,u.log=po,u.log10=yo,u.log2=ho,u.max=vo,u.min=go,u.mod=mo,u.mul=Do,u.pow=wo,u.random=bo,u.round=Ao,u.sign=xo,u.sin=Eo,u.sinh=Fo,u.sqrt=_o,u.sub=Co,u.sum=So,u.tan=Bo,u.tanh=Mo,u.trunc=No,void 0===r&&(r={}),r&&!0!==r.defaults)for(i=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],e=0;e<i.length;)r.hasOwnProperty(n=i[e++])||(r[n]=this[n]);return u.config(r),u}(en);tn=new Oo(tn),rn=new Oo(rn);var Po=je("BigNumber",["?on","config"],(function(t){var r=t.on,e=t.config,n=Oo.clone({precision:e.precision,modulo:Oo.EUCLID});return n.prototype=Object.create(n.prototype),n.prototype.type="BigNumber",n.prototype.isBigNumber=!0,n.prototype.toJSON=function(){return{mathjs:"BigNumber",value:this.toString()}},n.fromJSON=function(t){return new n(t.value)},r&&r("config",(function(t,r){t.precision!==r.precision&&n.config({precision:t.precision})})),n}),{isClass:!0}),jo={exports:{}};!function(t,r){!function(r){var e=Math.cosh||function(t){return Math.abs(t)<1e-9?1-t:.5*(Math.exp(t)+Math.exp(-t))},n=Math.sinh||function(t){return Math.abs(t)<1e-9?t:.5*(Math.exp(t)-Math.exp(-t))},i=function(){throw SyntaxError("Invalid Param")};function u(t,r){var e=Math.abs(t),n=Math.abs(r);return 0===t?Math.log(n):0===r?Math.log(e):e<3e3&&n<3e3?.5*Math.log(t*t+r*r):(t/=2,r/=2,.5*Math.log(t*t+r*r)+Math.LN2)}function a(t,r){if(!(this instanceof a))return new a(t,r);var e=function(t,r){var e={re:0,im:0};if(null==t)e.re=e.im=0;else if(void 0!==r)e.re=t,e.im=r;else switch(o(t)){case"object":if("im"in t&&"re"in t)e.re=t.re,e.im=t.im;else if("abs"in t&&"arg"in t){if(!Number.isFinite(t.abs)&&Number.isFinite(t.arg))return a.INFINITY;e.re=t.abs*Math.cos(t.arg),e.im=t.abs*Math.sin(t.arg)}else if("r"in t&&"phi"in t){if(!Number.isFinite(t.r)&&Number.isFinite(t.phi))return a.INFINITY;e.re=t.r*Math.cos(t.phi),e.im=t.r*Math.sin(t.phi)}else 2===t.length?(e.re=t[0],e.im=t[1]):i();break;case"string":e.im=e.re=0;var n=t.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g),u=1,s=0;null===n&&i();for(var c=0;c<n.length;c++){var f=n[c];" "===f||"\t"===f||"\n"===f||("+"===f?u++:"-"===f?s++:"i"===f||"I"===f?(u+s===0&&i()," "===n[c+1]||isNaN(n[c+1])?e.im+=parseFloat((s%2?"-":"")+"1"):(e.im+=parseFloat((s%2?"-":"")+n[c+1]),c++),u=s=0):((u+s===0||isNaN(f))&&i(),"i"===n[c+1]||"I"===n[c+1]?(e.im+=parseFloat((s%2?"-":"")+f),c++):e.re+=parseFloat((s%2?"-":"")+f),u=s=0))}u+s>0&&i();break;case"number":e.im=0,e.re=t;break;default:i()}return isNaN(e.re)||isNaN(e.im),e}(t,r);this.re=e.re,this.im=e.im}a.prototype={re:0,im:0,sign:function(){var t=this.abs();return new a(this.re/t,this.im/t)},add:function(t,r){var e=new a(t,r);return this.isInfinite()&&e.isInfinite()?a.NAN:this.isInfinite()||e.isInfinite()?a.INFINITY:new a(this.re+e.re,this.im+e.im)},sub:function(t,r){var e=new a(t,r);return this.isInfinite()&&e.isInfinite()?a.NAN:this.isInfinite()||e.isInfinite()?a.INFINITY:new a(this.re-e.re,this.im-e.im)},mul:function(t,r){var e=new a(t,r);return this.isInfinite()&&e.isZero()||this.isZero()&&e.isInfinite()?a.NAN:this.isInfinite()||e.isInfinite()?a.INFINITY:0===e.im&&0===this.im?new a(this.re*e.re,0):new a(this.re*e.re-this.im*e.im,this.re*e.im+this.im*e.re)},div:function(t,r){var e=new a(t,r);if(this.isZero()&&e.isZero()||this.isInfinite()&&e.isInfinite())return a.NAN;if(this.isInfinite()||e.isZero())return a.INFINITY;if(this.isZero()||e.isInfinite())return a.ZERO;t=this.re,r=this.im;var n,o,i=e.re,u=e.im;return 0===u?new a(t/i,r/i):Math.abs(i)<Math.abs(u)?new a((t*(o=i/u)+r)/(n=i*o+u),(r*o-t)/n):new a((t+r*(o=u/i))/(n=u*o+i),(r-t*o)/n)},pow:function(t,r){var e=new a(t,r);if(t=this.re,r=this.im,e.isZero())return a.ONE;if(0===e.im){if(0===r&&t>0)return new a(Math.pow(t,e.re),0);if(0===t)switch((e.re%4+4)%4){case 0:return new a(Math.pow(r,e.re),0);case 1:return new a(0,Math.pow(r,e.re));case 2:return new a(-Math.pow(r,e.re),0);case 3:return new a(0,-Math.pow(r,e.re))}}if(0===t&&0===r&&e.re>0&&e.im>=0)return a.ZERO;var n=Math.atan2(r,t),o=u(t,r);return t=Math.exp(e.re*o-e.im*n),r=e.im*o+e.re*n,new a(t*Math.cos(r),t*Math.sin(r))},sqrt:function(){var t,r,e=this.re,n=this.im,o=this.abs();if(e>=0){if(0===n)return new a(Math.sqrt(e),0);t=.5*Math.sqrt(2*(o+e))}else t=Math.abs(n)/Math.sqrt(2*(o-e));return r=e<=0?.5*Math.sqrt(2*(o-e)):Math.abs(n)/Math.sqrt(2*(o+e)),new a(t,n<0?-r:r)},exp:function(){var t=Math.exp(this.re);return this.im,new a(t*Math.cos(this.im),t*Math.sin(this.im))},expm1:function(){var t=this.re,r=this.im;return new a(Math.expm1(t)*Math.cos(r)+function(t){var r=Math.PI/4;if(-r>t||t>r)return Math.cos(t)-1;var e=t*t;return e*(e*(e*(e*(e*(e*(e*(e/20922789888e3-1/87178291200)+1/479001600)-1/3628800)+1/40320)-1/720)+1/24)-.5)}(r),Math.exp(t)*Math.sin(r))},log:function(){var t=this.re,r=this.im;return new a(u(t,r),Math.atan2(r,t))},abs:function(){return t=this.re,r=this.im,e=Math.abs(t),n=Math.abs(r),e<3e3&&n<3e3?Math.sqrt(e*e+n*n):(e<n?(e=n,n=t/r):n=r/t,e*Math.sqrt(1+n*n));var t,r,e,n},arg:function(){return Math.atan2(this.im,this.re)},sin:function(){var t=this.re,r=this.im;return new a(Math.sin(t)*e(r),Math.cos(t)*n(r))},cos:function(){var t=this.re,r=this.im;return new a(Math.cos(t)*e(r),-Math.sin(t)*n(r))},tan:function(){var t=2*this.re,r=2*this.im,o=Math.cos(t)+e(r);return new a(Math.sin(t)/o,n(r)/o)},cot:function(){var t=2*this.re,r=2*this.im,o=Math.cos(t)-e(r);return new a(-Math.sin(t)/o,n(r)/o)},sec:function(){var t=this.re,r=this.im,o=.5*e(2*r)+.5*Math.cos(2*t);return new a(Math.cos(t)*e(r)/o,Math.sin(t)*n(r)/o)},csc:function(){var t=this.re,r=this.im,o=.5*e(2*r)-.5*Math.cos(2*t);return new a(Math.sin(t)*e(r)/o,-Math.cos(t)*n(r)/o)},asin:function(){var t=this.re,r=this.im,e=new a(r*r-t*t+1,-2*t*r).sqrt(),n=new a(e.re-r,e.im+t).log();return new a(n.im,-n.re)},acos:function(){var t=this.re,r=this.im,e=new a(r*r-t*t+1,-2*t*r).sqrt(),n=new a(e.re-r,e.im+t).log();return new a(Math.PI/2-n.im,n.re)},atan:function(){var t=this.re,r=this.im;if(0===t){if(1===r)return new a(0,1/0);if(-1===r)return new a(0,-1/0)}var e=t*t+(1-r)*(1-r),n=new a((1-r*r-t*t)/e,-2*t/e).log();return new a(-.5*n.im,.5*n.re)},acot:function(){var t=this.re,r=this.im;if(0===r)return new a(Math.atan2(1,t),0);var e=t*t+r*r;return 0!==e?new a(t/e,-r/e).atan():new a(0!==t?t/0:0,0!==r?-r/0:0).atan()},asec:function(){var t=this.re,r=this.im;if(0===t&&0===r)return new a(0,1/0);var e=t*t+r*r;return 0!==e?new a(t/e,-r/e).acos():new a(0!==t?t/0:0,0!==r?-r/0:0).acos()},acsc:function(){var t=this.re,r=this.im;if(0===t&&0===r)return new a(Math.PI/2,1/0);var e=t*t+r*r;return 0!==e?new a(t/e,-r/e).asin():new a(0!==t?t/0:0,0!==r?-r/0:0).asin()},sinh:function(){var t=this.re,r=this.im;return new a(n(t)*Math.cos(r),e(t)*Math.sin(r))},cosh:function(){var t=this.re,r=this.im;return new a(e(t)*Math.cos(r),n(t)*Math.sin(r))},tanh:function(){var t=2*this.re,r=2*this.im,o=e(t)+Math.cos(r);return new a(n(t)/o,Math.sin(r)/o)},coth:function(){var t=2*this.re,r=2*this.im,o=e(t)-Math.cos(r);return new a(n(t)/o,-Math.sin(r)/o)},csch:function(){var t=this.re,r=this.im,o=Math.cos(2*r)-e(2*t);return new a(-2*n(t)*Math.cos(r)/o,2*e(t)*Math.sin(r)/o)},sech:function(){var t=this.re,r=this.im,o=Math.cos(2*r)+e(2*t);return new a(2*e(t)*Math.cos(r)/o,-2*n(t)*Math.sin(r)/o)},asinh:function(){var t=this.im;this.im=-this.re,this.re=t;var r=this.asin();return this.re=-this.im,this.im=t,t=r.re,r.re=-r.im,r.im=t,r},acosh:function(){var t=this.acos();if(t.im<=0){var r=t.re;t.re=-t.im,t.im=r}else{r=t.im;t.im=-t.re,t.re=r}return t},atanh:function(){var t=this.re,r=this.im,e=t>1&&0===r,n=1-t,o=1+t,i=n*n+r*r,s=0!==i?new a((o*n-r*r)/i,(r*n+o*r)/i):new a(-1!==t?t/0:0,0!==r?r/0:0),c=s.re;return s.re=u(s.re,s.im)/2,s.im=Math.atan2(s.im,c)/2,e&&(s.im=-s.im),s},acoth:function(){var t=this.re,r=this.im;if(0===t&&0===r)return new a(0,Math.PI/2);var e=t*t+r*r;return 0!==e?new a(t/e,-r/e).atanh():new a(0!==t?t/0:0,0!==r?-r/0:0).atanh()},acsch:function(){var t=this.re,r=this.im;if(0===r)return new a(0!==t?Math.log(t+Math.sqrt(t*t+1)):1/0,0);var e=t*t+r*r;return 0!==e?new a(t/e,-r/e).asinh():new a(0!==t?t/0:0,0!==r?-r/0:0).asinh()},asech:function(){var t=this.re,r=this.im;if(this.isZero())return a.INFINITY;var e=t*t+r*r;return 0!==e?new a(t/e,-r/e).acosh():new a(0!==t?t/0:0,0!==r?-r/0:0).acosh()},inverse:function(){if(this.isZero())return a.INFINITY;if(this.isInfinite())return a.ZERO;var t=this.re,r=this.im,e=t*t+r*r;return new a(t/e,-r/e)},conjugate:function(){return new a(this.re,-this.im)},neg:function(){return new a(-this.re,-this.im)},ceil:function(t){return t=Math.pow(10,t||0),new a(Math.ceil(this.re*t)/t,Math.ceil(this.im*t)/t)},floor:function(t){return t=Math.pow(10,t||0),new a(Math.floor(this.re*t)/t,Math.floor(this.im*t)/t)},round:function(t){return t=Math.pow(10,t||0),new a(Math.round(this.re*t)/t,Math.round(this.im*t)/t)},equals:function(t,r){var e=new a(t,r);return Math.abs(e.re-this.re)<=a.EPSILON&&Math.abs(e.im-this.im)<=a.EPSILON},clone:function(){return new a(this.re,this.im)},toString:function(){var t=this.re,r=this.im,e="";return this.isNaN()?"NaN":this.isInfinite()?"Infinity":(Math.abs(t)<a.EPSILON&&(t=0),Math.abs(r)<a.EPSILON&&(r=0),0===r?e+t:(0!==t?(e+=t,e+=" ",r<0?(r=-r,e+="-"):e+="+",e+=" "):r<0&&(r=-r,e+="-"),1!==r&&(e+=r),e+"i"))},toVector:function(){return[this.re,this.im]},valueOf:function(){return 0===this.im?this.re:null},isNaN:function(t){function r(){return t.apply(this,arguments)}return r.toString=function(){return t.toString()},r}((function(){return isNaN(this.re)||isNaN(this.im)})),isZero:function(){return 0===this.im&&0===this.re},isFinite:function(t){function r(){return t.apply(this,arguments)}return r.toString=function(){return t.toString()},r}((function(){return isFinite(this.re)&&isFinite(this.im)})),isInfinite:function(){return!(this.isNaN()||this.isFinite())}},a.ZERO=new a(0,0),a.ONE=new a(1,0),a.I=new a(0,1),a.PI=new a(Math.PI,0),a.E=new a(Math.E,0),a.INFINITY=new a(1/0,1/0),a.NAN=new a(NaN,NaN),a.EPSILON=1e-15,Object.defineProperty(a,"__esModule",{value:!0}),a.default=a,a.Complex=a,t.exports=a}()}(jo);var To=y(jo.exports),Io=je("Complex",[],(function(){return Object.defineProperty(To,"name",{value:"Complex"}),To.prototype.constructor=To,To.prototype.type="Complex",To.prototype.isComplex=!0,To.prototype.toJSON=function(){return{mathjs:"Complex",re:this.re,im:this.im}},To.prototype.toPolar=function(){return{r:this.abs(),phi:this.arg()}},To.prototype.format=function(t){var r=this.im,e=this.re,n=ae(this.re,t),o=ae(this.im,t),i=nr(t)?t:t?t.precision:null;if(null!==i){var u=Math.pow(10,-i);Math.abs(e/r)<u&&(e=0),Math.abs(r/e)<u&&(r=0)}return 0===r?n:0===e?1===r?"i":-1===r?"-i":o+"i":r<0?-1===r?n+" - i":n+" - "+o.substring(1)+"i":1===r?n+" + i":n+" + "+o+"i"},To.fromPolar=function(t){switch(arguments.length){case 1:var r=arguments[0];if("object"===o(r))return To(r);throw new TypeError("Input has to be an object with r and phi keys.");case 2:var e=arguments[0],n=arguments[1];if(nr(e)){if(ar(n)&&n.hasBase("ANGLE")&&(n=n.toNumber("rad")),nr(n))return new To({r:e,phi:n});throw new TypeError("Phi is not a number nor an angle unit.")}throw new TypeError("Radius r is not a number.");default:throw new SyntaxError("Wrong number of arguments in function fromPolar")}},To.prototype.valueOf=To.prototype.toString,To.fromJSON=function(t){return new To(t)},To.compare=function(t,r){return t.re>r.re?1:t.re<r.re?-1:t.im>r.im?1:t.im<r.im?-1:0},To}),{isClass:!0}),ko={exports:{}};!function(t,r){!function(r){var e={s:1,n:0,d:1};function n(t,r){if(isNaN(t=parseInt(t,10)))throw c.InvalidParameter;return t*r}function i(t,r){if(0===r)throw c.DivisionByZero;var e=Object.create(c.prototype);e.s=t<0?-1:1;var n=s(t=t<0?-t:t,r);return e.n=t/n,e.d=r/n,e}function u(t){for(var r={},e=t,n=2,o=4;o<=e;){for(;e%n==0;)e/=n,r[n]=(r[n]||0)+1;o+=1+2*n++}return e!==t?e>1&&(r[e]=(r[e]||0)+1):r[t]=(r[t]||0)+1,r}var a=function(t,r){var i,u=0,a=1,s=1,f=0,l=0,p=0,h=1,y=1,d=0,v=1,g=1,m=1,D=1e7;if(null==t);else if(void 0!==r){if(s=(u=t)*(a=r),u%1!=0||a%1!=0)throw c.NonIntegerParameter}else switch(o(t)){case"object":if("d"in t&&"n"in t)u=t.n,a=t.d,"s"in t&&(u*=t.s);else{if(!(0 in t))throw c.InvalidParameter;u=t[0],1 in t&&(a=t[1])}s=u*a;break;case"number":if(t<0&&(s=t,t=-t),t%1==0)u=t;else if(t>0){for(t>=1&&(t/=y=Math.pow(10,Math.floor(1+Math.log(t)/Math.LN10)));v<=D&&m<=D;){if(t===(i=(d+g)/(v+m))){v+m<=D?(u=d+g,a=v+m):m>v?(u=g,a=m):(u=d,a=v);break}t>i?(d+=g,v+=m):(g+=d,m+=v),v>D?(u=g,a=m):(u=d,a=v)}u*=y}else(isNaN(t)||isNaN(r))&&(a=u=NaN);break;case"string":if(null===(v=t.match(/\d+|./g)))throw c.InvalidParameter;if("-"===v[d]?(s=-1,d++):"+"===v[d]&&d++,v.length===d+1?l=n(v[d++],s):"."===v[d+1]||"."===v[d]?("."!==v[d]&&(f=n(v[d++],s)),(++d+1===v.length||"("===v[d+1]&&")"===v[d+3]||"'"===v[d+1]&&"'"===v[d+3])&&(l=n(v[d],s),h=Math.pow(10,v[d].length),d++),("("===v[d]&&")"===v[d+2]||"'"===v[d]&&"'"===v[d+2])&&(p=n(v[d+1],s),y=Math.pow(10,v[d+1].length)-1,d+=3)):"/"===v[d+1]||":"===v[d+1]?(l=n(v[d],s),h=n(v[d+2],1),d+=3):"/"===v[d+3]&&" "===v[d+1]&&(f=n(v[d],s),l=n(v[d+2],s),h=n(v[d+4],1),d+=5),v.length<=d){s=u=p+(a=h*y)*f+y*l;break}default:throw c.InvalidParameter}if(0===a)throw c.DivisionByZero;e.s=s<0?-1:1,e.n=Math.abs(u),e.d=Math.abs(a)};function s(t,r){if(!t)return r;if(!r)return t;for(;;){if(!(t%=r))return r;if(!(r%=t))return t}}function c(t,r){if(a(t,r),!(this instanceof c))return i(e.s*e.n,e.d);t=s(e.d,e.n),this.s=e.s,this.n=e.n/t,this.d=e.d/t}c.DivisionByZero=new Error("Division by Zero"),c.InvalidParameter=new Error("Invalid argument"),c.NonIntegerParameter=new Error("Parameters must be integer"),c.prototype={s:1,n:0,d:1,abs:function(){return i(this.n,this.d)},neg:function(){return i(-this.s*this.n,this.d)},add:function(t,r){return a(t,r),i(this.s*this.n*e.d+e.s*this.d*e.n,this.d*e.d)},sub:function(t,r){return a(t,r),i(this.s*this.n*e.d-e.s*this.d*e.n,this.d*e.d)},mul:function(t,r){return a(t,r),i(this.s*e.s*this.n*e.n,this.d*e.d)},div:function(t,r){return a(t,r),i(this.s*e.s*this.n*e.d,this.d*e.n)},clone:function(){return i(this.s*this.n,this.d)},mod:function(t,r){if(isNaN(this.n)||isNaN(this.d))return new c(NaN);if(void 0===t)return i(this.s*this.n%this.d,1);if(a(t,r),0===e.n&&0===this.d)throw c.DivisionByZero;return i(this.s*(e.d*this.n)%(e.n*this.d),e.d*this.d)},gcd:function(t,r){return a(t,r),i(s(e.n,this.n)*s(e.d,this.d),e.d*this.d)},lcm:function(t,r){return a(t,r),0===e.n&&0===this.n?i(0,1):i(e.n*this.n,s(e.n,this.n)*s(e.d,this.d))},ceil:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new c(NaN):i(Math.ceil(t*this.s*this.n/this.d),t)},floor:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new c(NaN):i(Math.floor(t*this.s*this.n/this.d),t)},round:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new c(NaN):i(Math.round(t*this.s*this.n/this.d),t)},inverse:function(){return i(this.s*this.d,this.n)},pow:function(t,r){if(a(t,r),1===e.d)return e.s<0?i(Math.pow(this.s*this.d,e.n),Math.pow(this.n,e.n)):i(Math.pow(this.s*this.n,e.n),Math.pow(this.d,e.n));if(this.s<0)return null;var n=u(this.n),o=u(this.d),s=1,c=1;for(var f in n)if("1"!==f){if("0"===f){s=0;break}if(n[f]*=e.n,n[f]%e.d!=0)return null;n[f]/=e.d,s*=Math.pow(f,n[f])}for(var f in o)if("1"!==f){if(o[f]*=e.n,o[f]%e.d!=0)return null;o[f]/=e.d,c*=Math.pow(f,o[f])}return e.s<0?i(c,s):i(s,c)},equals:function(t,r){return a(t,r),this.s*this.n*e.d==e.s*e.n*this.d},compare:function(t,r){a(t,r);var n=this.s*this.n*e.d-e.s*e.n*this.d;return(0<n)-(n<0)},simplify:function(t){if(isNaN(this.n)||isNaN(this.d))return this;t=t||.001;for(var r=this.abs(),e=r.toContinued(),n=1;n<e.length;n++){for(var o=i(e[n-1],1),u=n-2;u>=0;u--)o=o.inverse().add(e[u]);if(o.sub(r).abs().valueOf()<t)return o.mul(this.s)}return this},divisible:function(t,r){return a(t,r),!(!(e.n*this.d)||this.n*e.d%(e.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(t){var r,e="",n=this.n,o=this.d;return this.s<0&&(e+="-"),1===o?e+=n:(t&&(r=Math.floor(n/o))>0&&(e+=r,e+=" ",n%=o),e+=n,e+="/",e+=o),e},toLatex:function(t){var r,e="",n=this.n,o=this.d;return this.s<0&&(e+="-"),1===o?e+=n:(t&&(r=Math.floor(n/o))>0&&(e+=r,n%=o),e+="\\frac{",e+=n,e+="}{",e+=o,e+="}"),e},toContinued:function(){var t,r=this.n,e=this.d,n=[];if(isNaN(r)||isNaN(e))return n;do{n.push(Math.floor(r/e)),t=r%e,r=e,e=t}while(1!==r);return n},toString:function(t){var r=this.n,e=this.d;if(isNaN(r)||isNaN(e))return"NaN";t=t||15;var n=function(t,r){for(;r%2==0;r/=2);for(;r%5==0;r/=5);if(1===r)return 0;for(var e=10%r,n=1;1!==e;n++)if(e=10*e%r,n>2e3)return 0;return n}(0,e),o=function(t,r,e){for(var n=1,o=function(t,r,e){for(var n=1;r>0;t=t*t%e,r>>=1)1&r&&(n=n*t%e);return n}(10,e,r),i=0;i<300;i++){if(n===o)return i;n=10*n%r,o=10*o%r}return 0}(0,e,n),i=this.s<0?"-":"";if(i+=r/e|0,r%=e,(r*=10)&&(i+="."),n){for(var u=o;u--;)i+=r/e|0,r%=e,r*=10;i+="(";for(u=n;u--;)i+=r/e|0,r%=e,r*=10;i+=")"}else for(u=t;r&&u--;)i+=r/e|0,r%=e,r*=10;return i}},Object.defineProperty(c,"__esModule",{value:!0}),c.default=c,c.Fraction=c,t.exports=c}()}(ko);var Ro=y(ko.exports),zo=je("Fraction",[],(function(){return Object.defineProperty(Ro,"name",{value:"Fraction"}),Ro.prototype.constructor=Ro,Ro.prototype.type="Fraction",Ro.prototype.isFraction=!0,Ro.prototype.toJSON=function(){return{mathjs:"Fraction",n:this.s*this.n,d:this.d}},Ro.fromJSON=function(t){return new Ro(t)},Ro}),{isClass:!0}),Uo=je("Matrix",[],(function(){function t(){if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator")}return t.prototype.type="Matrix",t.prototype.isMatrix=!0,t.prototype.storage=function(){throw new Error("Cannot invoke storage on a Matrix interface")},t.prototype.datatype=function(){throw new Error("Cannot invoke datatype on a Matrix interface")},t.prototype.create=function(t,r){throw new Error("Cannot invoke create on a Matrix interface")},t.prototype.subset=function(t,r,e){throw new Error("Cannot invoke subset on a Matrix interface")},t.prototype.get=function(t){throw new Error("Cannot invoke get on a Matrix interface")},t.prototype.set=function(t,r,e){throw new Error("Cannot invoke set on a Matrix interface")},t.prototype.resize=function(t,r){throw new Error("Cannot invoke resize on a Matrix interface")},t.prototype.reshape=function(t,r){throw new Error("Cannot invoke reshape on a Matrix interface")},t.prototype.clone=function(){throw new Error("Cannot invoke clone on a Matrix interface")},t.prototype.size=function(){throw new Error("Cannot invoke size on a Matrix interface")},t.prototype.map=function(t,r){throw new Error("Cannot invoke map on a Matrix interface")},t.prototype.forEach=function(t){throw new Error("Cannot invoke forEach on a Matrix interface")},t.prototype[Symbol.iterator]=function(){throw new Error("Cannot iterate a Matrix interface")},t.prototype.toArray=function(){throw new Error("Cannot invoke toArray on a Matrix interface")},t.prototype.valueOf=function(){throw new Error("Cannot invoke valueOf on a Matrix interface")},t.prototype.format=function(t){throw new Error("Cannot invoke format on a Matrix interface")},t.prototype.toString=function(){throw new Error("Cannot invoke toString on a Matrix interface")},t}),{isClass:!0});function Wo(t){var r=0,e=1,n=Object.create(null),o=Object.create(null),i=0,u=function(t){var u=o[t];if(u&&(delete n[u],delete o[t],--r,e===u)){if(!r)return i=0,void(e=1);for(;!hasOwnProperty.call(n,++e););}};return t=Math.abs(t),{hit:function(a){var s=o[a],c=++i;if(n[c]=a,o[a]=c,!s){if(++r<=t)return;return a=n[e],u(a),a}if(delete n[s],e===s)for(;!hasOwnProperty.call(n,++e););},delete:u,clear:function(){r=i=0,e=1,n=Object.create(null),o=Object.create(null)}}}function qo(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=r.hasher,n=r.limit;return n=null==n?Number.POSITIVE_INFINITY:n,e=null==e?JSON.stringify:e,function r(){"object"!==o(r.cache)&&(r.cache={values:new Map,lru:Wo(n||Number.POSITIVE_INFINITY)});for(var i=[],u=0;u<arguments.length;u++)i[u]=arguments[u];var a=e(i);if(r.cache.values.has(a))return r.cache.lru.hit(a),r.cache.values.get(a);var s=t.apply(t,i);return r.cache.values.set(a,s),r.cache.values.delete(r.cache.lru.hit(a)),s}}function Lo(t){return Object.keys(t.signatures||{}).reduce((function(t,r){var e=(r.match(/,/g)||[]).length+1;return Math.max(t,e)}),-1)}var $o=je("DenseMatrix",["Matrix"],(function(t){var r=t.Matrix;function e(t,r){if(!(this instanceof e))throw new SyntaxError("Constructor must be called with the new operator");if(r&&!sr(r))throw new Error("Invalid datatype: "+r);if(fr(t))"DenseMatrix"===t.type?(this._data=Lr(t._data),this._size=Lr(t._size),this._datatype=r||t._datatype):(this._data=t.toArray(),this._size=t.size(),this._datatype=r||t._datatype);else if(t&&cr(t.data)&&cr(t.size))this._data=t.data,this._size=t.size,xe(this._data,this._size),this._datatype=r||t.datatype;else if(cr(t))this._data=f(t),this._size=be(this._data),xe(this._data,this._size),this._datatype=r;else{if(t)throw new TypeError("Unsupported type of data ("+qr(t)+")");this._data=[],this._size=[0],this._datatype=r}}function n(t,r){if(!dr(r))throw new TypeError("Invalid index");if(r.isScalar())return t.get(r.min());var n=r.size();if(n.length!==t._size.length)throw new De(n.length,t._size.length);for(var i=r.min(),u=r.max(),a=0,s=t._size.length;a<s;a++)Ee(i[a],t._size[a]),Ee(u[a],t._size[a]);return new e(o(t._data,r,n.length,0),t._datatype)}function o(t,r,e,n){var i=n===e-1,u=r.dimension(n);return i?u.map((function(r){return Ee(r,t.length),t[r]})).valueOf():u.map((function(i){return Ee(i,t.length),o(t[i],r,e,n+1)})).valueOf()}function i(t,r,e,n){if(!r||!0!==r.isIndex)throw new TypeError("Invalid index");var o,i=r.size(),a=r.isScalar();if(fr(e)?(o=e.size(),e=e.valueOf()):o=be(e),a){if(0!==o.length)throw new TypeError("Scalar expected");t.set(r.min(),e,n)}else{if(i.length<t._size.length)throw new De(i.length,t._size.length,"<");if(o.length<i.length){for(var s=0,f=0;1===i[s]&&1===o[s];)s++;for(;1===i[s];)f++,s++;e=Me(e,i.length,f,o)}if(!Vr(i,o))throw new De(i,o,">");var l=r.max().map((function(t){return t+1}));c(t,l,n);var p=i.length;u(t._data,r,e,p,0)}return t}function u(t,r,e,n,o){var i=o===n-1,a=r.dimension(o);i?a.forEach((function(r,n){Ee(r),t[r]=e[n[0]]})):a.forEach((function(i,a){Ee(i),u(t[i],r,e[a[0]],n,o+1)}))}function s(t,r,e){if(0===r.length){for(var n=t._data;cr(n);)n=n[0];return n}return t._size=r.slice(0),t._data=Fe(t._data,t._size,e),t}function c(t,r,e){for(var n=t._size.slice(0),o=!1;n.length<r.length;)n.push(0),o=!0;for(var i=0,u=r.length;i<u;i++)r[i]>n[i]&&(n[i]=r[i],o=!0);o&&s(t,n,e)}function f(t){for(var r=0,e=t.length;r<e;r++){var n=t[r];cr(n)?t[r]=f(n):n&&!0===n.isMatrix&&(t[r]=f(n.valueOf()))}return t}return e.prototype=new r,e.prototype.createDenseMatrix=function(t,r){return new e(t,r)},Object.defineProperty(e,"name",{value:"DenseMatrix"}),e.prototype.constructor=e,e.prototype.type="DenseMatrix",e.prototype.isDenseMatrix=!0,e.prototype.getDataType=function(){return Oe(this._data,qr)},e.prototype.storage=function(){return"dense"},e.prototype.datatype=function(){return this._datatype},e.prototype.create=function(t,r){return new e(t,r)},e.prototype.subset=function(t,r,e){switch(arguments.length){case 1:return n(this,t);case 2:case 3:return i(this,t,r,e);default:throw new SyntaxError("Wrong number of arguments")}},e.prototype.get=function(t){if(!cr(t))throw new TypeError("Array expected");if(t.length!==this._size.length)throw new De(t.length,this._size.length);for(var r=0;r<t.length;r++)Ee(t[r],this._size[r]);for(var e=this._data,n=0,o=t.length;n<o;n++){var i=t[n];Ee(i,e.length),e=e[i]}return e},e.prototype.set=function(t,r,e){if(!cr(t))throw new TypeError("Array expected");if(t.length<this._size.length)throw new De(t.length,this._size.length,"<");var n,o,i,u=t.map((function(t){return t+1}));c(this,u,e);var a=this._data;for(n=0,o=t.length-1;n<o;n++)Ee(i=t[n],a.length),a=a[i];return Ee(i=t[t.length-1],a.length),a[i]=r,this},e.prototype.resize=function(t,r,e){if(!lr(t))throw new TypeError("Array or Matrix expected");var n=t.valueOf().map((function(t){return Array.isArray(t)&&1===t.length?t[0]:t}));return s(e?this.clone():this,n,r)},e.prototype.reshape=function(t,r){var e=r?this.clone():this;e._data=Ce(e._data,t);var n=e._size.reduce((function(t,r){return t*r}));return e._size=Se(t,n),e},e.prototype.clone=function(){return new e({data:Lr(this._data),size:Lr(this._size),datatype:this._datatype})},e.prototype.size=function(){return this._size.slice(0)},e.prototype.map=function(t){var r=this,n=Lo(t),o=function e(o,i){return cr(o)?o.map((function(t,r){return e(t,i.concat(r))})):1===n?t(o):2===n?t(o,i):t(o,i,r)}(this._data,[]);return new e(o,void 0!==this._datatype?Oe(o,qr):void 0)},e.prototype.forEach=function(t){var r=this;!function e(n,o){cr(n)?n.forEach((function(t,r){e(t,o.concat(r))})):t(n,o,r)}(this._data,[])},e.prototype[Symbol.iterator]=regeneratorRuntime.mark((function t(){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=regeneratorRuntime.mark((function t(r,e){var n;return regeneratorRuntime.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:if(!cr(r)){o.next=9;break}n=0;case 2:if(!(n<r.length)){o.next=7;break}return o.delegateYield(t(r[n],e.concat(n)),"t0",4);case 4:n++,o.next=2;break;case 7:o.next=11;break;case 9:return o.next=11,{value:r,index:e};case 11:case"end":return o.stop()}}),t)})),t.delegateYield(r(this._data,[]),"t0",2);case 2:case"end":return t.stop()}}),t,this)})),e.prototype.rows=function(){var t=[];if(2!==this.size().length)throw new TypeError("Rows can only be returned for a 2D matrix.");var r,n=a(this._data);try{for(n.s();!(r=n.n()).done;){var o=r.value;t.push(new e([o],this._datatype))}}catch(t){n.e(t)}finally{n.f()}return t},e.prototype.columns=function(){var t=this,r=[],n=this.size();if(2!==n.length)throw new TypeError("Rows can only be returned for a 2D matrix.");for(var o=this._data,i=function(n){var i=o.map((function(t){return[t[n]]}));r.push(new e(i,t._datatype))},u=0;u<n[1];u++)i(u);return r},e.prototype.toArray=function(){return Lr(this._data)},e.prototype.valueOf=function(){return this._data},e.prototype.format=function(t){return ge(this._data,t)},e.prototype.toString=function(){return ge(this._data)},e.prototype.toJSON=function(){return{mathjs:"DenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},e.prototype.diagonal=function(t){if(t){if(or(t)&&(t=t.toNumber()),!nr(t)||!ie(t))throw new TypeError("The parameter k must be an integer number")}else t=0;for(var r=t>0?t:0,n=t<0?-t:0,o=this._size[0],i=this._size[1],u=Math.min(o-n,i-r),a=[],s=0;s<u;s++)a[s]=this._data[s+n][s+r];return new e({data:a,size:[u],datatype:this._datatype})},e.diagonal=function(t,r,n,o){if(!cr(t))throw new TypeError("Array expected, size parameter");if(2!==t.length)throw new Error("Only two dimensions matrix are supported");if(t=t.map((function(t){if(or(t)&&(t=t.toNumber()),!nr(t)||!ie(t)||t<1)throw new Error("Size values must be positive integers");return t})),n){if(or(n)&&(n=n.toNumber()),!nr(n)||!ie(n))throw new TypeError("The parameter k must be an integer number")}else n=0;var i,u=n>0?n:0,a=n<0?-n:0,s=t[0],c=t[1],f=Math.min(s-a,c-u);if(cr(r)){if(r.length!==f)throw new Error("Invalid value array length");i=function(t){return r[t]}}else if(fr(r)){var l=r.size();if(1!==l.length||l[0]!==f)throw new Error("Invalid matrix length");i=function(t){return r.get([t])}}else i=function(){return r};o||(o=or(i(0))?i(0).mul(0):0);var p=[];if(t.length>0){p=Fe(p,t,o);for(var h=0;h<f;h++)p[h+a][h+u]=i(h)}return new e({data:p,size:[s,c]})},e.fromJSON=function(t){return new e(t)},e.prototype.swapRows=function(t,r){if(!(nr(t)&&ie(t)&&nr(r)&&ie(r)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return Ee(t,this._size[0]),Ee(r,this._size[0]),e._swapRows(t,r,this._data),this},e._swapRows=function(t,r,e){var n=e[t];e[t]=e[r],e[r]=n},e}),{isClass:!0});function Go(t,r){fr(t)&&(t=t.valueOf());for(var e=0,n=t.length;e<n;e++){var o=t[e];Array.isArray(o)?Go(o,r):r(o)}}function Zo(t,r,e){return t&&"function"==typeof t.map?t.map((function(t){return Zo(t,r)})):r(t)}function Vo(t,r,e){var n,o,i,u;if(r<=0){if(Array.isArray(t[0])){for(u=function(t){var r,e,n=t.length,o=t[0].length,i=[];for(e=0;e<o;e++){var u=[];for(r=0;r<n;r++)u.push(t[r][e]);i.push(u)}return i}(t),o=[],n=0;n<u.length;n++)o[n]=Vo(u[n],r-1,e);return o}for(i=t[0],n=1;n<t.length;n++)i=e(i,t[n]);return i}for(o=[],n=0;n<t.length;n++)o[n]=Vo(t[n],r-1,e);return o}var Jo="isInteger",Ho=je(Jo,["typed"],(function(t){var r=t.typed;return r(Jo,{number:ie,BigNumber:function(t){return t.isInt()},Fraction:function(t){return 1===t.d&&isFinite(t.n)},"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))})})),Yo="number",Ko="number, number";function Xo(t){return Math.abs(t)}function Qo(t,r){return t+r}function ti(t,r){return t*r}function ri(t){return-t}Xo.signature=Yo,Qo.signature=Ko,ti.signature=Ko,ri.signature=Yo;var ei="number";function ni(t){return 0===t}function oi(t){return Number.isNaN(t)}ni.signature=ei,oi.signature=ei;var ii="isZero",ui=je(ii,["typed"],(function(t){var r=t.typed;return r(ii,{number:ni,BigNumber:function(t){return t.isZero()},Complex:function(t){return 0===t.re&&0===t.im},Fraction:function(t){return 1===t.d&&0===t.n},Unit:r.referToSelf((function(t){return function(e){return r.find(t,e.valueType())(e.value)}})),"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))})})),ai="isNaN",si=je(ai,["typed"],(function(t){return(0,t.typed)(ai,{number:oi,BigNumber:function(t){return t.isNaN()},Fraction:function(t){return!1},Complex:function(t){return t.isNaN()},Unit:function(t){return Number.isNaN(t.value)},"Array | Matrix":function(t){return Zo(t,Number.isNaN)}})}));var ci=je("compareUnits",["typed"],(function(t){var r=t.typed;return{"Unit, Unit":r.referToSelf((function(t){return function(e,n){if(!e.equalBase(n))throw new Error("Cannot compare units with different base");return r.find(t,[e.valueType(),n.valueType()])(e.value,n.value)}}))}})),fi="equalScalar",li=je(fi,["typed","config"],(function(t){var r=t.typed,e=t.config,n=ci({typed:r});return r(fi,{"boolean, boolean":function(t,r){return t===r},"number, number":function(t,r){return he(t,r,e.epsilon)},"BigNumber, BigNumber":function(t,r){return t.eq(r)||function(t,r,e){if(null==e)return t.eq(r);if(t.eq(r))return!0;if(t.isNaN()||r.isNaN())return!1;if(t.isFinite()&&r.isFinite()){var n=t.minus(r).abs();if(n.isZero())return!0;var o=t.constructor.max(t.abs(),r.abs());return n.lte(o.times(e))}return!1}(t,r,e.epsilon)},"Fraction, Fraction":function(t,r){return t.equals(r)},"Complex, Complex":function(t,r){return function(t,r,e){return he(t.re,r.re,e)&&he(t.im,r.im,e)}(t,r,e.epsilon)}},n)}));je(fi,["typed","config"],(function(t){var r=t.typed,e=t.config;return r(fi,{"number, number":function(t,r){return he(t,r,e.epsilon)}})}));var pi=je("SparseMatrix",["typed","equalScalar","Matrix"],(function(t){var r=t.typed,e=t.equalScalar,n=t.Matrix;function o(t,r){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");if(r&&!sr(r))throw new Error("Invalid datatype: "+r);if(fr(t))!function(t,r,e){"SparseMatrix"===r.type?(t._values=r._values?Lr(r._values):void 0,t._index=Lr(r._index),t._ptr=Lr(r._ptr),t._size=Lr(r._size),t._datatype=e||r._datatype):i(t,r.valueOf(),e||r._datatype)}(this,t,r);else if(t&&cr(t.index)&&cr(t.ptr)&&cr(t.size))this._values=t.values,this._index=t.index,this._ptr=t.ptr,this._size=t.size,this._datatype=r||t.datatype;else if(cr(t))i(this,t,r);else{if(t)throw new TypeError("Unsupported type of data ("+qr(t)+")");this._values=[],this._index=[],this._ptr=[0],this._size=[0,0],this._datatype=r}}function i(t,n,o){t._values=[],t._index=[],t._ptr=[],t._datatype=o;var i=n.length,u=0,a=e,s=0;if(sr(o)&&(a=r.find(e,[o,o])||e,s=r.convert(0,o)),i>0){var c=0;do{t._ptr.push(t._index.length);for(var f=0;f<i;f++){var l=n[f];if(cr(l)){if(0===c&&u<l.length&&(u=l.length),c<l.length){var p=l[c];a(p,s)||(t._values.push(p),t._index.push(f))}}else 0===c&&u<1&&(u=1),a(l,s)||(t._values.push(l),t._index.push(f))}c++}while(c<u)}t._ptr.push(t._index.length),t._size=[i,u]}function u(t,r){if(!dr(r))throw new TypeError("Invalid index");if(r.isScalar())return t.get(r.min());var e,n,i,u,a=r.size();if(a.length!==t._size.length)throw new De(a.length,t._size.length);var s=r.min(),c=r.max();for(e=0,n=t._size.length;e<n;e++)Ee(s[e],t._size[e]),Ee(c[e],t._size[e]);var f=t._values,l=t._index,p=t._ptr,h=r.dimension(0),y=r.dimension(1),d=[],v=[];h.forEach((function(t,r){v[t]=r[0],d[t]=!0}));var g=f?[]:void 0,m=[],D=[];return y.forEach((function(t){for(D.push(m.length),i=p[t],u=p[t+1];i<u;i++)e=l[i],!0===d[e]&&(m.push(v[e]),g&&g.push(f[i]))})),D.push(m.length),new o({values:g,index:m,ptr:D,size:a,datatype:t._datatype})}function a(t,r,e,n){if(!r||!0!==r.isIndex)throw new TypeError("Invalid index");var o,i=r.size(),u=r.isScalar();if(fr(e)?(o=e.size(),e=e.toArray()):o=be(e),u){if(0!==o.length)throw new TypeError("Scalar expected");t.set(r.min(),e,n)}else{if(1!==i.length&&2!==i.length)throw new De(i.length,t._size.length,"<");if(o.length<i.length){for(var a=0,s=0;1===i[a]&&1===o[a];)a++;for(;1===i[a];)s++,a++;e=Me(e,i.length,s,o)}if(!Vr(i,o))throw new De(i,o,">");if(1===i.length){r.dimension(0).forEach((function(r,o){Ee(r),t.set([r,0],e[o[0]],n)}))}else{var c=r.dimension(0),f=r.dimension(1);c.forEach((function(r,o){Ee(r),f.forEach((function(i,u){Ee(i),t.set([r,i],e[o[0]][u[0]],n)}))}))}}return t}function s(t,r,e,n){if(e-r==0)return e;for(var o=r;o<e;o++)if(n[o]===t)return o;return r}function c(t,r,e,n,o,i,u){o.splice(t,0,n),i.splice(t,0,r);for(var a=e+1;a<u.length;a++)u[a]++}function f(t,n,o,i){var u=i||0,a=e,s=0;sr(t._datatype)&&(a=r.find(e,[t._datatype,t._datatype])||e,s=r.convert(0,t._datatype),u=r.convert(u,t._datatype));var c,f,l,p=!a(u,s),h=t._size[0],y=t._size[1];if(o>y){for(f=y;f<o;f++)if(t._ptr[f]=t._values.length,p)for(c=0;c<h;c++)t._values.push(u),t._index.push(c);t._ptr[o]=t._values.length}else o<y&&(t._ptr.splice(o+1,y-o),t._values.splice(t._ptr[o],t._values.length),t._index.splice(t._ptr[o],t._index.length));if(y=o,n>h){if(p){var d=0;for(f=0;f<y;f++){t._ptr[f]=t._ptr[f]+d,l=t._ptr[f+1]+d;var v=0;for(c=h;c<n;c++,v++)t._values.splice(l+v,0,u),t._index.splice(l+v,0,c),d++}t._ptr[y]=t._values.length}}else if(n<h){var g=0;for(f=0;f<y;f++){t._ptr[f]=t._ptr[f]-g;var m=t._ptr[f],D=t._ptr[f+1]-g;for(l=m;l<D;l++)(c=t._index[l])>n-1&&(t._values.splice(l,1),t._index.splice(l,1),g++)}t._ptr[f]=t._values.length}return t._size[0]=n,t._size[1]=o,t}function l(t,r,e,n,o){var i,u,a=n[0],s=n[1],c=[];for(i=0;i<a;i++)for(c[i]=[],u=0;u<s;u++)c[i][u]=0;for(u=0;u<s;u++)for(var f=e[u],l=e[u+1],p=f;p<l;p++)c[i=r[p]][u]=t?o?Lr(t[p]):t[p]:1;return c}return o.prototype=new n,o.prototype.createSparseMatrix=function(t,r){return new o(t,r)},Object.defineProperty(o,"name",{value:"SparseMatrix"}),o.prototype.constructor=o,o.prototype.type="SparseMatrix",o.prototype.isSparseMatrix=!0,o.prototype.getDataType=function(){return Oe(this._values,qr)},o.prototype.storage=function(){return"sparse"},o.prototype.datatype=function(){return this._datatype},o.prototype.create=function(t,r){return new o(t,r)},o.prototype.density=function(){var t=this._size[0],r=this._size[1];return 0!==t&&0!==r?this._index.length/(t*r):0},o.prototype.subset=function(t,r,e){if(!this._values)throw new Error("Cannot invoke subset on a Pattern only matrix");switch(arguments.length){case 1:return u(this,t);case 2:case 3:return a(this,t,r,e);default:throw new SyntaxError("Wrong number of arguments")}},o.prototype.get=function(t){if(!cr(t))throw new TypeError("Array expected");if(t.length!==this._size.length)throw new De(t.length,this._size.length);if(!this._values)throw new Error("Cannot invoke get on a Pattern only matrix");var r=t[0],e=t[1];Ee(r,this._size[0]),Ee(e,this._size[1]);var n=s(r,this._ptr[e],this._ptr[e+1],this._index);return n<this._ptr[e+1]&&this._index[n]===r?this._values[n]:0},o.prototype.set=function(t,n,o){if(!cr(t))throw new TypeError("Array expected");if(t.length!==this._size.length)throw new De(t.length,this._size.length);if(!this._values)throw new Error("Cannot invoke set on a Pattern only matrix");var i=t[0],u=t[1],a=this._size[0],l=this._size[1],p=e,h=0;sr(this._datatype)&&(p=r.find(e,[this._datatype,this._datatype])||e,h=r.convert(0,this._datatype)),(i>a-1||u>l-1)&&(f(this,Math.max(i+1,a),Math.max(u+1,l),o),a=this._size[0],l=this._size[1]),Ee(i,a),Ee(u,l);var y=s(i,this._ptr[u],this._ptr[u+1],this._index);return y<this._ptr[u+1]&&this._index[y]===i?p(n,h)?function(t,r,e,n,o){e.splice(t,1),n.splice(t,1);for(var i=r+1;i<o.length;i++)o[i]--}(y,u,this._values,this._index,this._ptr):this._values[y]=n:p(n,h)||c(y,i,u,n,this._values,this._index,this._ptr),this},o.prototype.resize=function(t,r,e){if(!lr(t))throw new TypeError("Array or Matrix expected");var n=t.valueOf().map((function(t){return Array.isArray(t)&&1===t.length?t[0]:t}));if(2!==n.length)throw new Error("Only two dimensions matrix are supported");return n.forEach((function(t){if(!nr(t)||!ie(t)||t<0)throw new TypeError("Invalid size, must contain positive integers (size: "+ge(n)+")")})),f(e?this.clone():this,n[0],n[1],r)},o.prototype.reshape=function(t,r){if(!cr(t))throw new TypeError("Array expected");if(2!==t.length)throw new Error("Sparse matrices can only be reshaped in two dimensions");t.forEach((function(r){if(!nr(r)||!ie(r)||r<=-2||0===r)throw new TypeError("Invalid size, must contain positive integers or -1 (size: "+ge(t)+")")}));var e=this._size[0]*this._size[1];if(e!==(t=Se(t,e))[0]*t[1])throw new Error("Reshaping sparse matrix will result in the wrong number of elements");var n=r?this.clone():this;if(this._size[0]===t[0]&&this._size[1]===t[1])return n;for(var o=[],i=0;i<n._ptr.length;i++)for(var u=0;u<n._ptr[i+1]-n._ptr[i];u++)o.push(i);for(var a=n._values.slice(),f=n._index.slice(),l=0;l<n._index.length;l++){var p=f[l],h=o[l],y=p*n._size[1]+h;o[l]=y%t[1],f[l]=Math.floor(y/t[1])}n._values.length=0,n._index.length=0,n._ptr.length=t[1]+1,n._size=t.slice();for(var d=0;d<n._ptr.length;d++)n._ptr[d]=0;for(var v=0;v<a.length;v++){var g=f[v],m=o[v],D=a[v];c(s(g,n._ptr[m],n._ptr[m+1],n._index),g,m,D,n._values,n._index,n._ptr)}return n},o.prototype.clone=function(){return new o({values:this._values?Lr(this._values):void 0,index:Lr(this._index),ptr:Lr(this._ptr),size:Lr(this._size),datatype:this._datatype})},o.prototype.size=function(){return this._size.slice(0)},o.prototype.map=function(t,n){if(!this._values)throw new Error("Cannot invoke map on a Pattern only matrix");var i=this,u=this._size[0],a=this._size[1],s=Lo(t);return function(t,n,i,u,a,s,c){var f=[],l=[],p=[],h=e,y=0;sr(t._datatype)&&(h=r.find(e,[t._datatype,t._datatype])||e,y=r.convert(0,t._datatype));for(var d=function(t,r,e){t=s(t,r,e),h(t,y)||(f.push(t),l.push(r))},v=u;v<=a;v++){p.push(f.length);var g=t._ptr[v],m=t._ptr[v+1];if(c)for(var D=g;D<m;D++){var w=t._index[D];w>=n&&w<=i&&d(t._values[D],w-n,v-u)}else{for(var b={},A=g;A<m;A++){b[t._index[A]]=t._values[A]}for(var x=n;x<=i;x++){d(x in b?b[x]:0,x-n,v-u)}}}return p.push(f.length),new o({values:f,index:l,ptr:p,size:[i-n+1,a-u+1]})}(this,0,u-1,0,a-1,(function(r,e,n){return 1===s?t(r):2===s?t(r,[e,n]):t(r,[e,n],i)}),n)},o.prototype.forEach=function(t,r){if(!this._values)throw new Error("Cannot invoke forEach on a Pattern only matrix");for(var e=this._size[0],n=this._size[1],o=0;o<n;o++){var i=this._ptr[o],u=this._ptr[o+1];if(r)for(var a=i;a<u;a++){var s=this._index[a];t(this._values[a],[s,o],this)}else{for(var c={},f=i;f<u;f++){c[this._index[f]]=this._values[f]}for(var l=0;l<e;l++){t(l in c?c[l]:0,[l,o],this)}}}},o.prototype[Symbol.iterator]=regeneratorRuntime.mark((function t(){var r,e,n,o,i,u;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this._values){t.next=2;break}throw new Error("Cannot iterate a Pattern only matrix");case 2:r=this._size[1],e=0;case 4:if(!(e<r)){t.next=18;break}n=this._ptr[e],o=this._ptr[e+1],i=n;case 8:if(!(i<o)){t.next=15;break}return u=this._index[i],t.next=12,{value:this._values[i],index:[u,e]};case 12:i++,t.next=8;break;case 15:e++,t.next=4;break;case 18:case"end":return t.stop()}}),t,this)})),o.prototype.toArray=function(){return l(this._values,this._index,this._ptr,this._size,!0)},o.prototype.valueOf=function(){return l(this._values,this._index,this._ptr,this._size,!1)},o.prototype.format=function(t){for(var r=this._size[0],e=this._size[1],n=this.density(),o="Sparse Matrix ["+ge(r,t)+" x "+ge(e,t)+"] density: "+ge(n,t)+"\n",i=0;i<e;i++)for(var u=this._ptr[i],a=this._ptr[i+1],s=u;s<a;s++){o+="\n    ("+ge(this._index[s],t)+", "+ge(i,t)+") ==> "+(this._values?ge(this._values[s],t):"X")}return o},o.prototype.toString=function(){return ge(this.toArray())},o.prototype.toJSON=function(){return{mathjs:"SparseMatrix",values:this._values,index:this._index,ptr:this._ptr,size:this._size,datatype:this._datatype}},o.prototype.diagonal=function(t){if(t){if(or(t)&&(t=t.toNumber()),!nr(t)||!ie(t))throw new TypeError("The parameter k must be an integer number")}else t=0;var r=t>0?t:0,e=t<0?-t:0,n=this._size[0],i=this._size[1],u=Math.min(n-e,i-r),a=[],s=[],c=[];c[0]=0;for(var f=r;f<i&&a.length<u;f++)for(var l=this._ptr[f],p=this._ptr[f+1],h=l;h<p;h++){var y=this._index[h];if(y===f-r+e){a.push(this._values[h]),s[a.length-1]=y-e;break}}return c.push(a.length),new o({values:a,index:s,ptr:c,size:[u,1]})},o.fromJSON=function(t){return new o(t)},o.diagonal=function(t,n,i,u,a){if(!cr(t))throw new TypeError("Array expected, size parameter");if(2!==t.length)throw new Error("Only two dimensions matrix are supported");if(t=t.map((function(t){if(or(t)&&(t=t.toNumber()),!nr(t)||!ie(t)||t<1)throw new Error("Size values must be positive integers");return t})),i){if(or(i)&&(i=i.toNumber()),!nr(i)||!ie(i))throw new TypeError("The parameter k must be an integer number")}else i=0;var s=e,c=0;sr(a)&&(s=r.find(e,[a,a])||e,c=r.convert(0,a));var f,l=i>0?i:0,p=i<0?-i:0,h=t[0],y=t[1],d=Math.min(h-p,y-l);if(cr(n)){if(n.length!==d)throw new Error("Invalid value array length");f=function(t){return n[t]}}else if(fr(n)){var v=n.size();if(1!==v.length||v[0]!==d)throw new Error("Invalid matrix length");f=function(t){return n.get([t])}}else f=function(){return n};for(var g=[],m=[],D=[],w=0;w<y;w++){D.push(g.length);var b=w-l;if(b>=0&&b<d){var A=f(b);s(A,c)||(m.push(b+p),g.push(A))}}return D.push(g.length),new o({values:g,index:m,ptr:D,size:[h,y]})},o.prototype.swapRows=function(t,r){if(!(nr(t)&&ie(t)&&nr(r)&&ie(r)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return Ee(t,this._size[0]),Ee(r,this._size[0]),o._swapRows(t,r,this._size[1],this._values,this._index,this._ptr),this},o._forEachRow=function(t,r,e,n,o){for(var i=n[t],u=n[t+1],a=i;a<u;a++)o(e[a],r[a])},o._swapRows=function(t,r,e,n,o,i){for(var u=0;u<e;u++){var a=i[u],c=i[u+1],f=s(t,a,c,o),l=s(r,a,c,o);if(f<c&&l<c&&o[f]===t&&o[l]===r){if(n){var p=n[f];n[f]=n[l],n[l]=p}}else if(f<c&&o[f]===t&&(l>=c||o[l]!==r)){var h=n?n[f]:void 0;o.splice(l,0,r),n&&n.splice(l,0,h),o.splice(l<=f?f+1:f,1),n&&n.splice(l<=f?f+1:f,1)}else if(l<c&&o[l]===r&&(f>=c||o[f]!==t)){var y=n?n[l]:void 0;o.splice(f,0,t),n&&n.splice(f,0,y),o.splice(f<=l?l+1:l,1),n&&n.splice(f<=l?l+1:l,1)}}},o}),{isClass:!0});var hi=je("number",["typed"],(function(t){var r=t.typed,e=r("number",{"":function(){return 0},number:function(t){return t},string:function(t){if("NaN"===t)return NaN;var r,e,n=(e=(r=t).match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/))?{input:r,radix:{"0b":2,"0o":8,"0x":16}[e[1]],integerPart:e[2],fractionalPart:e[3]}:null;if(n)return function(t){for(var r=parseInt(t.integerPart,t.radix),e=0,n=0;n<t.fractionalPart.length;n++)e+=parseInt(t.fractionalPart[n],t.radix)/Math.pow(t.radix,n+1);var o=r+e;if(isNaN(o))throw new SyntaxError('String "'+t.input+'" is no valid number');return o}(n);var o=0,i=t.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);i&&(o=Number(i[2]),t=i[1]);var u=Number(t);if(isNaN(u))throw new SyntaxError('String "'+t+'" is no valid number');if(i){if(u>Math.pow(2,o)-1)throw new SyntaxError('String "'.concat(t,'" is out of range'));u>=Math.pow(2,o-1)&&(u-=Math.pow(2,o))}return u},BigNumber:function(t){return t.toNumber()},Fraction:function(t){return t.valueOf()},Unit:function(t){throw new Error("Second argument with valueless unit expected")},null:function(t){return 0},"Unit, string | Unit":function(t,r){return t.toNumber(r)},"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))});return e.fromJSON=function(t){return parseFloat(t.value)},e})),yi=je("bignumber",["typed","BigNumber"],(function(t){var r=t.typed,e=t.BigNumber;return r("bignumber",{"":function(){return new e(0)},number:function(t){return new e(t+"")},string:function(t){var r=t.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);if(r){var n=r[2],o=e(r[1]),i=new e(2).pow(Number(n));if(o.gt(i.sub(1)))throw new SyntaxError('String "'.concat(t,'" is out of range'));var u=new e(2).pow(Number(n)-1);return o.gte(u)?o.sub(i):o}return new e(t)},BigNumber:function(t){return t},Fraction:function(t){return new e(t.n).div(t.d).times(t.s)},null:function(t){return new e(0)},"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))})})),di=je("fraction",["typed","Fraction"],(function(t){var r=t.typed,e=t.Fraction;return r("fraction",{number:function(t){if(!isFinite(t)||isNaN(t))throw new Error(t+" cannot be represented as a fraction");return new e(t)},string:function(t){return new e(t)},"number, number":function(t,r){return new e(t,r)},null:function(t){return new e(0)},BigNumber:function(t){return new e(t.toString())},Fraction:function(t){return t},Object:function(t){return new e(t)},"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))})})),vi="matrix",gi=je(vi,["typed","Matrix","DenseMatrix","SparseMatrix"],(function(t){var r=t.typed;t.Matrix;var e=t.DenseMatrix,n=t.SparseMatrix;return r(vi,{"":function(){return o([])},string:function(t){return o([],t)},"string, string":function(t,r){return o([],t,r)},Array:function(t){return o(t)},Matrix:function(t){return o(t,t.storage())},"Array | Matrix, string":o,"Array | Matrix, string, string":o});function o(t,r,o){if("dense"===r||"default"===r||void 0===r)return new e(t,o);if("sparse"===r)return new n(t,o);throw new TypeError("Unknown matrix type "+JSON.stringify(r)+".")}})),mi="unaryMinus",Di=je(mi,["typed"],(function(t){var r=t.typed;return r(mi,{number:ri,"Complex | BigNumber | Fraction":function(t){return t.neg()},Unit:r.referToSelf((function(t){return function(e){var n=e.clone();return n.value=r.find(t,n.valueType())(e.value),n}})),"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))})})),wi=je("abs",["typed"],(function(t){var r=t.typed;return r("abs",{number:Xo,"Complex | BigNumber | Fraction | Unit":function(t){return t.abs()},"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))})})),bi="apply",Ai=je(bi,["typed","isInteger"],(function(t){var r=t.typed,e=t.isInteger;return r(bi,{"Array | Matrix, number | BigNumber, function":function(t,r,n){if(!e(r))throw new TypeError("Integer number expected for dimension");var o=Array.isArray(t)?be(t):t.size();if(r<0||r>=o.length)throw new we(r,o.length);return fr(t)?t.create(xi(t.valueOf(),r,n)):xi(t,r,n)}})}));function xi(t,r,e){var n,o,i;if(r<=0){if(Array.isArray(t[0])){for(i=function(t){var r,e,n=t.length,o=t[0].length,i=[];for(e=0;e<o;e++){var u=[];for(r=0;r<n;r++)u.push(t[r][e]);i.push(u)}return i}(t),o=[],n=0;n<i.length;n++)o[n]=xi(i[n],r-1,e);return o}return e(t)}for(o=[],n=0;n<t.length;n++)o[n]=xi(t[n],r-1,e);return o}var Ei="addScalar",Fi=je(Ei,["typed"],(function(t){var r=t.typed;return r(Ei,{"number, number":Qo,"Complex, Complex":function(t,r){return t.add(r)},"BigNumber, BigNumber":function(t,r){return t.plus(r)},"Fraction, Fraction":function(t,r){return t.add(r)},"Unit, Unit":r.referToSelf((function(t){return function(e,n){if(null===e.value||void 0===e.value)throw new Error("Parameter x contains a unit with undefined value");if(null===n.value||void 0===n.value)throw new Error("Parameter y contains a unit with undefined value");if(!e.equalBase(n))throw new Error("Units do not match");var o=e.clone();return o.value=r.find(t,[o.valueType(),n.valueType()])(o.value,n.value),o.fixPrefix=!1,o}}))})})),_i=je("matAlgo11xS0s",["typed","equalScalar"],(function(t){var r=t.typed,e=t.equalScalar;return function(t,n,o,i){var u=t._values,a=t._index,s=t._ptr,c=t._size,f=t._datatype;if(!u)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],h=c[1],y=e,d=0,v=o;"string"==typeof f&&(l=f,y=r.find(e,[l,l]),d=r.convert(0,l),n=r.convert(n,l),v=r.find(o,[l,l]));for(var g=[],m=[],D=[],w=0;w<h;w++){D[w]=m.length;for(var b=s[w],A=s[w+1],x=b;x<A;x++){var E=a[x],F=i?v(n,u[x]):v(u[x],n);y(F,d)||(m.push(E),g.push(F))}}return D[h]=m.length,t.createSparseMatrix({values:g,index:m,ptr:D,size:[p,h],datatype:l})}})),Ci=je("matAlgo12xSfs",["typed","DenseMatrix"],(function(t){var r=t.typed,e=t.DenseMatrix;return function(t,n,o,i){var u=t._values,a=t._index,s=t._ptr,c=t._size,f=t._datatype;if(!u)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],h=c[1],y=o;"string"==typeof f&&(l=f,n=r.convert(n,l),y=r.find(o,[l,l]));for(var d=[],v=[],g=[],m=0;m<h;m++){for(var D=m+1,w=s[m],b=s[m+1],A=w;A<b;A++){var x=a[A];v[x]=u[A],g[x]=D}for(var E=0;E<p;E++)0===m&&(d[E]=[]),g[E]===D?d[E][m]=i?y(n,v[E]):y(v[E],n):d[E][m]=i?y(n,0):y(0,n)}return new e({data:d,size:[p,h],datatype:l})}})),Si=je("matAlgo14xDs",["typed"],(function(t){var r=t.typed;return function(t,n,o,i){var u,a=t._data,s=t._size,c=t._datatype,f=o;"string"==typeof c&&(u=c,n=r.convert(n,u),f=r.find(o,[u,u]));var l=s.length>0?e(f,0,s,s[0],a,n,i):[];return t.createDenseMatrix({data:l,size:Lr(s),datatype:u})};function e(t,r,n,o,i,u,a){var s=[];if(r===n.length-1)for(var c=0;c<o;c++)s[c]=a?t(u,i[c]):t(i[c],u);else for(var f=0;f<o;f++)s[f]=e(t,r+1,n,n[r+1],i[f],u,a);return s}})),Bi=je("matAlgo01xDSid",["typed"],(function(t){var r=t.typed;return function(t,e,n,o){var i=t._data,u=t._size,a=t._datatype,s=e._values,c=e._index,f=e._ptr,l=e._size,p=e._datatype;if(u.length!==l.length)throw new De(u.length,l.length);if(u[0]!==l[0]||u[1]!==l[1])throw new RangeError("Dimension mismatch. Matrix A ("+u+") must match Matrix B ("+l+")");if(!s)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var h,y,d=u[0],v=u[1],g="string"==typeof a&&a===p?a:void 0,m=g?r.find(n,[g,g]):n,D=[];for(h=0;h<d;h++)D[h]=[];var w=[],b=[];for(y=0;y<v;y++){for(var A=y+1,x=f[y],E=f[y+1],F=x;F<E;F++)w[h=c[F]]=o?m(s[F],i[h][y]):m(i[h][y],s[F]),b[h]=A;for(h=0;h<d;h++)b[h]===A?D[h][y]=w[h]:D[h][y]=i[h][y]}return t.createDenseMatrix({data:D,size:[d,v],datatype:g})}})),Mi=je("matAlgo04xSidSid",["typed","equalScalar"],(function(t){var r=t.typed,e=t.equalScalar;return function(t,n,o){var i=t._values,u=t._index,a=t._ptr,s=t._size,c=t._datatype,f=n._values,l=n._index,p=n._ptr,h=n._size,y=n._datatype;if(s.length!==h.length)throw new De(s.length,h.length);if(s[0]!==h[0]||s[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+s+") must match Matrix B ("+h+")");var d,v=s[0],g=s[1],m=e,D=0,w=o;"string"==typeof c&&c===y&&(d=c,m=r.find(e,[d,d]),D=r.convert(0,d),w=r.find(o,[d,d]));var b,A,x,E,F,_=i&&f?[]:void 0,C=[],S=[],B=i&&f?[]:void 0,M=i&&f?[]:void 0,N=[],O=[];for(A=0;A<g;A++){S[A]=C.length;var P=A+1;for(E=a[A],F=a[A+1],x=E;x<F;x++)b=u[x],C.push(b),N[b]=P,B&&(B[b]=i[x]);for(E=p[A],F=p[A+1],x=E;x<F;x++)if(N[b=l[x]]===P){if(B){var j=w(B[b],f[x]);m(j,D)?N[b]=null:B[b]=j}}else C.push(b),O[b]=P,M&&(M[b]=f[x]);if(B&&M)for(x=S[A];x<C.length;)N[b=C[x]]===P?(_[x]=B[b],x++):O[b]===P?(_[x]=M[b],x++):C.splice(x,1)}return S[g]=C.length,t.createSparseMatrix({values:_,index:C,ptr:S,size:[v,g],datatype:d})}})),Ni=je("matAlgo10xSids",["typed","DenseMatrix"],(function(t){var r=t.typed,e=t.DenseMatrix;return function(t,n,o,i){var u=t._values,a=t._index,s=t._ptr,c=t._size,f=t._datatype;if(!u)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],h=c[1],y=o;"string"==typeof f&&(l=f,n=r.convert(n,l),y=r.find(o,[l,l]));for(var d=[],v=[],g=[],m=0;m<h;m++){for(var D=m+1,w=s[m],b=s[m+1],A=w;A<b;A++){var x=a[A];v[x]=u[A],g[x]=D}for(var E=0;E<p;E++)0===m&&(d[E]=[]),g[E]===D?d[E][m]=i?y(n,v[E]):y(v[E],n):d[E][m]=n}return new e({data:d,size:[p,h],datatype:l})}})),Oi=je("matAlgo13xDD",["typed"],(function(t){var r=t.typed;return function(t,n,o){var i,u=t._data,a=t._size,s=t._datatype,c=n._data,f=n._size,l=n._datatype,p=[];if(a.length!==f.length)throw new De(a.length,f.length);for(var h=0;h<a.length;h++){if(a[h]!==f[h])throw new RangeError("Dimension mismatch. Matrix A ("+a+") must match Matrix B ("+f+")");p[h]=a[h]}var y=o;"string"==typeof s&&s===l&&(i=s,y=r.find(o,[i,i]));var d=p.length>0?e(y,0,p,p[0],u,c):[];return t.createDenseMatrix({data:d,size:p,datatype:i})};function e(t,r,n,o,i,u){var a=[];if(r===n.length-1)for(var s=0;s<o;s++)a[s]=t(i[s],u[s]);else for(var c=0;c<o;c++)a[c]=e(t,r+1,n,n[r+1],i[c],u[c]);return a}})),Pi=je("matrixAlgorithmSuite",["typed","matrix"],(function(t){var r=t.typed,e=t.matrix,n=Oi({typed:r}),o=Si({typed:r});return function(t){var i,u=t.elop,a=t.SD||t.DS;u?(i={"DenseMatrix, DenseMatrix":function(t,r){return n(t,r,u)},"Array, Array":function(t,r){return n(e(t),e(r),u).valueOf()},"Array, DenseMatrix":function(t,r){return n(e(t),r,u)},"DenseMatrix, Array":function(t,r){return n(t,e(r),u)}},t.SS&&(i["SparseMatrix, SparseMatrix"]=function(r,e){return t.SS(r,e,u,!1)}),t.DS&&(i["DenseMatrix, SparseMatrix"]=function(r,e){return t.DS(r,e,u,!1)},i["Array, SparseMatrix"]=function(r,n){return t.DS(e(r),n,u,!1)}),a&&(i["SparseMatrix, DenseMatrix"]=function(t,r){return a(r,t,u,!0)},i["SparseMatrix, Array"]=function(t,r){return a(e(r),t,u,!0)})):(i={"DenseMatrix, DenseMatrix":r.referToSelf((function(t){return function(r,e){return n(r,e,t)}})),"Array, Array":r.referToSelf((function(t){return function(r,o){return n(e(r),e(o),t).valueOf()}})),"Array, DenseMatrix":r.referToSelf((function(t){return function(r,o){return n(e(r),o,t)}})),"DenseMatrix, Array":r.referToSelf((function(t){return function(r,o){return n(r,e(o),t)}}))},t.SS&&(i["SparseMatrix, SparseMatrix"]=r.referToSelf((function(r){return function(e,n){return t.SS(e,n,r,!1)}}))),t.DS&&(i["DenseMatrix, SparseMatrix"]=r.referToSelf((function(r){return function(e,n){return t.DS(e,n,r,!1)}})),i["Array, SparseMatrix"]=r.referToSelf((function(r){return function(n,o){return t.DS(e(n),o,r,!1)}}))),a&&(i["SparseMatrix, DenseMatrix"]=r.referToSelf((function(t){return function(r,e){return a(e,r,t,!0)}})),i["SparseMatrix, Array"]=r.referToSelf((function(t){return function(r,n){return a(e(n),r,t,!0)}}))));var s=t.scalar||"any";(t.Ds||t.Ss)&&(u?(i["DenseMatrix,"+s]=function(t,r){return o(t,r,u,!1)},i[s+", DenseMatrix"]=function(t,r){return o(r,t,u,!0)},i["Array,"+s]=function(t,r){return o(e(t),r,u,!1).valueOf()},i[s+", Array"]=function(t,r){return o(e(r),t,u,!0).valueOf()}):(i["DenseMatrix,"+s]=r.referToSelf((function(t){return function(r,e){return o(r,e,t,!1)}})),i[s+", DenseMatrix"]=r.referToSelf((function(t){return function(r,e){return o(e,r,t,!0)}})),i["Array,"+s]=r.referToSelf((function(t){return function(r,n){return o(e(r),n,t,!1).valueOf()}})),i[s+", Array"]=r.referToSelf((function(t){return function(r,n){return o(e(n),r,t,!0).valueOf()}}))));var c=void 0!==t.sS?t.sS:t.Ss;return u?(t.Ss&&(i["SparseMatrix,"+s]=function(r,e){return t.Ss(r,e,u,!1)}),c&&(i[s+", SparseMatrix"]=function(t,r){return c(r,t,u,!0)})):(t.Ss&&(i["SparseMatrix,"+s]=r.referToSelf((function(r){return function(e,n){return t.Ss(e,n,r,!1)}}))),c&&(i[s+", SparseMatrix"]=r.referToSelf((function(t){return function(r,e){return c(e,r,t,!0)}})))),u&&u.signatures&&Gr(i,u.signatures),i}})),ji=je("matAlgo03xDSf",["typed"],(function(t){var r=t.typed;return function(t,e,n,o){var i=t._data,u=t._size,a=t._datatype,s=e._values,c=e._index,f=e._ptr,l=e._size,p=e._datatype;if(u.length!==l.length)throw new De(u.length,l.length);if(u[0]!==l[0]||u[1]!==l[1])throw new RangeError("Dimension mismatch. Matrix A ("+u+") must match Matrix B ("+l+")");if(!s)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var h,y=u[0],d=u[1],v=0,g=n;"string"==typeof a&&a===p&&(h=a,v=r.convert(0,h),g=r.find(n,[h,h]));for(var m=[],D=0;D<y;D++)m[D]=[];for(var w=[],b=[],A=0;A<d;A++){for(var x=A+1,E=f[A],F=f[A+1],_=E;_<F;_++){var C=c[_];w[C]=o?g(s[_],i[C][A]):g(i[C][A],s[_]),b[C]=x}for(var S=0;S<y;S++)b[S]===x?m[S][A]=w[S]:m[S][A]=o?g(v,i[S][A]):g(i[S][A],v)}return t.createDenseMatrix({data:m,size:[y,d],datatype:h})}})),Ti=je("matAlgo05xSfSf",["typed","equalScalar"],(function(t){var r=t.typed,e=t.equalScalar;return function(t,n,o){var i=t._values,u=t._index,a=t._ptr,s=t._size,c=t._datatype,f=n._values,l=n._index,p=n._ptr,h=n._size,y=n._datatype;if(s.length!==h.length)throw new De(s.length,h.length);if(s[0]!==h[0]||s[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+s+") must match Matrix B ("+h+")");var d,v=s[0],g=s[1],m=e,D=0,w=o;"string"==typeof c&&c===y&&(d=c,m=r.find(e,[d,d]),D=r.convert(0,d),w=r.find(o,[d,d]));var b,A,x,E,F=i&&f?[]:void 0,_=[],C=[],S=F?[]:void 0,B=F?[]:void 0,M=[],N=[];for(A=0;A<g;A++){C[A]=_.length;var O=A+1;for(x=a[A],E=a[A+1];x<E;x++)b=u[x],_.push(b),M[b]=O,S&&(S[b]=i[x]);for(x=p[A],E=p[A+1];x<E;x++)M[b=l[x]]!==O&&_.push(b),N[b]=O,B&&(B[b]=f[x]);if(F)for(x=C[A];x<_.length;){var P=M[b=_[x]],j=N[b];if(P===O||j===O){var T=w(P===O?S[b]:D,j===O?B[b]:D);m(T,D)?_.splice(x,1):(F.push(T),x++)}}}return C[g]=_.length,t.createSparseMatrix({values:F,index:_,ptr:C,size:[v,g],datatype:d})}})),Ii=je("multiplyScalar",["typed"],(function(t){return(0,t.typed)("multiplyScalar",{"number, number":ti,"Complex, Complex":function(t,r){return t.mul(r)},"BigNumber, BigNumber":function(t,r){return t.times(r)},"Fraction, Fraction":function(t,r){return t.mul(r)},"number | Fraction | BigNumber | Complex, Unit":function(t,r){return r.multiply(t)},"Unit, number | Fraction | BigNumber | Complex | Unit":function(t,r){return t.multiply(r)}})})),ki="multiply",Ri=je(ki,["typed","matrix","addScalar","multiplyScalar","equalScalar","dot"],(function(t){var r=t.typed,e=t.matrix,n=t.addScalar,o=t.multiplyScalar,i=t.equalScalar,u=t.dot,a=_i({typed:r,equalScalar:i}),s=Si({typed:r});function c(t,r){switch(t.length){case 1:switch(r.length){case 1:if(t[0]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");break;case 2:if(t[0]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Vector length ("+t[0]+") must match Matrix rows ("+r[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+r.length+" dimensions)")}break;case 2:switch(r.length){case 1:if(t[1]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Matrix columns ("+t[1]+") must match Vector length ("+r[0]+")");break;case 2:if(t[1]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Matrix A columns ("+t[1]+") must match Matrix B rows ("+r[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+r.length+" dimensions)")}break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has "+t.length+" dimensions)")}}function f(t,e){if("dense"!==e.storage())throw new Error("Support for SparseMatrix not implemented");return function(t,e){var i,u=t._data,a=t._size,s=t._datatype,c=e._data,f=e._size,l=e._datatype,p=a[0],h=f[1],y=n,d=o;s&&l&&s===l&&"string"==typeof s&&(i=s,y=r.find(n,[i,i]),d=r.find(o,[i,i]));for(var v=[],g=0;g<h;g++){for(var m=d(u[0],c[0][g]),D=1;D<p;D++)m=y(m,d(u[D],c[D][g]));v[g]=m}return t.createDenseMatrix({data:v,size:[h],datatype:i})}(t,e)}var l=r("_multiplyMatrixVector",{"DenseMatrix, any":function(t,e){var i,u=t._data,a=t._size,s=t._datatype,c=e._data,f=e._datatype,l=a[0],p=a[1],h=n,y=o;s&&f&&s===f&&"string"==typeof s&&(i=s,h=r.find(n,[i,i]),y=r.find(o,[i,i]));for(var d=[],v=0;v<l;v++){for(var g=u[v],m=y(g[0],c[0]),D=1;D<p;D++)m=h(m,y(g[D],c[D]));d[v]=m}return t.createDenseMatrix({data:d,size:[l],datatype:i})},"SparseMatrix, any":function(t,e){var u=t._values,a=t._index,s=t._ptr,c=t._datatype;if(!u)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var f,l=e._data,p=e._datatype,h=t._size[0],y=e._size[0],d=[],v=[],g=[],m=n,D=o,w=i,b=0;c&&p&&c===p&&"string"==typeof c&&(f=c,m=r.find(n,[f,f]),D=r.find(o,[f,f]),w=r.find(i,[f,f]),b=r.convert(0,f));var A=[],x=[];g[0]=0;for(var E=0;E<y;E++){var F=l[E];if(!w(F,b))for(var _=s[E],C=s[E+1],S=_;S<C;S++){var B=a[S];x[B]?A[B]=m(A[B],D(F,u[S])):(x[B]=!0,v.push(B),A[B]=D(F,u[S]))}}for(var M=v.length,N=0;N<M;N++){var O=v[N];d[N]=A[O]}return g[1]=v.length,t.createSparseMatrix({values:d,index:v,ptr:g,size:[h,1],datatype:f})}}),p=r("_multiplyMatrixMatrix",{"DenseMatrix, DenseMatrix":function(t,e){var i,u=t._data,a=t._size,s=t._datatype,c=e._data,f=e._size,l=e._datatype,p=a[0],h=a[1],y=f[1],d=n,v=o;s&&l&&s===l&&"string"==typeof s&&(i=s,d=r.find(n,[i,i]),v=r.find(o,[i,i]));for(var g=[],m=0;m<p;m++){var D=u[m];g[m]=[];for(var w=0;w<y;w++){for(var b=v(D[0],c[0][w]),A=1;A<h;A++)b=d(b,v(D[A],c[A][w]));g[m][w]=b}}return t.createDenseMatrix({data:g,size:[p,y],datatype:i})},"DenseMatrix, SparseMatrix":function(t,e){var u=t._data,a=t._size,s=t._datatype,c=e._values,f=e._index,l=e._ptr,p=e._size,h=e._datatype;if(!c)throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");var y,d=a[0],v=p[1],g=n,m=o,D=i,w=0;s&&h&&s===h&&"string"==typeof s&&(y=s,g=r.find(n,[y,y]),m=r.find(o,[y,y]),D=r.find(i,[y,y]),w=r.convert(0,y));for(var b=[],A=[],x=[],E=e.createSparseMatrix({values:b,index:A,ptr:x,size:[d,v],datatype:y}),F=0;F<v;F++){x[F]=A.length;var _=l[F],C=l[F+1];if(C>_)for(var S=0,B=0;B<d;B++){for(var M=B+1,N=void 0,O=_;O<C;O++){var P=f[O];S!==M?(N=m(u[B][P],c[O]),S=M):N=g(N,m(u[B][P],c[O]))}S!==M||D(N,w)||(A.push(B),b.push(N))}}return x[v]=A.length,E},"SparseMatrix, DenseMatrix":function(t,e){var u=t._values,a=t._index,s=t._ptr,c=t._datatype;if(!u)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var f,l=e._data,p=e._datatype,h=t._size[0],y=e._size[0],d=e._size[1],v=n,g=o,m=i,D=0;c&&p&&c===p&&"string"==typeof c&&(f=c,v=r.find(n,[f,f]),g=r.find(o,[f,f]),m=r.find(i,[f,f]),D=r.convert(0,f));for(var w=[],b=[],A=[],x=t.createSparseMatrix({values:w,index:b,ptr:A,size:[h,d],datatype:f}),E=[],F=[],_=0;_<d;_++){A[_]=b.length;for(var C=_+1,S=0;S<y;S++){var B=l[S][_];if(!m(B,D))for(var M=s[S],N=s[S+1],O=M;O<N;O++){var P=a[O];F[P]!==C?(F[P]=C,b.push(P),E[P]=g(B,u[O])):E[P]=v(E[P],g(B,u[O]))}}for(var j=A[_],T=b.length,I=j;I<T;I++){var k=b[I];w[I]=E[k]}}return A[d]=b.length,x},"SparseMatrix, SparseMatrix":function(t,e){var i,u=t._values,a=t._index,s=t._ptr,c=t._datatype,f=e._values,l=e._index,p=e._ptr,h=e._datatype,y=t._size[0],d=e._size[1],v=u&&f,g=n,m=o;c&&h&&c===h&&"string"==typeof c&&(i=c,g=r.find(n,[i,i]),m=r.find(o,[i,i]));for(var D,w,b,A,x,E,F,_,C=v?[]:void 0,S=[],B=[],M=t.createSparseMatrix({values:C,index:S,ptr:B,size:[y,d],datatype:i}),N=v?[]:void 0,O=[],P=0;P<d;P++){B[P]=S.length;var j=P+1;for(x=p[P],E=p[P+1],A=x;A<E;A++)if(_=l[A],v)for(w=s[_],b=s[_+1],D=w;D<b;D++)F=a[D],O[F]!==j?(O[F]=j,S.push(F),N[F]=m(f[A],u[D])):N[F]=g(N[F],m(f[A],u[D]));else for(w=s[_],b=s[_+1],D=w;D<b;D++)F=a[D],O[F]!==j&&(O[F]=j,S.push(F));if(v)for(var T=B[P],I=S.length,k=T;k<I;k++){var R=S[k];C[k]=N[R]}}return B[d]=S.length,M}});return r(ki,o,{"Array, Array":r.referTo("Matrix, Matrix",(function(t){return function(r,n){c(be(r),be(n));var o=t(e(r),e(n));return fr(o)?o.valueOf():o}})),"Matrix, Matrix":function(t,r){var e=t.size(),n=r.size();return c(e,n),1===e.length?1===n.length?function(t,r,e){if(0===e)throw new Error("Cannot multiply two empty vectors");return u(t,r)}(t,r,e[0]):f(t,r):1===n.length?l(t,r):p(t,r)},"Matrix, Array":r.referTo("Matrix,Matrix",(function(t){return function(r,n){return t(r,e(n))}})),"Array, Matrix":r.referToSelf((function(t){return function(r,n){return t(e(r,n.storage()),n)}})),"SparseMatrix, any":function(t,r){return a(t,r,o,!1)},"DenseMatrix, any":function(t,r){return s(t,r,o,!1)},"any, SparseMatrix":function(t,r){return a(r,t,o,!0)},"any, DenseMatrix":function(t,r){return s(r,t,o,!0)},"Array, any":function(t,r){return s(e(t),r,o,!1).valueOf()},"any, Array":function(t,r){return s(e(r),t,o,!0).valueOf()},"any, any":o,"any, any, ...any":r.referToSelf((function(t){return function(r,e,n){for(var o=t(r,e),i=0;i<n.length;i++)o=t(o,n[i]);return o}}))})})),zi=je("sqrt",["config","typed","Complex"],(function(t){var r=t.config,e=t.typed,n=t.Complex;return e("sqrt",{number:o,Complex:function(t){return t.sqrt()},BigNumber:function(t){return!t.isNegative()||r.predictable?t.sqrt():o(t.toNumber())},Unit:function(t){return t.pow(.5)}});function o(t){return isNaN(t)?NaN:t>=0||r.predictable?Math.sqrt(t):new n(t,0).sqrt()}})),Ui="subtract",Wi=je(Ui,["typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix"],(function(t){var r=t.typed,e=t.matrix,n=t.equalScalar;t.addScalar,t.unaryMinus;var o=t.DenseMatrix,i=Bi({typed:r}),u=ji({typed:r}),a=Ti({typed:r,equalScalar:n}),s=Ni({typed:r,DenseMatrix:o}),c=Ci({typed:r,DenseMatrix:o}),f=Pi({typed:r,matrix:e});return r(Ui,{"number, number":function(t,r){return t-r},"Complex, Complex":function(t,r){return t.sub(r)},"BigNumber, BigNumber":function(t,r){return t.minus(r)},"Fraction, Fraction":function(t,r){return t.sub(r)},"Unit, Unit":r.referToSelf((function(t){return function(e,n){if(null===e.value)throw new Error("Parameter x contains a unit with undefined value");if(null===n.value)throw new Error("Parameter y contains a unit with undefined value");if(!e.equalBase(n))throw new Error("Units do not match");var o=e.clone();return o.value=r.find(t,[o.valueType(),n.valueType()])(o.value,n.value),o.fixPrefix=!1,o}}))},f({SS:a,DS:i,SD:u,Ss:c,sS:s}))})),qi="conj",Li=je(qi,["typed"],(function(t){var r=t.typed;return r(qi,{"number | BigNumber | Fraction":function(t){return t},Complex:function(t){return t.conjugate()},"Array | Matrix":r.referToSelf((function(t){return function(r){return Zo(r,t)}}))})})),$i="identity",Gi=je($i,["typed","config","matrix","BigNumber","DenseMatrix","SparseMatrix"],(function(t){var r=t.typed,e=t.config,n=t.matrix,o=t.BigNumber,i=t.DenseMatrix,u=t.SparseMatrix;return r($i,{"":function(){return"Matrix"===e.matrix?n([]):[]},string:function(t){return n(t)},"number | BigNumber":function(t){return s(t,t,"Matrix"===e.matrix?"dense":void 0)},"number | BigNumber, string":function(t,r){return s(t,t,r)},"number | BigNumber, number | BigNumber":function(t,r){return s(t,r,"Matrix"===e.matrix?"dense":void 0)},"number | BigNumber, number | BigNumber, string":function(t,r,e){return s(t,r,e)},Array:function(t){return a(t)},"Array, string":function(t,r){return a(t,r)},Matrix:function(t){return a(t.valueOf(),t.storage())},"Matrix, string":function(t,r){return a(t.valueOf(),r)}});function a(t,r){switch(t.length){case 0:return r?n(r):[];case 1:return s(t[0],t[0],r);case 2:return s(t[0],t[1],r);default:throw new Error("Vector containing two values expected")}}function s(t,r,e){var n=or(t)||or(r)?o:null;if(or(t)&&(t=t.toNumber()),or(r)&&(r=r.toNumber()),!ie(t)||t<1)throw new Error("Parameters in function identity must be positive integers");if(!ie(r)||r<1)throw new Error("Parameters in function identity must be positive integers");var a=n?new o(1):1,s=n?new n(0):0,c=[t,r];if(e){if("sparse"===e)return u.diagonal(c,a,0,s);if("dense"===e)return i.diagonal(c,a,0,s);throw new TypeError('Unknown matrix type "'.concat(e,'"'))}for(var f=Fe([],c,s),l=t<r?t:r,p=0;p<l;p++)f[p][p]=a;return f}})),Zi=je("map",["typed"],(function(t){return(0,t.typed)("map",{"Array, function":Vi,"Matrix, function":function(t,r){return t.map(r)}})}));function Vi(t,r){var e=Lo(r);return function n(o,i){if(Array.isArray(o))return o.map((function(t,r){return n(t,i.concat(r))}));try{return 1===e?r(o):2===e?r(o,i):r(o,i,t)}catch(r){if(r instanceof TypeError&&"data"in r&&"wrongType"===r.data.category){var u="map attempted to call '".concat(r.data.fn,"(").concat(o),a=JSON.stringify(i);throw 2===e?u+=","+a:1!==e&&(u+=",".concat(a,",").concat(t)),u+=")' but argument ".concat(r.data.index+1," of type "),u+="".concat(r.data.actual," does not match expected type "),u+=r.data.expected.join(" or "),new TypeError(u)}throw r}}(t,[])}function Ji(){throw new Error('No "bignumber" implementation available')}function Hi(){throw new Error('No "fraction" implementation available')}function Yi(t,r,e,n){if(!(this instanceof Yi))throw new SyntaxError("Constructor must be called with the new operator");this.fn=t,this.count=r,this.min=e,this.max=n,this.message="Wrong number of arguments in function "+t+" ("+r+" provided, "+e+(null!=n?"-"+n:"")+" expected)",this.stack=(new Error).stack}Yi.prototype=new Error,Yi.prototype.constructor=Error,Yi.prototype.name="ArgumentsError",Yi.prototype.isArgumentsError=!0;var Ki="size",Xi=je(Ki,["typed","config","?matrix"],(function(t){var r=t.typed,e=t.config,n=t.matrix;return r(Ki,{Matrix:function(t){return t.create(t.size())},Array:be,string:function(t){return"Array"===e.matrix?[t.length]:n([t.length])},"number | Complex | BigNumber | Unit | boolean | null":function(t){return"Array"===e.matrix?[]:n?n([]):function(){throw new Error('No "matrix" implementation available')}()}})}));function Qi(t,r,e){var n;return-1!==String(t).indexOf("Unexpected type")?(n=arguments.length>2?" (type: "+qr(e)+", value: "+JSON.stringify(e)+")":" (type: "+t.data.actual+")",new TypeError("Cannot calculate "+r+", unexpected type of argument"+n)):-1!==String(t).indexOf("complex numbers")?(n=arguments.length>2?" (type: "+qr(e)+", value: "+JSON.stringify(e)+")":"",new TypeError("Cannot calculate "+r+", no ordering relation is defined for complex numbers"+n)):t}je("bin",["typed","format"],(function(t){var r=t.typed,e=t.format;return r("bin",{"number | BigNumber":function(t){return e(t,{notation:"bin"})},"number | BigNumber, number":function(t,r){return e(t,{notation:"bin",wordSize:r})}})}));je("oct",["typed","format"],(function(t){var r=t.typed,e=t.format;return r("oct",{"number | BigNumber":function(t){return e(t,{notation:"oct"})},"number | BigNumber, number":function(t,r){return e(t,{notation:"oct",wordSize:r})}})}));je("hex",["typed","format"],(function(t){var r=t.typed,e=t.format;return r("hex",{"number | BigNumber":function(t){return e(t,{notation:"hex"})},"number | BigNumber, number":function(t,r){return e(t,{notation:"hex",wordSize:r})}})}));var tu=je("numeric",["number","?bignumber","?fraction"],(function(t){var r=t.number,e=t.bignumber,n=t.fraction,o={string:!0,number:!0,BigNumber:!0,Fraction:!0},i={number:function(t){return r(t)},BigNumber:e?function(t){return e(t)}:Ji,Fraction:n?function(t){return n(t)}:Hi};return function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"number",e=arguments.length>2?arguments[2]:void 0;if(void 0!==e)throw new SyntaxError("numeric() takes one or two arguments");var n=qr(t);if(!(n in o))throw new TypeError("Cannot convert "+t+' of type "'+n+'"; valid input types are '+Object.keys(o).join(", "));if(!(r in i))throw new TypeError("Cannot convert "+t+' to type "'+r+'"; valid output types are '+Object.keys(i).join(", "));return r===n?t:i[r](t)}})),ru="divideScalar",eu=je(ru,["typed","numeric"],(function(t){var r=t.typed;return t.numeric,r(ru,{"number, number":function(t,r){return t/r},"Complex, Complex":function(t,r){return t.div(r)},"BigNumber, BigNumber":function(t,r){return t.div(r)},"Fraction, Fraction":function(t,r){return t.div(r)},"Unit, number | Complex | Fraction | BigNumber | Unit":function(t,r){return t.divide(r)},"number | Fraction | Complex | BigNumber, Unit":function(t,r){return r.divideInto(t)}})})),nu="equal";je(nu,["typed","equalScalar"],(function(t){var r=t.typed,e=t.equalScalar;return r(nu,{"any, any":function(t,r){return null===t?null===r:null===r?null===t:void 0===t?void 0===r:void 0===r?void 0===t:e(t,r)}})}));var ou="unequal";je(ou,["typed","equalScalar"],(function(t){var r=t.typed,e=t.equalScalar;return r(ou,{"any, any":function(t,r){return null===t?null!==r:null===r?null!==t:void 0===t?void 0!==r:void 0===r?void 0!==t:!e(t,r)}})}));var iu={exports:{}},uu={exports:{}};!function(t){function r(e){return t.exports=r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t.exports.__esModule=!0,t.exports.default=t.exports,r(e)}t.exports=r,t.exports.__esModule=!0,t.exports.default=t.exports}(uu);var au={exports:{}};!function(t){var r=uu.exports.default;t.exports=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,e||"default");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)},t.exports.__esModule=!0,t.exports.default=t.exports}(au),function(t){var r=uu.exports.default,e=au.exports;t.exports=function(t){var n=e(t,"string");return"symbol"===r(n)?n:String(n)},t.exports.__esModule=!0,t.exports.default=t.exports}(iu),function(t){var r=iu.exports;t.exports=function(t,e,n){return(e=r(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},t.exports.__esModule=!0,t.exports.default=t.exports}({exports:{}}),qo((function(t){return new t(1).exp()}),{hasher:cu}),qo((function(t){return new t(1).plus(new t(5).sqrt()).div(2)}),{hasher:cu});var su=qo((function(t){return t.acos(-1)}),{hasher:cu});function cu(t){return t[0].precision}qo((function(t){return su(t).times(2)}),{hasher:cu});var fu=je("add",["typed","matrix","addScalar","equalScalar","DenseMatrix","SparseMatrix"],(function(t){var r=t.typed,e=t.matrix,n=t.addScalar,o=t.equalScalar,i=t.DenseMatrix;t.SparseMatrix;var u=Bi({typed:r}),a=Mi({typed:r,equalScalar:o}),s=Ni({typed:r,DenseMatrix:i}),c=Pi({typed:r,matrix:e});return r("add",{"any, any":n,"any, any, ...any":r.referToSelf((function(t){return function(r,e,n){for(var o=t(r,e),i=0;i<n.length;i++)o=t(o,n[i]);return o}}))},c({elop:n,DS:u,SS:a,Ss:s}))})),lu=je("dot",["typed","addScalar","multiplyScalar","conj","size"],(function(t){var r=t.typed,e=t.addScalar,n=t.multiplyScalar,o=t.conj,i=t.size;return r("dot",{"Array | DenseMatrix, Array | DenseMatrix":function(t,i){var s=u(t,i),c=fr(t)?t._data:t,f=fr(t)?t._datatype:void 0,l=fr(i)?i._data:i,p=fr(i)?i._datatype:void 0,h=2===a(t).length,y=2===a(i).length,d=e,v=n;if(f&&p&&f===p&&"string"==typeof f){var g=f;d=r.find(e,[g,g]),v=r.find(n,[g,g])}if(!h&&!y){for(var m=v(o(c[0]),l[0]),D=1;D<s;D++)m=d(m,v(o(c[D]),l[D]));return m}if(!h&&y){for(var w=v(o(c[0]),l[0][0]),b=1;b<s;b++)w=d(w,v(o(c[b]),l[b][0]));return w}if(h&&!y){for(var A=v(o(c[0][0]),l[0]),x=1;x<s;x++)A=d(A,v(o(c[x][0]),l[x]));return A}if(h&&y){for(var E=v(o(c[0][0]),l[0][0]),F=1;F<s;F++)E=d(E,v(o(c[F][0]),l[F][0]));return E}},"SparseMatrix, SparseMatrix":function(t,r){u(t,r);var o=t._index,i=t._values,a=r._index,s=r._values,c=0,f=e,l=n,p=0,h=0;for(;p<o.length&&h<a.length;){var y=o[p],d=a[h];y<d?p++:y>d?h++:y===d&&(c=f(c,l(i[p],s[h])),p++,h++)}return c}});function u(t,r){var e,n,o=a(t),i=a(r);if(1===o.length)e=o[0];else{if(2!==o.length||1!==o[1])throw new RangeError("Expected a column vector, instead got a matrix of size ("+o.join(", ")+")");e=o[0]}if(1===i.length)n=i[0];else{if(2!==i.length||1!==i[1])throw new RangeError("Expected a column vector, instead got a matrix of size ("+i.join(", ")+")");n=i[0]}if(e!==n)throw new RangeError("Vectors must have equal length ("+e+" != "+n+")");if(0===e)throw new RangeError("Cannot calculate the dot product of empty vectors");return e}function a(t){return fr(t)?t.size():i(t)}})),pu=je("det",["typed","matrix","subtract","multiply","divideScalar","isZero","unaryMinus"],(function(t){var r=t.typed,e=t.matrix,n=t.subtract,o=t.multiply,i=t.divideScalar,u=t.isZero,a=t.unaryMinus;return r("det",{any:function(t){return Lr(t)},"Array | Matrix":function(t){var r;switch((r=fr(t)?t.size():Array.isArray(t)?(t=e(t)).size():[]).length){case 0:return Lr(t);case 1:if(1===r[0])return Lr(t.valueOf()[0]);throw new RangeError("Matrix must be square (size: "+ge(r)+")");case 2:var s=r[0];if(s===r[1])return function(t,r,e){if(1===r)return Lr(t[0][0]);if(2===r)return n(o(t[0][0],t[1][1]),o(t[1][0],t[0][1]));for(var s=!1,c=new Array(r).fill(0).map((function(t,r){return r})),f=0;f<r;f++){var l=c[f];if(u(t[l][f])){var p=void 0;for(p=f+1;p<r;p++)if(!u(t[c[p]][f])){l=c[p],c[p]=c[f],c[f]=l,s=!s;break}if(p===r)return t[l][f]}for(var h=t[l][f],y=0===f?1:t[c[f-1]][f-1],d=f+1;d<r;d++)for(var v=c[d],g=f+1;g<r;g++)t[v][g]=i(n(o(t[v][g],h),o(t[v][f],t[l][g])),y)}var m=t[c[r-1]][r-1];return s?a(m):m}(t.clone().valueOf(),s);throw new RangeError("Matrix must be square (size: "+ge(r)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+ge(r)+")")}}})})),hu=je("inv",["typed","matrix","divideScalar","addScalar","multiply","unaryMinus","det","identity","abs"],(function(t){var r=t.typed,e=t.matrix,n=t.divideScalar,o=t.addScalar,i=t.multiply,u=t.unaryMinus,a=t.det,s=t.identity,c=t.abs;return r("inv",{"Array | Matrix":function(t){var r=fr(t)?t.size():be(t);switch(r.length){case 1:if(1===r[0])return fr(t)?e([n(1,t.valueOf()[0])]):[n(1,t[0])];throw new RangeError("Matrix must be square (size: "+ge(r)+")");case 2:var o=r[0],i=r[1];if(o===i)return fr(t)?e(f(t.valueOf(),o,i),t.storage()):f(t,o,i);throw new RangeError("Matrix must be square (size: "+ge(r)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+ge(r)+")")}},any:function(t){return n(1,t)}});function f(t,r,e){var f,l,p,h,y;if(1===r){if(0===(h=t[0][0]))throw Error("Cannot calculate inverse, determinant is zero");return[[n(1,h)]]}if(2===r){var d=a(t);if(0===d)throw Error("Cannot calculate inverse, determinant is zero");return[[n(t[1][1],d),n(u(t[0][1]),d)],[n(u(t[1][0]),d),n(t[0][0],d)]]}var v=t.concat();for(f=0;f<r;f++)v[f]=v[f].concat();for(var g=s(r).valueOf(),m=0;m<e;m++){var D=c(v[m][m]),w=m;for(f=m+1;f<r;)c(v[f][m])>D&&(D=c(v[f][m]),w=f),f++;if(0===D)throw Error("Cannot calculate inverse, determinant is zero");(f=w)!==m&&(y=v[m],v[m]=v[f],v[f]=y,y=g[m],g[m]=g[f],g[f]=y);var b=v[m],A=g[m];for(f=0;f<r;f++){var x=v[f],E=g[f];if(f!==m){if(0!==x[m]){for(p=n(u(x[m]),b[m]),l=m;l<e;l++)x[l]=o(x[l],i(p,b[l]));for(l=0;l<e;l++)E[l]=o(E[l],i(p,A[l]))}}else{for(p=b[m],l=m;l<e;l++)x[l]=n(x[l],p);for(l=0;l<e;l++)E[l]=n(E[l],p)}}}return g}})),yu=je("divide",["typed","matrix","multiply","equalScalar","divideScalar","inv"],(function(t){var r=t.typed,e=t.matrix,n=t.multiply,o=t.equalScalar,i=t.divideScalar,u=t.inv,a=_i({typed:r,equalScalar:o}),s=Si({typed:r});return r("divide",Gr({"Array | Matrix, Array | Matrix":function(t,r){return n(t,u(r))},"DenseMatrix, any":function(t,r){return s(t,r,i,!1)},"SparseMatrix, any":function(t,r){return a(t,r,i,!1)},"Array, any":function(t,r){return s(e(t),r,i,!1).valueOf()},"any, Array | Matrix":function(t,r){return n(t,u(r))}},i.signatures))})),du="mean",vu=je(du,["typed","add","divide"],(function(t){var r=t.typed,e=t.add,n=t.divide;return r(du,{"Array | Matrix":o,"Array | Matrix, number | BigNumber":function(t,r){try{var o=function(t,r,e){var n=Array.isArray(t)?be(t):t.size();if(r<0||r>=n.length)throw new we(r,n.length);return fr(t)?t.create(Vo(t.valueOf(),r,e)):Vo(t,r,e)}(t,r,e),i=Array.isArray(t)?be(t):t.size();return n(o,i[r])}catch(t){throw Qi(t,"mean")}},"...":function(t){if(function(t){for(var r=0;r<t.length;r++)if(lr(t[r]))return!0;return!1}(t))throw new TypeError("Scalar values expected in function mean");return o(t)}});function o(t){var r,o=0;if(Go(t,(function(t){try{r=void 0===r?t:e(r,t),o++}catch(r){throw Qi(r,"mean",t)}})),0===o)throw new Error("Cannot calculate the mean of an empty array");return n(r,o)}})),gu="unbiased",mu="variance",Du=je(mu,["typed","add","subtract","multiply","divide","apply","isNaN"],(function(t){var r=t.typed,e=t.add,n=t.subtract,o=t.multiply,i=t.divide,u=t.apply,a=t.isNaN;return r(mu,{"Array | Matrix":function(t){return s(t,gu)},"Array | Matrix, string":s,"Array | Matrix, number | BigNumber":function(t,r){return c(t,r,gu)},"Array | Matrix, number | BigNumber, string":c,"...":function(t){return s(t,gu)}});function s(t,r){var u,s=0;if(0===t.length)throw new SyntaxError("Function variance requires one or more parameters (0 provided)");if(Go(t,(function(t){try{u=void 0===u?t:e(u,t),s++}catch(r){throw Qi(r,"variance",t)}})),0===s)throw new Error("Cannot calculate variance of an empty array");var c=i(u,s);if(u=void 0,Go(t,(function(t){var r=n(t,c);u=void 0===u?o(r,r):e(u,o(r,r))})),a(u))return u;switch(r){case"uncorrected":return i(u,s);case"biased":return i(u,s+1);case"unbiased":var f=or(u)?u.mul(0):0;return 1===s?f:i(u,s-1);default:throw new Error('Unknown normalization "'+r+'". Choose "unbiased" (default), "uncorrected", or "biased".')}}function c(t,r,e){try{if(0===t.length)throw new SyntaxError("Function variance requires one or more parameters (0 provided)");return u(t,r,(function(t){return s(t,e)}))}catch(t){throw Qi(t,"variance")}}})),wu=je("std",["typed","map","sqrt","variance"],(function(t){var r=t.typed,e=t.map,n=t.sqrt,o=t.variance;return r("std",{"Array | Matrix":i,"Array | Matrix, string":i,"Array | Matrix, number | BigNumber":i,"Array | Matrix, number | BigNumber, string":i,"...":function(t){return i(t)}});function i(t,r){if(0===t.length)throw new SyntaxError("Function std requires one or more parameters (0 provided)");try{var i=o.apply(null,arguments);return lr(i)?e(i,n):n(i)}catch(t){throw t instanceof TypeError&&-1!==t.message.indexOf(" variance")?new TypeError(t.message.replace(" variance"," std")):t}}})),bu={exports:{}};!function(t){!function(t,r,e){function n(t){var r,e=this,n=(r=4022871197,function(t){t=String(t);for(var e=0;e<t.length;e++){var n=.02519603282416938*(r+=t.charCodeAt(e));n-=r=n>>>0,r=(n*=r)>>>0,r+=4294967296*(n-=r)}return 2.3283064365386963e-10*(r>>>0)});e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=n(" "),e.s1=n(" "),e.s2=n(" "),e.s0-=n(t),e.s0<0&&(e.s0+=1),e.s1-=n(t),e.s1<0&&(e.s1+=1),e.s2-=n(t),e.s2<0&&(e.s2+=1),n=null}function i(t,r){return r.c=t.c,r.s0=t.s0,r.s1=t.s1,r.s2=t.s2,r}function u(t,r){var e=new n(t),u=r&&r.state,a=e.next;return a.int32=function(){return 4294967296*e.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,u&&("object"==o(u)&&i(u,e),a.state=function(){return i(e,{})}),a}r&&r.exports?r.exports=u:e&&e.amd?e((function(){return u})):this.alea=u}(0,t,!1)}(bu);var Au={exports:{}};!function(t){!function(t,r,e){function n(t){var r=this,e="";r.x=0,r.y=0,r.z=0,r.w=0,r.next=function(){var t=r.x^r.x<<11;return r.x=r.y,r.y=r.z,r.z=r.w,r.w^=r.w>>>19^t^t>>>8},t===(0|t)?r.x=t:e+=t;for(var n=0;n<e.length+64;n++)r.x^=0|e.charCodeAt(n),r.next()}function i(t,r){return r.x=t.x,r.y=t.y,r.z=t.z,r.w=t.w,r}function u(t,r){var e=new n(t),u=r&&r.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,u&&("object"==o(u)&&i(u,e),a.state=function(){return i(e,{})}),a}r&&r.exports?r.exports=u:e&&e.amd?e((function(){return u})):this.xor128=u}(0,t,!1)}(Au);var xu={exports:{}};!function(t){!function(t,r,e){function n(t){var r=this,e="";r.next=function(){var t=r.x^r.x>>>2;return r.x=r.y,r.y=r.z,r.z=r.w,r.w=r.v,(r.d=r.d+362437|0)+(r.v=r.v^r.v<<4^t^t<<1)|0},r.x=0,r.y=0,r.z=0,r.w=0,r.v=0,t===(0|t)?r.x=t:e+=t;for(var n=0;n<e.length+64;n++)r.x^=0|e.charCodeAt(n),n==e.length&&(r.d=r.x<<10^r.x>>>4),r.next()}function i(t,r){return r.x=t.x,r.y=t.y,r.z=t.z,r.w=t.w,r.v=t.v,r.d=t.d,r}function u(t,r){var e=new n(t),u=r&&r.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,u&&("object"==o(u)&&i(u,e),a.state=function(){return i(e,{})}),a}r&&r.exports?r.exports=u:e&&e.amd?e((function(){return u})):this.xorwow=u}(0,t,!1)}(xu);var Eu={exports:{}};!function(t){!function(t,r,e){function n(t){var r=this;r.next=function(){var t,e,n=r.x,o=r.i;return t=n[o],e=(t^=t>>>7)^t<<24,e^=(t=n[o+1&7])^t>>>10,e^=(t=n[o+3&7])^t>>>3,e^=(t=n[o+4&7])^t<<7,t=n[o+7&7],e^=(t^=t<<13)^t<<9,n[o]=e,r.i=o+1&7,e},function(t,r){var e,n=[];if(r===(0|r))n[0]=r;else for(r=""+r,e=0;e<r.length;++e)n[7&e]=n[7&e]<<15^r.charCodeAt(e)+n[e+1&7]<<13;for(;n.length<8;)n.push(0);for(e=0;e<8&&0===n[e];++e);for(8==e&&(n[7]=-1),t.x=n,t.i=0,e=256;e>0;--e)t.next()}(r,t)}function o(t,r){return r.x=t.x.slice(),r.i=t.i,r}function i(t,r){null==t&&(t=+new Date);var e=new n(t),i=r&&r.state,u=function(){return(e.next()>>>0)/4294967296};return u.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},u.int32=e.next,u.quick=u,i&&(i.x&&o(i,e),u.state=function(){return o(e,{})}),u}r&&r.exports?r.exports=i:e&&e.amd?e((function(){return i})):this.xorshift7=i}(0,t,!1)}(Eu);var Fu={exports:{}};!function(t){!function(t,r,e){function n(t){var r=this;r.next=function(){var t,e,n=r.w,o=r.X,i=r.i;return r.w=n=n+1640531527|0,e=o[i+34&127],t=o[i=i+1&127],e^=e<<13,t^=t<<17,e^=e>>>15,t^=t>>>12,e=o[i]=e^t,r.i=i,e+(n^n>>>16)|0},function(t,r){var e,n,o,i,u,a=[],s=128;for(r===(0|r)?(n=r,r=null):(r+="\0",n=0,s=Math.max(s,r.length)),o=0,i=-32;i<s;++i)r&&(n^=r.charCodeAt((i+32)%r.length)),0===i&&(u=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,i>=0&&(u=u+1640531527|0,o=0==(e=a[127&i]^=n+u)?o+1:0);for(o>=128&&(a[127&(r&&r.length||0)]=-1),o=127,i=512;i>0;--i)n=a[o+34&127],e=a[o=o+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,a[o]=n^e;t.w=u,t.X=a,t.i=o}(r,t)}function o(t,r){return r.i=t.i,r.w=t.w,r.X=t.X.slice(),r}function i(t,r){null==t&&(t=+new Date);var e=new n(t),i=r&&r.state,u=function(){return(e.next()>>>0)/4294967296};return u.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},u.int32=e.next,u.quick=u,i&&(i.X&&o(i,e),u.state=function(){return o(e,{})}),u}r&&r.exports?r.exports=i:e&&e.amd?e((function(){return i})):this.xor4096=i}(0,t,!1)}(Fu);var _u={exports:{}};!function(t){!function(t,r,e){function n(t){var r=this,e="";r.next=function(){var t=r.b,e=r.c,n=r.d,o=r.a;return t=t<<25^t>>>7^e,e=e-n|0,n=n<<24^n>>>8^o,o=o-t|0,r.b=t=t<<20^t>>>12^e,r.c=e=e-n|0,r.d=n<<16^e>>>16^o,r.a=o-t|0},r.a=0,r.b=0,r.c=-1640531527,r.d=1367130551,t===Math.floor(t)?(r.a=t/4294967296|0,r.b=0|t):e+=t;for(var n=0;n<e.length+20;n++)r.b^=0|e.charCodeAt(n),r.next()}function i(t,r){return r.a=t.a,r.b=t.b,r.c=t.c,r.d=t.d,r}function u(t,r){var e=new n(t),u=r&&r.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,u&&("object"==o(u)&&i(u,e),a.state=function(){return i(e,{})}),a}r&&r.exports?r.exports=u:e&&e.amd?e((function(){return u})):this.tychei=u}(0,t,!1)}(_u);var Cu={exports:{}};!function(t){!function(r,e,n){var i,u=256,a=n.pow(u,6),s=n.pow(2,52),c=2*s,f=255;function l(t,o,f){var l=[],g=d(y((o=1==o?{entropy:!0}:o||{}).entropy?[t,v(e)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(u):(t=new Uint8Array(u),(r.crypto||r.msCrypto).getRandomValues(t)),v(t)}catch(t){var n=r.navigator,o=n&&n.plugins;return[+new Date,r,o,r.screen,v(e)]}}():t,3),l),m=new p(l),D=function(){for(var t=m.g(6),r=a,e=0;t<s;)t=(t+e)*u,r*=u,e=m.g(1);for(;t>=c;)t/=2,r/=2,e>>>=1;return(t+e)/r};return D.int32=function(){return 0|m.g(4)},D.quick=function(){return m.g(4)/4294967296},D.double=D,d(v(m.S),e),(o.pass||f||function(t,r,e,o){return o&&(o.S&&h(o,m),t.state=function(){return h(m,{})}),e?(n.random=t,r):t})(D,g,"global"in o?o.global:this==n,o.state)}function p(t){var r,e=t.length,n=this,o=0,i=n.i=n.j=0,a=n.S=[];for(e||(t=[e++]);o<u;)a[o]=o++;for(o=0;o<u;o++)a[o]=a[i=f&i+t[o%e]+(r=a[o])],a[i]=r;(n.g=function(t){for(var r,e=0,o=n.i,i=n.j,a=n.S;t--;)r=a[o=f&o+1],e=e*u+a[f&(a[o]=a[i=f&i+r])+(a[i]=r)];return n.i=o,n.j=i,e})(u)}function h(t,r){return r.i=t.i,r.j=t.j,r.S=t.S.slice(),r}function y(t,r){var e,n=[],i=o(t);if(r&&"object"==i)for(e in t)try{n.push(y(t[e],r-1))}catch(t){}return n.length?n:"string"==i?t:t+"\0"}function d(t,r){for(var e,n=t+"",o=0;o<n.length;)r[f&o]=f&(e^=19*r[f&o])+n.charCodeAt(o++);return v(r)}function v(t){return String.fromCharCode.apply(0,t)}if(d(n.random(),e),t.exports){t.exports=l;try{i=require("crypto")}catch(t){}}else n.seedrandom=l}("undefined"!=typeof self?self:h,[],Math)}(Cu);var Su=bu.exports,Bu=Au.exports,Mu=xu.exports,Nu=Eu.exports,Ou=Fu.exports,Pu=_u.exports,ju=Cu.exports;function Tu(t,r){return je(t,["config","BigNumber"],(function(t){var e=t.config,n=t.BigNumber;return"BigNumber"===e.number?new n(r):r}))}ju.alea=Su,ju.xor128=Bu,ju.xorwow=Mu,ju.xorshift7=Nu,ju.xor4096=Ou,ju.tychei=Pu,Tu("fineStructure",.0072973525693),Tu("weakMixingAngle",.2229),Tu("efimovFactor",22.7),Tu("sackurTetrode",-1.16487052358);var Iu={createBigNumberClass:Po},ku={createComplexClass:Io},Ru={createMatrixClass:Uo},zu={MatrixDependencies:Ru,createDenseMatrixClass:$o},Uu={createFractionClass:zo},Wu={BigNumberDependencies:Iu,ComplexDependencies:ku,DenseMatrixDependencies:zu,FractionDependencies:Uu,createTyped:Ge},qu={typedDependencies:Wu,createEqualScalar:li},Lu={MatrixDependencies:Ru,equalScalarDependencies:qu,typedDependencies:Wu,createSparseMatrixClass:pi},$u={DenseMatrixDependencies:zu,MatrixDependencies:Ru,SparseMatrixDependencies:Lu,typedDependencies:Wu,createMatrix:gi},Gu={typedDependencies:Wu,createAddScalar:Fi},Zu={DenseMatrixDependencies:zu,SparseMatrixDependencies:Lu,addScalarDependencies:Gu,equalScalarDependencies:qu,matrixDependencies:$u,typedDependencies:Wu,createAdd:fu},Vu={numericDependencies:{bignumberDependencies:{BigNumberDependencies:Iu,typedDependencies:Wu,createBignumber:yi},fractionDependencies:{FractionDependencies:Uu,typedDependencies:Wu,createFraction:di},numberDependencies:{typedDependencies:Wu,createNumber:hi},createNumeric:tu},typedDependencies:Wu,createDivideScalar:eu},Ju={typedDependencies:Wu,createMultiplyScalar:Ii},Hu={addScalarDependencies:Gu,dotDependencies:{addScalarDependencies:Gu,conjDependencies:{typedDependencies:Wu,createConj:Li},multiplyScalarDependencies:Ju,sizeDependencies:{matrixDependencies:$u,typedDependencies:Wu,createSize:Xi},typedDependencies:Wu,createDot:lu},equalScalarDependencies:qu,matrixDependencies:$u,multiplyScalarDependencies:Ju,typedDependencies:Wu,createMultiply:Ri},Yu={typedDependencies:Wu,createUnaryMinus:Di},Ku={DenseMatrixDependencies:zu,addScalarDependencies:Gu,equalScalarDependencies:qu,matrixDependencies:$u,typedDependencies:Wu,unaryMinusDependencies:Yu,createSubtract:Wi},Xu={divideScalarDependencies:Vu,equalScalarDependencies:qu,invDependencies:{absDependencies:{typedDependencies:Wu,createAbs:wi},addScalarDependencies:Gu,detDependencies:{divideScalarDependencies:Vu,isZeroDependencies:{typedDependencies:Wu,createIsZero:ui},matrixDependencies:$u,multiplyDependencies:Hu,subtractDependencies:Ku,typedDependencies:Wu,unaryMinusDependencies:Yu,createDet:pu},divideScalarDependencies:Vu,identityDependencies:{BigNumberDependencies:Iu,DenseMatrixDependencies:zu,SparseMatrixDependencies:Lu,matrixDependencies:$u,typedDependencies:Wu,createIdentity:Gi},matrixDependencies:$u,multiplyDependencies:Hu,typedDependencies:Wu,unaryMinusDependencies:Yu,createInv:hu},matrixDependencies:$u,multiplyDependencies:Hu,typedDependencies:Wu,createDivide:yu},Qu={addDependencies:Zu,divideDependencies:Xu,typedDependencies:Wu,createMean:vu},ta={mapDependencies:{typedDependencies:Wu,createMap:Zi},sqrtDependencies:{ComplexDependencies:ku,typedDependencies:Wu,createSqrt:zi},typedDependencies:Wu,varianceDependencies:{addDependencies:Zu,applyDependencies:{isIntegerDependencies:{typedDependencies:Wu,createIsInteger:Ho},typedDependencies:Wu,createApply:Ai},divideDependencies:Xu,isNaNDependencies:{typedDependencies:Wu,createIsNaN:si},multiplyDependencies:Hu,subtractDependencies:Ku,typedDependencies:Wu,createVariance:Du},createStd:wu},ra={exports:{}};function ea(){}ea.prototype={on:function(t,r,e){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:r,ctx:e}),this},once:function(t,r,e){var n=this;function o(){n.off(t,o),r.apply(e,arguments)}return o._=r,this.on(t,o,e)},emit:function(t){for(var r=[].slice.call(arguments,1),e=((this.e||(this.e={}))[t]||[]).slice(),n=0,o=e.length;n<o;n++)e[n].fn.apply(e[n].ctx,r);return this},off:function(t,r){var e=this.e||(this.e={}),n=e[t],o=[];if(n&&r)for(var i=0,u=n.length;i<u;i++)n[i].fn!==r&&n[i].fn._!==r&&o.push(n[i]);return o.length?e[t]=o:delete e[t],this}},ra.exports=ea,ra.exports.TinyEmitter=ea;var na=ra.exports;function oa(t,r,e,n){function i(r,o,i){var a;if(i.wrap&&"function"==typeof o&&(o=function(t){var r=function(){for(var r=[],n=0,o=arguments.length;n<o;n++){var i=arguments[n];r[n]=i&&i.valueOf()}return t.apply(e,r)};t.transform&&(r.transform=t.transform);return r}(o)),"function"==typeof(a=o)&&"string"==typeof a.signature&&(o=t(r,function(t,r,e){return r in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}({},o.signature,o))),t.isTypedFunction(e[r])&&t.isTypedFunction(o))return o=i.override?t(r,o.signatures):t(e[r],o),e[r]=o,delete n[r],u(r,o),void e.emit("import",r,(function(){return o}));if(void 0===e[r]||i.override)return e[r]=o,delete n[r],u(r,o),void e.emit("import",r,(function(){return o}));if(!i.silent)throw new Error('Cannot import "'+r+'": already exists')}function u(t,r){r&&"function"==typeof r.transform?(e.expression.transform[t]=r.transform,f(t)&&(e.expression.mathWithTransform[t]=r.transform)):(delete e.expression.transform[t],f(t)&&(e.expression.mathWithTransform[t]=r))}function a(t){delete e.expression.transform[t],f(t)?e.expression.mathWithTransform[t]=e[t]:delete e.expression.mathWithTransform[t]}function s(r,o){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.fn;if(Pe(i,"."))throw new Error("Factory name should not contain a nested path. Name: "+JSON.stringify(i));var u=p(r)?e.expression.transform:e,s=i in e.expression.transform,c=Kr(u,i)?u[i]:void 0,f=function(){var n={};r.dependencies.map(Ie).forEach((function(t){if(Pe(t,"."))throw new Error("Factory dependency should not contain a nested path. Name: "+JSON.stringify(t));"math"===t?n.math=e:"mathWithTransform"===t?n.mathWithTransform=e.expression.mathWithTransform:"classes"===t?n.classes=e:n[t]=e[t]}));var u=r(n);if(u&&"function"==typeof u.transform)throw new Error('Transforms cannot be attached to factory functions. Please create a separate function for it with exports.path="expression.transform"');if(void 0===c||o.override)return u;if(t.isTypedFunction(c)&&t.isTypedFunction(u))return t(c,u);if(o.silent)return c;throw new Error('Cannot import "'+i+'": already exists')};r.meta&&!1===r.meta.lazy?(u[i]=f(),c&&s?a(i):(p(r)||l(r))&&Yr(e.expression.mathWithTransform,i,(function(){return u[i]}))):(Yr(u,i,f),c&&s?a(i):(p(r)||l(r))&&Yr(e.expression.mathWithTransform,i,(function(){return u[i]}))),n[i]=r,e.emit("import",i,f)}function c(t){return"function"==typeof t||"number"==typeof t||"string"==typeof t||"boolean"==typeof t||null===t||ar(t)||ir(t)||or(t)||ur(t)||fr(t)||Array.isArray(t)}function f(t){return!Kr(h,t)}function l(t){return!(-1!==t.fn.indexOf(".")||Kr(h,t.fn)||t.meta&&t.meta.isClass)}function p(t){return void 0!==t&&void 0!==t.meta&&!0===t.meta.isTransformFunction||!1}var h={expression:!0,type:!0,docs:!0,error:!0,json:!0,chain:!0};return function(t,r){var e=arguments.length;if(1!==e&&2!==e)throw new Yi("import",e,1,2);function n(t,e,i){if(Array.isArray(e))e.forEach((function(r){return n(t,r)}));else if("object"===o(e))for(var u in e)Kr(e,u)&&n(t,e[u],u);else if(Te(e)||void 0!==i){var a=Te(e)?p(e)?e.fn+".transform":e.fn:i;if(Kr(t,a)&&t[a]!==e&&!r.silent)throw new Error('Cannot import "'+a+'" twice');t[a]=e}else if(!r.silent)throw new TypeError("Factory, Object, or Array expected")}r||(r={});var u={};for(var a in n(u,t),u)if(Kr(u,a)){var f=u[a];if(Te(f))s(f,r);else if(c(f))i(a,f,r);else if(!r.silent)throw new TypeError("Factory, Object, or Array expected")}}}var ia=function(){function t(t,r,e,n,o,i){void 0===i&&(i=""),this.ctx=t,this.x=r,this.y=e,this.s=n,this.ki=o,this.val=i}return t.prototype.draw=function(){console.log("TBD")},t}(),ua=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return c(r,t),r.prototype.draw=function(){var t=this,r=t.ctx,e=t.x,n=t.y,o=t.s,i=t.ki,u=.5*o,a=.65*u;r.save(),r.beginPath(),r.lineWidth=2,1===i?r.strokeStyle="#fff":-1===i?r.strokeStyle="#000":(r.lineWidth=3,a=.7*u),a>0&&(r.arc(e,n,a,0,2*Math.PI,!0),r.stroke()),r.restore()},r}(ia),aa=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return c(r,t),r.prototype.draw=function(){var t=this,r=t.ctx,e=t.x,n=t.y,o=t.s,i=t.ki,u=.5*o,a=.5*u;r.save(),r.beginPath(),r.moveTo(e-a,n-a),r.lineTo(e+a,n+a),r.moveTo(e+a,n-a),r.lineTo(e-a,n+a),r.lineWidth=3,1===i?r.strokeStyle="#fff":-1===i?r.strokeStyle="#000":(r.lineWidth=3,a=.7*u),r.closePath(),r.stroke(),r.restore()},r}(ia),sa=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return c(r,t),r.prototype.draw=function(){var t=this,r=t.ctx,e=t.x,n=t.y,o=t.s,i=t.ki,u=t.val,a=.8*o,s=a/1.5;r.save(),1===i?r.fillStyle="#fff":-1===i?r.fillStyle="#000":r.clearRect(e-a/2,n-a/2,a,a),s=1===u.toString().length?a/1.5:2===u.toString().length?a/1.8:a/2,r.font="bold "+s+"px Tahoma",r.textAlign="center",r.textBaseline="middle",r.fillText(u.toString(),e,n+2),r.restore()},r}(ia),ca=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return c(r,t),r.prototype.draw=function(){var t=this,r=t.ctx,e=t.x,n=t.y,o=t.s,i=t.ki;r.save(),r.beginPath(),r.lineWidth=2;var u=.55*o;1===i?r.strokeStyle="#fff":-1===i?r.strokeStyle="#000":(u=.7*o,r.strokeStyle="#000",r.lineWidth=3),r.rect(e-u/2,n-u/2,u,u),r.stroke(),r.restore()},r}(ia),fa=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return c(r,t),r.prototype.draw=function(){var t=this,r=t.ctx,e=t.x,n=t.y,o=t.s,i=t.ki,u=.5*o,a=.75*u;r.save(),r.beginPath(),r.moveTo(e,n-a),r.lineTo(e-a*Math.cos(.523),n+a*Math.sin(.523)),r.lineTo(e+a*Math.cos(.523),n+a*Math.sin(.523)),r.lineWidth=2,1===i?r.strokeStyle="#fff":-1===i?r.strokeStyle="#000":(r.lineWidth=3,a=.7*u),r.closePath(),r.stroke(),r.restore()},r}(ia),la=function t(r,e){var n=rr({},er,e);if("function"!=typeof Object.create)throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");var o,i,u=(o={isNumber:nr,isComplex:ir,isBigNumber:or,isFraction:ur,isUnit:ar,isString:sr,isArray:cr,isMatrix:fr,isCollection:lr,isDenseMatrix:pr,isSparseMatrix:hr,isRange:yr,isIndex:dr,isBoolean:vr,isResultSet:gr,isHelp:mr,isFunction:Dr,isDate:wr,isRegExp:br,isObject:Ar,isNull:xr,isUndefined:Er,isAccessorNode:Fr,isArrayNode:_r,isAssignmentNode:Cr,isBlockNode:Sr,isConditionalNode:Br,isConstantNode:Mr,isFunctionAssignmentNode:Nr,isFunctionNode:Or,isIndexNode:Pr,isNode:jr,isObjectNode:Tr,isOperatorNode:Ir,isParenthesisNode:kr,isRangeNode:Rr,isRelationalNode:zr,isSymbolNode:Ur,isChain:Wr},i=new na,o.on=i.on.bind(i),o.off=i.off.bind(i),o.once=i.once.bind(i),o.emit=i.emit.bind(i),o);u.config=re(n,u.emit),u.expression={transform:{},mathWithTransform:{config:u.config}};var a={};function s(){for(var t=arguments.length,r=new Array(t),e=0;e<t;e++)r[e]=arguments[e];return u.typed.apply(u.typed,r)}s.isTypedFunction=oe.isTypedFunction;var c=oa(s,0,u,a);return u.import=c,u.on("config",(function(){Xr(a).forEach((function(t){t&&t.meta&&t.meta.recreateOnConfigChange&&c(t,{override:!0})}))})),u.create=t.bind(null,r),u.factory=je,u.import(Xr(Jr(r))),u.ArgumentsError=Yi,u.DimensionError=De,u.IndexError=we,u}({meanDependencies:Qu,stdDependencies:ta},{}),pa=la.std,ha=la.mean,ya=1;"undefined"!=typeof window&&(ya=window.devicePixelRatio);var da={};var va,ga=function(){function r(r){var e=this;void 0===r&&(r={}),this.defaultOptions={boardSize:19,padding:10,extend:3,interactive:!1,coordinate:!0,theme:t.Theme.BlackAndWhite,background:!1},this.clearAllCanvas=function(){e.clearBoard(),e.clearCanvas(),e.clearCursorCanvas(),e.clearAnalysisCanvas()},this.clearBoard=function(){if(e.board){var t=e.board.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,t.canvas.width,t.canvas.height),t.restore())}},this.clearCanvas=function(){if(e.canvas){var t=e.canvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.canvas.width,e.canvas.height),t.restore())}},this.clearMarkupCanvas=function(){if(e.markupCanvas){var t=e.markupCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.markupCanvas.width,e.markupCanvas.height),t.restore())}},this.clearCursorCanvas=function(){if(e.cursorCanvas){var t=e.cursorCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.cursorCanvas.width,e.cursorCanvas.height),t.restore())}},this.clearAnalysisCanvas=function(){if(e.analysisCanvas){var t=e.analysisCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.analysisCanvas.width,e.analysisCanvas.height),t.restore())}},this.drawAnalysis=function(r){var n=e.analysisCanvas,o=e.options.theme,i=void 0===o?t.Theme.BlackAndWhite:o;if(n&&r){var u=n.getContext("2d");if(u){e.clearAnalysisCanvas();var a=r.rootInfo,s=r.moveInfos.map((function(t){return t.utility})),c=s.map((function(t){return(t-ha(s))/pa.apply(void 0,p([],l(s),!1))})).map((function(t){var r=Math.max.apply(Math,p([],l(s),!1)),e=Math.min.apply(Math,p([],l(s),!1));return(t-e)/(r-e)}));r.moveInfos.forEach((function(n,o){if("pass"!==n.move){var s=JSON.parse(r.id),f=Lt(e.mat,s.bx,s.by),l=f.x,p=f.y,h=Nt(n.move),y=h.x,d=h.y;if(y+=l,d+=p,0===e.mat[y][d]){var v=e.calcSpaceAndPadding(),g=v.space,m=v.scaledPadding,D=m+y*g,w=m+d*g;u.save(),i!==t.Theme.Subdued&&i!==t.Theme.BlackAndWhite&&i!==t.Theme.Flat?(u.shadowOffsetX=3,u.shadowOffsetY=3,u.shadowColor="#555",u.shadowBlur=8):(u.shadowOffsetX=0,u.shadowOffsetY=0,u.shadowColor="#fff",u.shadowBlur=0),new Qt(u,D,w,.46*g,a,n,c[o],!0).draw(),u.restore()}}}))}}},this.drawMarkup=function(r,n){void 0===r&&(r=e.mat),void 0===n&&(n=e.markup);var o=e.markupCanvas;if(o){e.clearMarkupCanvas();for(var i=0;i<n.length;i++)for(var u=0;u<n[i].length;u++){var a=n[i][u];if(null!==a&&""!==a){var s=e.calcSpaceAndPadding(),c=s.space,f=s.scaledPadding,l=f+i*c,p=f+u*c,h=r[i][u],y=void 0,d=o.getContext("2d");if(d){switch(a){case t.Markup.Circle:case t.Markup.Current:y=new ua(d,l,p,c,h);break;case t.Markup.Square:y=new ca(d,l,p,c,h);break;case t.Markup.Triangle:y=new fa(d,l,p,c,h);break;case t.Markup.Cross:y=new aa(d,l,p,c,h);break;default:""!==a&&(y=new sa(d,l,p,c,h,a))}null==y||y.draw()}}}}},this.drawBoard=function(){e.clearBoard(),e.drawBan(),e.drawBoardLine(),e.drawStars(),e.options.coordinate&&e.drawCoordinate()},this.drawBan=function(){var r=e.board,n=e.options.theme;if(r){r.style.borderRadius="2px";var o=r.getContext("2d");if(o)if(n===t.Theme.BlackAndWhite)r.style.boxShadow="0px 0px 0px #000000",o.fillStyle="#FFFFFF",o.fillRect(0,0,r.width,r.height);else if(n===t.Theme.Flat)o.fillStyle="#ECB55A",o.fillRect(0,0,r.width,r.height);else if(n===t.Theme.Walnut&&void 0!==wt[n].board){var i=wt[n].board||"",u=da[i];u&&o.drawImage(u,0,0,r.width,r.height)}else{i=wt[n].board||"";var a=da[i];if(a){var s=o.createPattern(a,"repeat");s&&(o.fillStyle=s,o.fillRect(0,0,r.width,r.height))}}}},this.drawBoardLine=function(){if(e.board){var t=e.visibleArea,r=e.board.getContext("2d");if(r){var n=e.calcSpaceAndPadding(),o=n.space,i=n.scaledPadding;r.lineWidth=1*ya,r.fillStyle="#000000",r.beginPath();for(var u=t[0][0];u<=t[0][1];u++)r.moveTo(u*o+i,i+t[1][0]*o),r.lineTo(u*o+i,o*t[1][1]+i);for(u=t[1][0];u<=t[1][1];u++)r.moveTo(t[0][0]*o+i,u*o+i),r.lineTo(t[0][1]*o+i,u*o+i);r.stroke()}}},this.drawStars=function(t){if(void 0===t&&(t=[[0,18],[0,18]]),e.canvas){var r=e.canvas.getContext("2d");if(r){var n=e.calcSpaceAndPadding(),o=n.space,i=n.scaledPadding;r.stroke(),[3,9,15].forEach((function(e){[3,9,15].forEach((function(n){e>t[0][0]&&e<t[0][1]&&n>t[1][0]&&n<t[1][1]&&(r.beginPath(),r.arc(e*o+i,n*o+i,3*ya,0,2*Math.PI,!0),r.fillStyle="black",r.fill())}))}))}}},this.drawCoordinate=function(t){void 0===t&&(t=[[0,18],[0,18]]);var r=e.board;if(r){var n=r.getContext("2d"),o=e.calcSpaceAndPadding(),i=o.space,u=o.scaledPadding;if(n){n.textBaseline="middle",n.textAlign="center",n.fillStyle="#000000",n.font="bold "+i/2.8+"px Helvetica";var a=i/3;vt.forEach((function(e,o){var s=i*o+u;o>=t[0][0]&&o<=t[0][1]&&(n.fillText(e,s,0+a),n.fillText(e,s,r.height-a))})),gt.forEach((function(e,o){var s=i*o+u;o>=t[1][0]&&o<=t[1][1]&&(n.fillText(e.toString(),a,s),n.fillText(e.toString(),r.width-a,s))}))}}},this.calcSpaceAndPadding=function(t){void 0===t&&(t=e.canvas);var r=0,n=0;if(t){var o=e.options,i=o.padding,u=o.boardSize;n=i,n+=(r=(t.width-2*i)/u)/2}return{space:r,scaledPadding:n}},this.drawCursor=function(){var r=e.cursorCanvas;if(r){e.clearCursorCanvas();var n=e.options.padding,o=r.getContext("2d"),i=e.calcSpaceAndPadding().space,u=e.visibleArea,a=l(e.cursor,2),s=a[0],c=a[1];if(s<u[0][0]||s>u[0][1])return;if(c<u[1][0]||c>u[1][1])return;var f=s*i+i/2+n,p=c*i+i/2+n;if(o){var h=.4*i;h>0&&(o.save(),o.beginPath(),o.arc(f,p,h,0,2*Math.PI,!0),o.lineWidth=1,o.globalAlpha=.6,e._turn===t.Ki.Black?(o.strokeStyle="#000",o.fillStyle="#000"):e._turn===t.Ki.White&&(o.strokeStyle="#FFF",o.fillStyle="#FFF"),o.fill(),o.stroke(),o.globalAlpha=1,o.restore())}}},this.drawStones=function(r){void 0===r&&(r=e.mat);var n=e.canvas,o=e.options.theme,i=void 0===o?t.Theme.BlackAndWhite:o;if(n)for(var u=0;u<r.length;u++)for(var a=0;a<r[u].length;a++){var s=r[u][a];if(0!==s){var c=n.getContext("2d");if(c){var f=e.calcSpaceAndPadding(),l=f.space,p=f.scaledPadding,h=p+u*l,y=p+a*l;c.save(),i!==t.Theme.Subdued&&i!==t.Theme.BlackAndWhite&&i!==t.Theme.Flat?(c.shadowOffsetX=3,c.shadowOffsetY=3,c.shadowColor="#555",c.shadowBlur=8):(c.shadowOffsetX=0,c.shadowOffsetY=0,c.shadowBlur=0);var d=void 0;switch(i){case t.Theme.BlackAndWhite:case t.Theme.Flat:d=new Kt(c,h,y,.45*l,s);break;default:var v=wt[i].blacks.map((function(t){return da[t]})),g=wt[i].whites.map((function(t){return da[t]}));d=new Xt(c,h,y,.45*l,s,u+10+a,v,g)}d.draw(),c.restore()}}}},this.options=f(f({},this.defaultOptions),r),this.mat=It([19,19]),this.markup=kt([19,19]),this._turn=t.Ki.Black,this.cursor=[18,0],this.cursorPos=new DOMPoint,this.maxhv=this.options.boardSize,this.transMat=new DOMMatrix,this.analysis=null,this.visibleArea=[[0,18],[0,18]]}return r.prototype.setTurn=function(t){this._turn=t},r.prototype.resize=function(){if(this.canvas&&this.cursorCanvas&&this.dom&&this.board&&this.markupCanvas&&this.analysisCanvas){var t=this,r=t.board,e=t.canvas,n=t.markupCanvas,o=t.cursorCanvas,i=t.analysisCanvas,u=this.options,a=u.size,s=u.zoom;if(a)r.width=a*ya,r.height=a*ya,e.width=a*ya,e.height=a*ya,n.width=a*ya,n.height=a*ya,o.width=a*ya,o.height=a*ya,i.width=a*ya,i.height=a*ya;else{var c=this.dom.clientWidth;r.style.width=c+"px",r.style.height=c+"px",r.width=Math.floor(c*ya),r.height=Math.floor(c*ya),e.style.width=c+"px",e.style.height=c+"px",e.width=Math.floor(c*ya),e.height=Math.floor(c*ya),n.style.width=c+"px",n.style.height=c+"px",n.width=Math.floor(c*ya),n.height=Math.floor(c*ya),o.style.width=c+"px",o.style.height=c+"px",o.width=Math.floor(c*ya),o.height=Math.floor(c*ya),i.style.width=c+"px",i.style.height=c+"px",i.width=Math.floor(c*ya),i.height=Math.floor(c*ya)}this.calcBoardVisibleArea(s||!1),this.render()}},r.prototype.init=function(t){var r,e,n,o,i;this.mat=It([19,19]),this.markup=kt([19,19]),this.transMat=new DOMMatrix;var u=document.createElement("canvas");u.style.position="absolute",u.id="ghostban-board",this.board=u;var a=document.createElement("canvas");a.style.position="absolute",a.id="ghostban-canvas",this.canvas=a;var s=document.createElement("canvas");s.style.position="absolute",s.id="ghostban-markup",s.style.pointerEvents="none",this.markupCanvas=s;var c=document.createElement("canvas");c.style.position="absolute",c.id="ghostban-cursor",this.cursorCanvas=c;var f=document.createElement("canvas");f.style.position="absolute",f.style.pointerEvents="none",f.id="ghostban-analysis",this.analysisCanvas=f,this.dom=t,null===(r=t.firstChild)||void 0===r||r.remove(),null===(e=t.firstChild)||void 0===e||e.remove(),null===(n=t.firstChild)||void 0===n||n.remove(),null===(o=t.firstChild)||void 0===o||o.remove(),null===(i=t.firstChild)||void 0===i||i.remove(),t.appendChild(u),t.appendChild(a),t.appendChild(s),t.appendChild(c),t.appendChild(f),this.resize(),this.renderInteractive()},r.prototype.setOptions=function(t){this.options=f(f({},this.options),t)},r.prototype.setMat=function(t){this.mat=t},r.prototype.setMarkup=function(t){this.markup=t},r.prototype.renderInteractive=function(){var t=this,r=this.cursorCanvas;if(r){var e=this.options.padding,n=this.calcSpaceAndPadding().space,o=function(r){var o=t.transMat.inverse().transformPoint(r),i=Math.round((o.x-e+n/2)/n),u=Math.round((o.y-e+n/2)/n),a=i*n,s=u*n,c=t.transMat.transformPoint(new DOMPoint(a,s));t.cursorPos=c,t.cursor=[i-1,u-1],t.drawCursor()},i=function(t){t.preventDefault();var e=r.getBoundingClientRect(),n=t.changedTouches,i=new DOMPoint((n[0].clientX-e.left)*ya,(n[0].clientY-e.top)*ya);o(i)},u=function(t){t.preventDefault();var r=new DOMPoint(t.offsetX*ya,t.offsetY*ya);o(r)};this.options.interactive?(r.addEventListener("mousemove",u),r.addEventListener("touchmove",i),r.addEventListener("mouseout",u)):(r.removeEventListener("mousemove",u),r.removeEventListener("touchmove",i),r.removeEventListener("mouseout",u))}},r.prototype.setAnalysis=function(t){var r=this;t&&(this.analysis=t,setTimeout((function(){r.drawAnalysis(t)}),0))},r.prototype.setTheme=function(t){var r=this;if(wt[t]){var e=wt[t],n=e.board,o=e.blacks,i=e.whites;this.options.theme=t,function(t,r){for(var e=0,n=function(){++e===t.length&&r()},o=0;o<t.length;o++)da[t[o]]||(da[t[o]]=new Image,da[t[o]].src=t[o],da[t[o]].onload=function(){n()},da[t[o]].onerror=function(){n()})}(d.exports.compact(p(p([n],l(o),!1),l(i),!1)),(function(){r.drawBoard(),r.render()})),this.drawBoard(),this.render()}},r.prototype.calcBoardVisibleArea=function(r){var e=this,n=e.canvas,o=e.analysisCanvas,i=e.board,u=e.cursorCanvas,a=e.markupCanvas,s=this.options,c=s.boardSize,f=s.extend,l=$t(this.mat,c,f),p=l.visibleArea,h=l.center,y=null==n?void 0:n.getContext("2d"),d=null==i?void 0:i.getContext("2d"),v=null==u?void 0:u.getContext("2d"),g=null==a?void 0:a.getContext("2d"),m=null==o?void 0:o.getContext("2d"),D=r?p:[[0,18],[0,18]];if(this.visibleArea=D,r){var w=this.calcSpaceAndPadding().space,b=1/((D[0][1]-D[0][0]+1)/c),A=0,x=0,E=this.options.padding*b;switch(h){case t.Center.TopLeft:break;case t.Center.TopRight:A=D[0][0]*w*b+E;break;case t.Center.BottomLeft:x=D[1][0]*w*b+E;break;case t.Center.BottomRight:A=D[0][0]*w*b+E,x=D[1][0]*w*b+E}this.transMat=new DOMMatrix,this.transMat.translateSelf(-A,-x),this.transMat.scaleSelf(b,b),null==y||y.setTransform(this.transMat),null==d||d.setTransform(this.transMat),null==m||m.setTransform(this.transMat),null==v||v.setTransform(this.transMat),null==g||g.setTransform(this.transMat)}else null==y||y.resetTransform(),null==d||d.resetTransform(),null==m||m.resetTransform(),null==v||v.resetTransform(),null==g||g.resetTransform()},r.prototype.render=function(){this.clearAllCanvas(),this.drawBoard(),this.drawStones(),this.drawMarkup()},r}(),ma={exports:{}},Da="Function.prototype.bind called on incompatible ",wa=Array.prototype.slice,ba=Object.prototype.toString,Aa="[object Function]",xa=function(t){var r=this;if("function"!=typeof r||ba.call(r)!==Aa)throw new TypeError(Da+r);for(var e,n=wa.call(arguments,1),o=function(){if(this instanceof e){var o=r.apply(this,n.concat(wa.call(arguments)));return Object(o)===o?o:this}return r.apply(t,n.concat(wa.call(arguments)))},i=Math.max(0,r.length-n.length),u=[],a=0;a<i;a++)u.push("$"+a);if(e=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")(o),r.prototype){var s=function(){};s.prototype=r.prototype,e.prototype=new s,s.prototype=null}return e},Ea=Function.prototype.bind||xa,Fa="undefined"!=typeof Symbol&&Symbol,_a=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"===o(Symbol.iterator))return!0;var t={},r=Symbol("test"),e=Object(r);if("string"==typeof r)return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;for(r in t[r]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==r)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,r);if(42!==i.value||!0!==i.enumerable)return!1}return!0},Ca=Ea.call(Function.call,Object.prototype.hasOwnProperty),Sa=SyntaxError,Ba=Function,Ma=TypeError,Na=function(t){try{return Ba('"use strict"; return ('+t+").constructor;")()}catch(t){}},Oa=Object.getOwnPropertyDescriptor;if(Oa)try{Oa({},"")}catch(t){Oa=null}var Pa=function(){throw new Ma},ja=Oa?function(){try{return Pa}catch(t){try{return Oa(arguments,"callee").get}catch(t){return Pa}}}():Pa,Ta="function"==typeof Fa&&"function"==typeof Symbol&&"symbol"===o(Fa("foo"))&&"symbol"===o(Symbol("bar"))&&_a(),Ia=Object.getPrototypeOf||function(t){return t.__proto__},ka={},Ra="undefined"==typeof Uint8Array?va:Ia(Uint8Array),za={"%AggregateError%":"undefined"==typeof AggregateError?va:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?va:ArrayBuffer,"%ArrayIteratorPrototype%":Ta?Ia([][Symbol.iterator]()):va,"%AsyncFromSyncIteratorPrototype%":va,"%AsyncFunction%":ka,"%AsyncGenerator%":ka,"%AsyncGeneratorFunction%":ka,"%AsyncIteratorPrototype%":ka,"%Atomics%":"undefined"==typeof Atomics?va:Atomics,"%BigInt%":"undefined"==typeof BigInt?va:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?va:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?va:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?va:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?va:FinalizationRegistry,"%Function%":Ba,"%GeneratorFunction%":ka,"%Int8Array%":"undefined"==typeof Int8Array?va:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?va:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?va:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":Ta?Ia(Ia([][Symbol.iterator]())):va,"%JSON%":"object"===("undefined"==typeof JSON?"undefined":o(JSON))?JSON:va,"%Map%":"undefined"==typeof Map?va:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&Ta?Ia((new Map)[Symbol.iterator]()):va,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?va:Promise,"%Proxy%":"undefined"==typeof Proxy?va:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?va:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?va:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&Ta?Ia((new Set)[Symbol.iterator]()):va,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?va:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":Ta?Ia(""[Symbol.iterator]()):va,"%Symbol%":Ta?Symbol:va,"%SyntaxError%":Sa,"%ThrowTypeError%":ja,"%TypedArray%":Ra,"%TypeError%":Ma,"%Uint8Array%":"undefined"==typeof Uint8Array?va:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?va:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?va:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?va:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?va:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?va:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?va:WeakSet},Ua=function t(r){var e;if("%AsyncFunction%"===r)e=Na("async function () {}");else if("%GeneratorFunction%"===r)e=Na("function* () {}");else if("%AsyncGeneratorFunction%"===r)e=Na("async function* () {}");else if("%AsyncGenerator%"===r){var n=t("%AsyncGeneratorFunction%");n&&(e=n.prototype)}else if("%AsyncIteratorPrototype%"===r){var o=t("%AsyncGenerator%");o&&(e=Ia(o.prototype))}return za[r]=e,e},Wa={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},qa=Ea,La=Ca,$a=qa.call(Function.call,Array.prototype.concat),Ga=qa.call(Function.apply,Array.prototype.splice),Za=qa.call(Function.call,String.prototype.replace),Va=qa.call(Function.call,String.prototype.slice),Ja=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,Ha=/\\(\\)?/g,Ya=function(t){var r=Va(t,0,1),e=Va(t,-1);if("%"===r&&"%"!==e)throw new Sa("invalid intrinsic syntax, expected closing `%`");if("%"===e&&"%"!==r)throw new Sa("invalid intrinsic syntax, expected opening `%`");var n=[];return Za(t,Ja,(function(t,r,e,o){n[n.length]=e?Za(o,Ha,"$1"):r||t})),n},Ka=function(t,r){var e,n=t;if(La(Wa,n)&&(n="%"+(e=Wa[n])[0]+"%"),La(za,n)){var o=za[n];if(o===ka&&(o=Ua(n)),void 0===o&&!r)throw new Ma("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:e,name:n,value:o}}throw new Sa("intrinsic "+t+" does not exist!")},Xa=function(t,r){if("string"!=typeof t||0===t.length)throw new Ma("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof r)throw new Ma('"allowMissing" argument must be a boolean');var e=Ya(t),n=e.length>0?e[0]:"",o=Ka("%"+n+"%",r),i=o.name,u=o.value,a=!1,s=o.alias;s&&(n=s[0],Ga(e,$a([0,1],s)));for(var c=1,f=!0;c<e.length;c+=1){var l=e[c],p=Va(l,0,1),h=Va(l,-1);if(('"'===p||"'"===p||"`"===p||'"'===h||"'"===h||"`"===h)&&p!==h)throw new Sa("property names with quotes must have matching quotes");if("constructor"!==l&&f||(a=!0),La(za,i="%"+(n+="."+l)+"%"))u=za[i];else if(null!=u){if(!(l in u)){if(!r)throw new Ma("base intrinsic for "+t+" exists, but the property is not available.");return}if(Oa&&c+1>=e.length){var y=Oa(u,l);u=(f=!!y)&&"get"in y&&!("originalValue"in y.get)?y.get:u[l]}else f=La(u,l),u=u[l];f&&!a&&(za[i]=u)}}return u};!function(t){var r=Ea,e=Xa,n=e("%Function.prototype.apply%"),o=e("%Function.prototype.call%"),i=e("%Reflect.apply%",!0)||r.call(o,n),u=e("%Object.getOwnPropertyDescriptor%",!0),a=e("%Object.defineProperty%",!0),s=e("%Math.max%");if(a)try{a({},"a",{value:1})}catch(t){a=null}t.exports=function(t){var e=i(r,o,arguments);if(u&&a){var n=u(e,"length");n.configurable&&a(e,"length",{value:1+s(0,t.length-(arguments.length-1))})}return e};var c=function(){return i(r,n,arguments)};a?a(t.exports,"apply",{value:c}):t.exports.apply=c}(ma);var Qa,ts=Object.prototype.toString,rs=function(t){var r=ts.call(t),e="[object Arguments]"===r;return e||(e="[object Array]"!==r&&null!==t&&"object"===o(t)&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===ts.call(t.callee)),e};if(!Object.keys){var es=Object.prototype.hasOwnProperty,ns=Object.prototype.toString,os=rs,is=Object.prototype.propertyIsEnumerable,us=!is.call({toString:null},"toString"),as=is.call((function(){}),"prototype"),ss=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],cs=function(t){var r=t.constructor;return r&&r.prototype===t},fs={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},ls=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!fs["$"+t]&&es.call(window,t)&&null!==window[t]&&"object"===o(window[t]))try{cs(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();Qa=function(t){var r=null!==t&&"object"===o(t),e="[object Function]"===ns.call(t),n=os(t),i=r&&"[object String]"===ns.call(t),u=[];if(!r&&!e&&!n)throw new TypeError("Object.keys called on a non-object");var a=as&&e;if(i&&t.length>0&&!es.call(t,0))for(var s=0;s<t.length;++s)u.push(String(s));if(n&&t.length>0)for(var c=0;c<t.length;++c)u.push(String(c));else for(var f in t)a&&"prototype"===f||!es.call(t,f)||u.push(String(f));if(us)for(var l=function(t){if("undefined"==typeof window||!ls)return cs(t);try{return cs(t)}catch(t){return!1}}(t),p=0;p<ss.length;++p)l&&"constructor"===ss[p]||!es.call(t,ss[p])||u.push(ss[p]);return u}}var ps=Qa,hs=Array.prototype.slice,ys=rs,ds=Object.keys,vs=ds?function(t){return ds(t)}:ps,gs=Object.keys;vs.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return ys(t)?gs(hs.call(t)):gs(t)})}else Object.keys=vs;return Object.keys||vs};var ms,Ds=vs,ws=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"===o(Symbol.iterator))return!0;var t={},r=Symbol("test"),e=Object(r);if("string"==typeof r)return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;for(r in t[r]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==r)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,r);if(42!==i.value||!0!==i.enumerable)return!1}return!0},bs="undefined"!=typeof Symbol&&Symbol,As=ws,xs=function(){return"function"==typeof bs&&("function"==typeof Symbol&&("symbol"===o(bs("foo"))&&("symbol"===o(Symbol("bar"))&&As())))},Es=SyntaxError,Fs=Function,_s=TypeError,Cs=function(t){try{return Fs('"use strict"; return ('+t+").constructor;")()}catch(t){}},Ss=Object.getOwnPropertyDescriptor;if(Ss)try{Ss({},"")}catch(t){Ss=null}var Bs=function(){throw new _s},Ms=Ss?function(){try{return Bs}catch(t){try{return Ss(arguments,"callee").get}catch(t){return Bs}}}():Bs,Ns=xs(),Os=Object.getPrototypeOf||function(t){return t.__proto__},Ps={},js="undefined"==typeof Uint8Array?ms:Os(Uint8Array),Ts={"%AggregateError%":"undefined"==typeof AggregateError?ms:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?ms:ArrayBuffer,"%ArrayIteratorPrototype%":Ns?Os([][Symbol.iterator]()):ms,"%AsyncFromSyncIteratorPrototype%":ms,"%AsyncFunction%":Ps,"%AsyncGenerator%":Ps,"%AsyncGeneratorFunction%":Ps,"%AsyncIteratorPrototype%":Ps,"%Atomics%":"undefined"==typeof Atomics?ms:Atomics,"%BigInt%":"undefined"==typeof BigInt?ms:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?ms:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?ms:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?ms:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?ms:FinalizationRegistry,"%Function%":Fs,"%GeneratorFunction%":Ps,"%Int8Array%":"undefined"==typeof Int8Array?ms:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?ms:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?ms:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":Ns?Os(Os([][Symbol.iterator]())):ms,"%JSON%":"object"===("undefined"==typeof JSON?"undefined":o(JSON))?JSON:ms,"%Map%":"undefined"==typeof Map?ms:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&Ns?Os((new Map)[Symbol.iterator]()):ms,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?ms:Promise,"%Proxy%":"undefined"==typeof Proxy?ms:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?ms:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?ms:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&Ns?Os((new Set)[Symbol.iterator]()):ms,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?ms:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":Ns?Os(""[Symbol.iterator]()):ms,"%Symbol%":Ns?Symbol:ms,"%SyntaxError%":Es,"%ThrowTypeError%":Ms,"%TypedArray%":js,"%TypeError%":_s,"%Uint8Array%":"undefined"==typeof Uint8Array?ms:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?ms:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?ms:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?ms:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?ms:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?ms:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?ms:WeakSet},Is=function t(r){var e;if("%AsyncFunction%"===r)e=Cs("async function () {}");else if("%GeneratorFunction%"===r)e=Cs("function* () {}");else if("%AsyncGeneratorFunction%"===r)e=Cs("async function* () {}");else if("%AsyncGenerator%"===r){var n=t("%AsyncGeneratorFunction%");n&&(e=n.prototype)}else if("%AsyncIteratorPrototype%"===r){var o=t("%AsyncGenerator%");o&&(e=Os(o.prototype))}return Ts[r]=e,e},ks={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},Rs=Ea,zs=Ca,Us=Rs.call(Function.call,Array.prototype.concat),Ws=Rs.call(Function.apply,Array.prototype.splice),qs=Rs.call(Function.call,String.prototype.replace),Ls=Rs.call(Function.call,String.prototype.slice),$s=Rs.call(Function.call,RegExp.prototype.exec),Gs=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,Zs=/\\(\\)?/g,Vs=function(t){var r=Ls(t,0,1),e=Ls(t,-1);if("%"===r&&"%"!==e)throw new Es("invalid intrinsic syntax, expected closing `%`");if("%"===e&&"%"!==r)throw new Es("invalid intrinsic syntax, expected opening `%`");var n=[];return qs(t,Gs,(function(t,r,e,o){n[n.length]=e?qs(o,Zs,"$1"):r||t})),n},Js=function(t,r){var e,n=t;if(zs(ks,n)&&(n="%"+(e=ks[n])[0]+"%"),zs(Ts,n)){var o=Ts[n];if(o===Ps&&(o=Is(n)),void 0===o&&!r)throw new _s("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:e,name:n,value:o}}throw new Es("intrinsic "+t+" does not exist!")},Hs=function(t,r){if("string"!=typeof t||0===t.length)throw new _s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof r)throw new _s('"allowMissing" argument must be a boolean');if(null===$s(/^%?[^%]*%?$/,t))throw new Es("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var e=Vs(t),n=e.length>0?e[0]:"",o=Js("%"+n+"%",r),i=o.name,u=o.value,a=!1,s=o.alias;s&&(n=s[0],Ws(e,Us([0,1],s)));for(var c=1,f=!0;c<e.length;c+=1){var l=e[c],p=Ls(l,0,1),h=Ls(l,-1);if(('"'===p||"'"===p||"`"===p||'"'===h||"'"===h||"`"===h)&&p!==h)throw new Es("property names with quotes must have matching quotes");if("constructor"!==l&&f||(a=!0),zs(Ts,i="%"+(n+="."+l)+"%"))u=Ts[i];else if(null!=u){if(!(l in u)){if(!r)throw new _s("base intrinsic for "+t+" exists, but the property is not available.");return}if(Ss&&c+1>=e.length){var y=Ss(u,l);u=(f=!!y)&&"get"in y&&!("originalValue"in y.get)?y.get:u[l]}else f=zs(u,l),u=u[l];f&&!a&&(Ts[i]=u)}}return u},Ys=Hs("%Object.defineProperty%",!0),Ks=function(){if(Ys)try{return Ys({},"a",{value:1}),!0}catch(t){return!1}return!1};Ks.hasArrayLengthDefineBug=function(){if(!Ks())return null;try{return 1!==Ys([],"length",{value:1}).length}catch(t){return!0}};var Xs=Ks,Qs=Ds,tc="function"==typeof Symbol&&"symbol"===o(Symbol("foo")),rc=Object.prototype.toString,ec=Array.prototype.concat,nc=Object.defineProperty,oc=Xs(),ic=nc&&oc,uc=function(t,r,e,n){var o;(!(r in t)||"function"==typeof(o=n)&&"[object Function]"===rc.call(o)&&n())&&(ic?nc(t,r,{configurable:!0,enumerable:!1,value:e,writable:!0}):t[r]=e)},ac=function(t,r){var e=arguments.length>2?arguments[2]:{},n=Qs(r);tc&&(n=ec.call(n,Object.getOwnPropertySymbols(r)));for(var o=0;o<n.length;o+=1)uc(t,n[o],r[n[o]],e[n[o]])};ac.supportsDescriptors=!!ic;var sc=ac,cc=Xa,fc=ma.exports,lc=fc(cc("String.prototype.indexOf")),pc=function(t,r){var e=cc(t,!!r);return"function"==typeof e&&lc(t,".prototype.")>-1?fc(e):e},hc=Hs("%Array%"),yc=!hc.isArray&&pc("Object.prototype.toString"),dc=hc.isArray||function(t){return"[object Array]"===yc(t)},vc=dc,gc=Hs,mc=pc,Dc=gc("%TypeError%"),wc=vc,bc=gc("%Reflect.apply%",!0)||mc("%Function.prototype.apply%"),Ac=function(t,r){var e=arguments.length>2?arguments[2]:[];if(!wc(e))throw new Dc("Assertion failed: optional `argumentsList`, if provided, must be a List");return bc(t,r,e)},xc=n.default.inspect,Ec="function"==typeof Map&&Map.prototype,Fc=Object.getOwnPropertyDescriptor&&Ec?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,_c=Ec&&Fc&&"function"==typeof Fc.get?Fc.get:null,Cc=Ec&&Map.prototype.forEach,Sc="function"==typeof Set&&Set.prototype,Bc=Object.getOwnPropertyDescriptor&&Sc?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,Mc=Sc&&Bc&&"function"==typeof Bc.get?Bc.get:null,Nc=Sc&&Set.prototype.forEach,Oc="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,Pc="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,jc="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,Tc=Boolean.prototype.valueOf,Ic=Object.prototype.toString,kc=Function.prototype.toString,Rc=String.prototype.match,zc=String.prototype.slice,Uc=String.prototype.replace,Wc=String.prototype.toUpperCase,qc=String.prototype.toLowerCase,Lc=RegExp.prototype.test,$c=Array.prototype.concat,Gc=Array.prototype.join,Zc=Array.prototype.slice,Vc=Math.floor,Jc="function"==typeof BigInt?BigInt.prototype.valueOf:null,Hc=Object.getOwnPropertySymbols,Yc="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?Symbol.prototype.toString:null,Kc="function"==typeof Symbol&&"object"===o(Symbol.iterator),Xc="function"==typeof Symbol&&Symbol.toStringTag&&(o(Symbol.toStringTag)===Kc||"symbol")?Symbol.toStringTag:null,Qc=Object.prototype.propertyIsEnumerable,tf=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(t){return t.__proto__}:null);function rf(t,r){if(t===1/0||t===-1/0||t!=t||t&&t>-1e3&&t<1e3||Lc.call(/e/,r))return r;var e=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof t){var n=t<0?-Vc(-t):Vc(t);if(n!==t){var o=String(n),i=zc.call(r,o.length+1);return Uc.call(o,e,"$&_")+"."+Uc.call(Uc.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return Uc.call(r,e,"$&_")}var ef=xc,nf=ef.custom,of=lf(nf)?nf:null,uf=function t(r,e,n,i){var u=e||{};if(hf(u,"quoteStyle")&&"single"!==u.quoteStyle&&"double"!==u.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(hf(u,"maxStringLength")&&("number"==typeof u.maxStringLength?u.maxStringLength<0&&u.maxStringLength!==1/0:null!==u.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var a=!hf(u,"customInspect")||u.customInspect;if("boolean"!=typeof a&&"symbol"!==a)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(hf(u,"indent")&&null!==u.indent&&"\t"!==u.indent&&!(parseInt(u.indent,10)===u.indent&&u.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(hf(u,"numericSeparator")&&"boolean"!=typeof u.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var s=u.numericSeparator;if(void 0===r)return"undefined";if(null===r)return"null";if("boolean"==typeof r)return r?"true":"false";if("string"==typeof r)return vf(r,u);if("number"==typeof r){if(0===r)return 1/0/r>0?"0":"-0";var c=String(r);return s?rf(r,c):c}if("bigint"==typeof r){var f=String(r)+"n";return s?rf(r,f):f}var l=void 0===u.depth?5:u.depth;if(void 0===n&&(n=0),n>=l&&l>0&&"object"===o(r))return cf(r)?"[Array]":"[Object]";var p=function(t,r){var e;if("\t"===t.indent)e="\t";else{if(!("number"==typeof t.indent&&t.indent>0))return null;e=Gc.call(Array(t.indent+1)," ")}return{base:e,prev:Gc.call(Array(r+1),e)}}(u,n);if(void 0===i)i=[];else if(df(i,r)>=0)return"[Circular]";function h(r,e,o){if(e&&(i=Zc.call(i)).push(e),o){var a={depth:u.depth};return hf(u,"quoteStyle")&&(a.quoteStyle=u.quoteStyle),t(r,a,n+1,i)}return t(r,u,n+1,i)}if("function"==typeof r&&!ff(r)){var y=function(t){if(t.name)return t.name;var r=Rc.call(kc.call(t),/^function\s*([\w$]+)/);if(r)return r[1];return null}(r),d=Af(r,h);return"[Function"+(y?": "+y:" (anonymous)")+"]"+(d.length>0?" { "+Gc.call(d,", ")+" }":"")}if(lf(r)){var v=Kc?Uc.call(String(r),/^(Symbol\(.*\))_[^)]*$/,"$1"):Yc.call(r);return"object"!==o(r)||Kc?v:mf(v)}if(function(t){if(!t||"object"!==o(t))return!1;if("undefined"!=typeof HTMLElement&&t instanceof HTMLElement)return!0;return"string"==typeof t.nodeName&&"function"==typeof t.getAttribute}(r)){for(var g="<"+qc.call(String(r.nodeName)),m=r.attributes||[],D=0;D<m.length;D++)g+=" "+m[D].name+"="+af(sf(m[D].value),"double",u);return g+=">",r.childNodes&&r.childNodes.length&&(g+="..."),g+="</"+qc.call(String(r.nodeName))+">"}if(cf(r)){if(0===r.length)return"[]";var w=Af(r,h);return p&&!function(t){for(var r=0;r<t.length;r++)if(df(t[r],"\n")>=0)return!1;return!0}(w)?"["+bf(w,p)+"]":"[ "+Gc.call(w,", ")+" ]"}if(function(t){return!("[object Error]"!==yf(t)||Xc&&"object"===o(t)&&Xc in t)}(r)){var b=Af(r,h);return"cause"in Error.prototype||!("cause"in r)||Qc.call(r,"cause")?0===b.length?"["+String(r)+"]":"{ ["+String(r)+"] "+Gc.call(b,", ")+" }":"{ ["+String(r)+"] "+Gc.call($c.call("[cause]: "+h(r.cause),b),", ")+" }"}if("object"===o(r)&&a){if(of&&"function"==typeof r[of]&&ef)return ef(r,{depth:l-n});if("symbol"!==a&&"function"==typeof r.inspect)return r.inspect()}if(function(t){if(!_c||!t||"object"!==o(t))return!1;try{_c.call(t);try{Mc.call(t)}catch(t){return!0}return t instanceof Map}catch(t){}return!1}(r)){var A=[];return Cc&&Cc.call(r,(function(t,e){A.push(h(e,r,!0)+" => "+h(t,r))})),wf("Map",_c.call(r),A,p)}if(function(t){if(!Mc||!t||"object"!==o(t))return!1;try{Mc.call(t);try{_c.call(t)}catch(t){return!0}return t instanceof Set}catch(t){}return!1}(r)){var x=[];return Nc&&Nc.call(r,(function(t){x.push(h(t,r))})),wf("Set",Mc.call(r),x,p)}if(function(t){if(!Oc||!t||"object"!==o(t))return!1;try{Oc.call(t,Oc);try{Pc.call(t,Pc)}catch(t){return!0}return t instanceof WeakMap}catch(t){}return!1}(r))return Df("WeakMap");if(function(t){if(!Pc||!t||"object"!==o(t))return!1;try{Pc.call(t,Pc);try{Oc.call(t,Oc)}catch(t){return!0}return t instanceof WeakSet}catch(t){}return!1}(r))return Df("WeakSet");if(function(t){if(!jc||!t||"object"!==o(t))return!1;try{return jc.call(t),!0}catch(t){}return!1}(r))return Df("WeakRef");if(function(t){return!("[object Number]"!==yf(t)||Xc&&"object"===o(t)&&Xc in t)}(r))return mf(h(Number(r)));if(function(t){if(!t||"object"!==o(t)||!Jc)return!1;try{return Jc.call(t),!0}catch(t){}return!1}(r))return mf(h(Jc.call(r)));if(function(t){return!("[object Boolean]"!==yf(t)||Xc&&"object"===o(t)&&Xc in t)}(r))return mf(Tc.call(r));if(function(t){return!("[object String]"!==yf(t)||Xc&&"object"===o(t)&&Xc in t)}(r))return mf(h(String(r)));if(!function(t){return!("[object Date]"!==yf(t)||Xc&&"object"===o(t)&&Xc in t)}(r)&&!ff(r)){var E=Af(r,h),F=tf?tf(r)===Object.prototype:r instanceof Object||r.constructor===Object,_=r instanceof Object?"":"null prototype",C=!F&&Xc&&Object(r)===r&&Xc in r?zc.call(yf(r),8,-1):_?"Object":"",S=(F||"function"!=typeof r.constructor?"":r.constructor.name?r.constructor.name+" ":"")+(C||_?"["+Gc.call($c.call([],C||[],_||[]),": ")+"] ":"");return 0===E.length?S+"{}":p?S+"{"+bf(E,p)+"}":S+"{ "+Gc.call(E,", ")+" }"}return String(r)};function af(t,r,e){var n="double"===(e.quoteStyle||r)?'"':"'";return n+t+n}function sf(t){return Uc.call(String(t),/"/g,"&quot;")}function cf(t){return!("[object Array]"!==yf(t)||Xc&&"object"===o(t)&&Xc in t)}function ff(t){return!("[object RegExp]"!==yf(t)||Xc&&"object"===o(t)&&Xc in t)}function lf(t){if(Kc)return t&&"object"===o(t)&&t instanceof Symbol;if("symbol"===o(t))return!0;if(!t||"object"!==o(t)||!Yc)return!1;try{return Yc.call(t),!0}catch(t){}return!1}var pf=Object.prototype.hasOwnProperty||function(t){return t in this};function hf(t,r){return pf.call(t,r)}function yf(t){return Ic.call(t)}function df(t,r){if(t.indexOf)return t.indexOf(r);for(var e=0,n=t.length;e<n;e++)if(t[e]===r)return e;return-1}function vf(t,r){if(t.length>r.maxStringLength){var e=t.length-r.maxStringLength,n="... "+e+" more character"+(e>1?"s":"");return vf(zc.call(t,0,r.maxStringLength),r)+n}return af(Uc.call(Uc.call(t,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,gf),"single",r)}function gf(t){var r=t.charCodeAt(0),e={8:"b",9:"t",10:"n",12:"f",13:"r"}[r];return e?"\\"+e:"\\x"+(r<16?"0":"")+Wc.call(r.toString(16))}function mf(t){return"Object("+t+")"}function Df(t){return t+" { ? }"}function wf(t,r,e,n){return t+" ("+r+") {"+(n?bf(e,n):Gc.call(e,", "))+"}"}function bf(t,r){if(0===t.length)return"";var e="\n"+r.prev+r.base;return e+Gc.call(t,","+e)+"\n"+r.prev}function Af(t,r){var e=cf(t),n=[];if(e){n.length=t.length;for(var o=0;o<t.length;o++)n[o]=hf(t,o)?r(t[o],t):""}var i,u="function"==typeof Hc?Hc(t):[];if(Kc){i={};for(var a=0;a<u.length;a++)i["$"+u[a]]=u[a]}for(var s in t)hf(t,s)&&(e&&String(Number(s))===s&&s<t.length||Kc&&i["$"+s]instanceof Symbol||(Lc.call(/[^\w$]/,s)?n.push(r(s,t)+": "+r(t[s],t)):n.push(s+": "+r(t[s],t))));if("function"==typeof Hc)for(var c=0;c<u.length;c++)Qc.call(t,u[c])&&n.push("["+r(u[c])+"]: "+r(t[u[c]],t));return n}var xf,Ef,Ff=function(t){return"string"==typeof t||"symbol"===o(t)},_f=function(t){return null===t?"Null":void 0===t?"Undefined":"function"==typeof t||"object"===o(t)?"Object":"number"==typeof t?"Number":"boolean"==typeof t?"Boolean":"string"==typeof t?"String":void 0},Cf=function(t){return"symbol"===o(t)?"Symbol":"bigint"==typeof t?"BigInt":_f(t)},Sf=Hs("%TypeError%"),Bf=uf,Mf=Ff,Nf=Cf,Of=function(t,r){if("Object"!==Nf(t))throw new Sf("Assertion failed: Type(O) is not Object");if(!Mf(r))throw new Sf("Assertion failed: IsPropertyKey(P) is not true, got "+Bf(r));return t[r]},Pf=Hs("%TypeError%"),jf=function(t,r){if(null==t)throw new Pf(r||"Cannot call method on "+t);return t},Tf=Hs("%Object%"),If=jf,kf=Hs("%TypeError%"),Rf=Ff,zf=function(t){return If(t),Tf(t)},Uf=Function.prototype.toString,Wf="object"===("undefined"==typeof Reflect?"undefined":o(Reflect))&&null!==Reflect&&Reflect.apply;if("function"==typeof Wf&&"function"==typeof Object.defineProperty)try{xf=Object.defineProperty({},"length",{get:function(){throw Ef}}),Ef={},Wf((function(){throw 42}),null,xf)}catch(t){t!==Ef&&(Wf=null)}else Wf=null;var qf=/^\s*class\b/,Lf=function(t){try{var r=Uf.call(t);return qf.test(r)}catch(t){return!1}},$f=function(t){try{return!Lf(t)&&(Uf.call(t),!0)}catch(t){return!1}},Gf=Object.prototype.toString,Zf="function"==typeof Symbol&&!!Symbol.toStringTag,Vf=!(0 in[,]),Jf=function(){return!1};if("object"===("undefined"==typeof document?"undefined":o(document))){var Hf=document.all;Gf.call(Hf)===Gf.call(document.all)&&(Jf=function(t){if((Vf||!t)&&(void 0===t||"object"===o(t)))try{var r=Gf.call(t);return("[object HTMLAllCollection]"===r||"[object HTML document.all class]"===r||"[object HTMLCollection]"===r||"[object Object]"===r)&&null==t("")}catch(t){}return!1})}var Yf,Kf,Xf,Qf,tl=Wf?function(t){if(Jf(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!==o(t))return!1;try{Wf(t,null,xf)}catch(t){if(t!==Ef)return!1}return!Lf(t)&&$f(t)}:function(t){if(Jf(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!==o(t))return!1;if(Zf)return $f(t);if(Lf(t))return!1;var r=Gf.call(t);return!("[object Function]"!==r&&"[object GeneratorFunction]"!==r&&!/^\[object HTML/.test(r))&&$f(t)},rl=tl,el=Hs("%TypeError%"),nl=function(t,r){if(!Rf(r))throw new kf("Assertion failed: IsPropertyKey(P) is not true");return zf(t)[r]},ol=rl,il=Ff,ul=uf,al=ws,sl=function(){return al()&&!!Symbol.toStringTag},cl=pc,fl=sl();if(fl){Yf=cl("Object.prototype.hasOwnProperty"),Kf=cl("RegExp.prototype.exec"),Xf={};var ll=function(){throw Xf};Qf={toString:ll,valueOf:ll},"symbol"===o(Symbol.toPrimitive)&&(Qf[Symbol.toPrimitive]=ll)}var pl=cl("Object.prototype.toString"),hl=Object.getOwnPropertyDescriptor,yl=fl?function(t){if(!t||"object"!==o(t))return!1;var r=hl(t,"lastIndex");if(!(r&&Yf(r,"value")))return!1;try{Kf(t,Qf)}catch(t){return t===Xf}}:function(t){return!(!t||"object"!==o(t)&&"function"!=typeof t)&&"[object RegExp]"===pl(t)},dl=function(t){return!!t},vl=Hs("%Symbol.match%",!0),gl=yl,ml=dl,Dl=Hs,wl=Dl("%String%"),bl=Dl("%TypeError%"),Al=function(t){if("symbol"===o(t))throw new bl("Cannot convert a Symbol value to a string");return wl(t)},xl=Ds,El="function"==typeof Symbol&&"symbol"===o(Symbol("foo")),Fl=Object.prototype.toString,_l=Array.prototype.concat,Cl=Object.defineProperty,Sl=Cl&&function(){var t={};try{for(var r in Cl(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),Bl=function(t,r,e,n){var o;(!(r in t)||"function"==typeof(o=n)&&"[object Function]"===Fl.call(o)&&n())&&(Sl?Cl(t,r,{configurable:!0,enumerable:!1,value:e,writable:!0}):t[r]=e)},Ml=function(t,r){var e=arguments.length>2?arguments[2]:{},n=xl(r);El&&(n=_l.call(n,Object.getOwnPropertySymbols(r)));for(var o=0;o<n.length;o+=1)Bl(t,n[o],r[n[o]],e[n[o]])};Ml.supportsDescriptors=!!Sl;var Nl=Ml,Ol={exports:{}},Pl=function(){return"string"==typeof function(){}.name},jl=Object.getOwnPropertyDescriptor;if(jl)try{jl([],"length")}catch(t){jl=null}Pl.functionsHaveConfigurableNames=function(){if(!Pl()||!jl)return!1;var t=jl((function(){}),"name");return!!t&&!!t.configurable};var Tl=Function.prototype.bind;Pl.boundFunctionsHaveNames=function(){return Pl()&&"function"==typeof Tl&&""!==function(){}.bind().name};var Il=Pl;!function(t){var r=Il.functionsHaveConfigurableNames(),e=Object,n=TypeError;t.exports=function(){if(null!=this&&this!==e(this))throw new n("RegExp.prototype.flags getter called on non-object");var t="";return this.hasIndices&&(t+="d"),this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t},r&&Object.defineProperty&&Object.defineProperty(t.exports,"name",{value:"get flags"})}(Ol);var kl=Ol.exports,Rl=Nl.supportsDescriptors,zl=Object.getOwnPropertyDescriptor,Ul=function(){if(Rl&&"gim"===/a/gim.flags){var t=zl(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof RegExp.prototype.dotAll&&"boolean"==typeof RegExp.prototype.hasIndices){var r="",e={};if(Object.defineProperty(e,"hasIndices",{get:function(){r+="d"}}),Object.defineProperty(e,"sticky",{get:function(){r+="y"}}),"dy"===r)return t.get}}return kl},Wl=Nl.supportsDescriptors,ql=Ul,Ll=Object.getOwnPropertyDescriptor,$l=Object.defineProperty,Gl=TypeError,Zl=Object.getPrototypeOf,Vl=/a/,Jl=Nl,Hl=Ol.exports,Yl=Ul,Kl=function(){if(!Wl||!Zl)throw new Gl("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=ql(),r=Zl(Vl),e=Ll(r,"flags");return e&&e.get===t||$l(r,"flags",{configurable:!0,enumerable:!1,get:t}),t},Xl=(0,ma.exports)(Yl());Jl(Xl,{getPolyfill:Yl,implementation:Hl,shim:Kl});var Ql,tp=Xl,rp=function(t){return"number"==typeof t&&t>=55296&&t<=56319},ep=function(t){return"number"==typeof t&&t>=56320&&t<=57343},np=Hs,op=np("%TypeError%"),ip=np("%String.fromCharCode%"),up=rp,ap=ep,sp=Hs("%TypeError%"),cp=pc,fp=rp,lp=ep,pp=Cf,hp=function(t,r){if(!up(t)||!ap(r))throw new op("Assertion failed: `lead` must be a leading surrogate char code, and `trail` must be a trailing surrogate char code");return ip(t)+ip(r)},yp=cp("String.prototype.charAt"),dp=cp("String.prototype.charCodeAt"),vp=Hs("%Math.abs%"),gp=function(t){return vp(t)},mp=Cf,Dp=Math.floor,wp=function(t){return"BigInt"===mp(t)?t:Dp(t)},bp=Number.isNaN||function(t){return t!=t},Ap=bp,xp=function(t){return("number"==typeof t||"bigint"==typeof t)&&!Ap(t)&&t!==1/0&&t!==-1/0},Ep=gp,Fp=wp,_p=Cf,Cp=bp,Sp=xp,Bp=Hs,Mp=Bp("%Math%"),Np=Bp("%Number%").MAX_SAFE_INTEGER||Mp.pow(2,53)-1,Op=function(t,r){if("String"!==pp(t))throw new sp("Assertion failed: `string` must be a String");var e=t.length;if(r<0||r>=e)throw new sp("Assertion failed: `position` must be >= 0, and < the length of `string`");var n=dp(t,r),o=yp(t,r),i=fp(n),u=lp(n);if(!i&&!u)return{"[[CodePoint]]":o,"[[CodeUnitCount]]":1,"[[IsUnpairedSurrogate]]":!1};if(u||r+1===e)return{"[[CodePoint]]":o,"[[CodeUnitCount]]":1,"[[IsUnpairedSurrogate]]":!0};var a=dp(t,r+1);return lp(a)?{"[[CodePoint]]":hp(n,a),"[[CodeUnitCount]]":2,"[[IsUnpairedSurrogate]]":!1}:{"[[CodePoint]]":o,"[[CodeUnitCount]]":1,"[[IsUnpairedSurrogate]]":!0}},Pp=function(t){if("Number"!==_p(t)||Cp(t)||!Sp(t))return!1;var r=Ep(t);return Fp(r)===r},jp=Cf,Tp=Np,Ip=Hs("%TypeError%"),kp=Hs("%TypeError%"),Rp=Cf,zp=Xs,Up=Hs,Wp=zp()&&Up("%Object.defineProperty%",!0),qp=zp.hasArrayLengthDefineBug(),Lp=qp&&dc,$p=pc("Object.prototype.propertyIsEnumerable"),Gp=function(t,r,e,n,o,i){if(!Wp){if(!t(i))return!1;if(!i["[[Configurable]]"]||!i["[[Writable]]"])return!1;if(o in n&&$p(n,o)!==!!i["[[Enumerable]]"])return!1;var u=i["[[Value]]"];return n[o]=u,r(n[o],u)}return qp&&"length"===o&&"[[Value]]"in i&&Lp(n)&&n.length!==i["[[Value]]"]?(n.length=i["[[Value]]"],n.length===i["[[Value]]"]):(Wp(n,o,e(i)),!0)},Zp=Ca,Vp=Hs,Jp=Vp("%TypeError%"),Hp=Vp("%SyntaxError%"),Yp=Ca,Kp={"Property Descriptor":function(t){var r={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var e in t)if(Yp(t,e)&&!r[e])return!1;var n=Yp(t,"[[Value]]"),o=Yp(t,"[[Get]]")||Yp(t,"[[Set]]");if(n&&o)throw new Jp("Property Descriptors may not be both accessor and data descriptors");return!0},"Match Record":function(t){return Zp(t,"[[StartIndex]]")&&Zp(t,"[[EndIndex]]")&&t["[[StartIndex]]"]>=0&&t["[[EndIndex]]"]>=t["[[StartIndex]]"]&&String(parseInt(t["[[StartIndex]]"],10))===String(t["[[StartIndex]]"])&&String(parseInt(t["[[EndIndex]]"],10))===String(t["[[EndIndex]]"])},"Iterator Record":function(t){return Yp(t,"[[Iterator]]")&&Yp(t,"[[NextMethod]]")&&Yp(t,"[[Done]]")},"PromiseCapability Record":function(t){return t&&Yp(t,"[[Resolve]]")&&"function"==typeof t["[[Resolve]]"]&&Yp(t,"[[Reject]]")&&"function"==typeof t["[[Reject]]"]&&Yp(t,"[[Promise]]")&&t["[[Promise]]"]&&"function"==typeof t["[[Promise]]"].then},"AsyncGeneratorRequest Record":function(t){return t&&Yp(t,"[[Completion]]")&&Yp(t,"[[Capability]]")&&Kp["PromiseCapability Record"](t["[[Capability]]"])}},Xp=function(t,r,e,n){var o=Kp[r];if("function"!=typeof o)throw new Hp("unknown record type: "+r);if("Object"!==t(n)||!o(n))throw new Jp(e+" must be a "+r)},Qp=Xp,th=function(t){if(void 0===t)return t;var r={};return"[[Value]]"in t&&(r.value=t["[[Value]]"]),"[[Writable]]"in t&&(r.writable=!!t["[[Writable]]"]),"[[Get]]"in t&&(r.get=t["[[Get]]"]),"[[Set]]"in t&&(r.set=t["[[Set]]"]),"[[Enumerable]]"in t&&(r.enumerable=!!t["[[Enumerable]]"]),"[[Configurable]]"in t&&(r.configurable=!!t["[[Configurable]]"]),r},rh=Cf,eh=function(t){return void 0!==t&&Qp(rh,"Property Descriptor","Desc",t),th(t)},nh=Ca,oh=Xp,ih=Cf,uh=function(t){return void 0!==t&&(oh(ih,"Property Descriptor","Desc",t),!(!nh(t,"[[Value]]")&&!nh(t,"[[Writable]]")))},ah=bp,sh=function(t,r){return t===r?0!==t||1/t==1/r:ah(t)&&ah(r)},ch=Hs("%TypeError%"),fh=Gp,lh=eh,ph=uh,hh=Ff,yh=sh,dh=Cf,vh="undefined"!=typeof Symbol&&Symbol,gh=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"===o(Symbol.iterator))return!0;var t={},r=Symbol("test"),e=Object(r);if("string"==typeof r)return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;for(r in t[r]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==r)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,r);if(42!==i.value||!0!==i.enumerable)return!1}return!0},mh=SyntaxError,Dh=Function,wh=TypeError,bh=function(t){try{return Dh('"use strict"; return ('+t+").constructor;")()}catch(t){}},Ah=Object.getOwnPropertyDescriptor;if(Ah)try{Ah({},"")}catch(t){Ah=null}var xh=function(){throw new wh},Eh=Ah?function(){try{return xh}catch(t){try{return Ah(arguments,"callee").get}catch(t){return xh}}}():xh,Fh="function"==typeof vh&&"function"==typeof Symbol&&"symbol"===o(vh("foo"))&&"symbol"===o(Symbol("bar"))&&gh(),_h=Object.getPrototypeOf||function(t){return t.__proto__},Ch={},Sh="undefined"==typeof Uint8Array?Ql:_h(Uint8Array),Bh={"%AggregateError%":"undefined"==typeof AggregateError?Ql:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?Ql:ArrayBuffer,"%ArrayIteratorPrototype%":Fh?_h([][Symbol.iterator]()):Ql,"%AsyncFromSyncIteratorPrototype%":Ql,"%AsyncFunction%":Ch,"%AsyncGenerator%":Ch,"%AsyncGeneratorFunction%":Ch,"%AsyncIteratorPrototype%":Ch,"%Atomics%":"undefined"==typeof Atomics?Ql:Atomics,"%BigInt%":"undefined"==typeof BigInt?Ql:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?Ql:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?Ql:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?Ql:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?Ql:FinalizationRegistry,"%Function%":Dh,"%GeneratorFunction%":Ch,"%Int8Array%":"undefined"==typeof Int8Array?Ql:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?Ql:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?Ql:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":Fh?_h(_h([][Symbol.iterator]())):Ql,"%JSON%":"object"===("undefined"==typeof JSON?"undefined":o(JSON))?JSON:Ql,"%Map%":"undefined"==typeof Map?Ql:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&Fh?_h((new Map)[Symbol.iterator]()):Ql,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?Ql:Promise,"%Proxy%":"undefined"==typeof Proxy?Ql:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?Ql:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?Ql:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&Fh?_h((new Set)[Symbol.iterator]()):Ql,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?Ql:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":Fh?_h(""[Symbol.iterator]()):Ql,"%Symbol%":Fh?Symbol:Ql,"%SyntaxError%":mh,"%ThrowTypeError%":Eh,"%TypedArray%":Sh,"%TypeError%":wh,"%Uint8Array%":"undefined"==typeof Uint8Array?Ql:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?Ql:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?Ql:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?Ql:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?Ql:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?Ql:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?Ql:WeakSet},Mh=function t(r){var e;if("%AsyncFunction%"===r)e=bh("async function () {}");else if("%GeneratorFunction%"===r)e=bh("function* () {}");else if("%AsyncGeneratorFunction%"===r)e=bh("async function* () {}");else if("%AsyncGenerator%"===r){var n=t("%AsyncGeneratorFunction%");n&&(e=n.prototype)}else if("%AsyncIteratorPrototype%"===r){var o=t("%AsyncGenerator%");o&&(e=_h(o.prototype))}return Bh[r]=e,e},Nh={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},Oh=Ea,Ph=Ca,jh=Oh.call(Function.call,Array.prototype.concat),Th=Oh.call(Function.apply,Array.prototype.splice),Ih=Oh.call(Function.call,String.prototype.replace),kh=Oh.call(Function.call,String.prototype.slice),Rh=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,zh=/\\(\\)?/g,Uh=function(t){var r=kh(t,0,1),e=kh(t,-1);if("%"===r&&"%"!==e)throw new mh("invalid intrinsic syntax, expected closing `%`");if("%"===e&&"%"!==r)throw new mh("invalid intrinsic syntax, expected opening `%`");var n=[];return Ih(t,Rh,(function(t,r,e,o){n[n.length]=e?Ih(o,zh,"$1"):r||t})),n},Wh=function(t,r){var e,n=t;if(Ph(Nh,n)&&(n="%"+(e=Nh[n])[0]+"%"),Ph(Bh,n)){var o=Bh[n];if(o===Ch&&(o=Mh(n)),void 0===o&&!r)throw new wh("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:e,name:n,value:o}}throw new mh("intrinsic "+t+" does not exist!")},qh=function(t,r){if("string"!=typeof t||0===t.length)throw new wh("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof r)throw new wh('"allowMissing" argument must be a boolean');var e=Uh(t),n=e.length>0?e[0]:"",o=Wh("%"+n+"%",r),i=o.name,u=o.value,a=!1,s=o.alias;s&&(n=s[0],Th(e,jh([0,1],s)));for(var c=1,f=!0;c<e.length;c+=1){var l=e[c],p=kh(l,0,1),h=kh(l,-1);if(('"'===p||"'"===p||"`"===p||'"'===h||"'"===h||"`"===h)&&p!==h)throw new mh("property names with quotes must have matching quotes");if("constructor"!==l&&f||(a=!0),Ph(Bh,i="%"+(n+="."+l)+"%"))u=Bh[i];else if(null!=u){if(!(l in u)){if(!r)throw new wh("base intrinsic for "+t+" exists, but the property is not available.");return}if(Ah&&c+1>=e.length){var y=Ah(u,l);u=(f=!!y)&&"get"in y&&!("originalValue"in y.get)?y.get:u[l]}else f=Ph(u,l),u=u[l];f&&!a&&(Bh[i]=u)}}return u},Lh=pc,$h=uf,Gh=qh("%TypeError%"),Zh=qh("%WeakMap%",!0),Vh=qh("%Map%",!0),Jh=Lh("WeakMap.prototype.get",!0),Hh=Lh("WeakMap.prototype.set",!0),Yh=Lh("WeakMap.prototype.has",!0),Kh=Lh("Map.prototype.get",!0),Xh=Lh("Map.prototype.set",!0),Qh=Lh("Map.prototype.has",!0),ty=function(t,r){for(var e,n=t;null!==(e=n.next);n=e)if(e.key===r)return n.next=e.next,e.next=t.next,t.next=e,e},ry=Hs,ey=Ca,ny=function(){var t,r,e,n={assert:function(t){if(!n.has(t))throw new Gh("Side channel does not contain "+$h(t))},get:function(n){if(Zh&&n&&("object"===o(n)||"function"==typeof n)){if(t)return Jh(t,n)}else if(Vh){if(r)return Kh(r,n)}else if(e)return function(t,r){var e=ty(t,r);return e&&e.value}(e,n)},has:function(n){if(Zh&&n&&("object"===o(n)||"function"==typeof n)){if(t)return Yh(t,n)}else if(Vh){if(r)return Qh(r,n)}else if(e)return function(t,r){return!!ty(t,r)}(e,n);return!1},set:function(n,i){Zh&&n&&("object"===o(n)||"function"==typeof n)?(t||(t=new Zh),Hh(t,n,i)):Vh?(r||(r=new Vh),Xh(r,n,i)):(e||(e={key:{},next:null}),function(t,r,e){var n=ty(t,r);n?n.value=e:t.next={key:r,next:t.next,value:e}}(e,n,i))}};return n}(),oy=ry("%TypeError%"),iy={assert:function(t,r){if(!t||"object"!==o(t)&&"function"!=typeof t)throw new oy("`O` is not an object");if("string"!=typeof r)throw new oy("`slot` must be a string");if(ny.assert(t),!iy.has(t,r))throw new oy("`slot` is not present on `O`")},get:function(t,r){if(!t||"object"!==o(t)&&"function"!=typeof t)throw new oy("`O` is not an object");if("string"!=typeof r)throw new oy("`slot` must be a string");var e=ny.get(t);return e&&e["$"+r]},has:function(t,r){if(!t||"object"!==o(t)&&"function"!=typeof t)throw new oy("`O` is not an object");if("string"!=typeof r)throw new oy("`slot` must be a string");var e=ny.get(t);return!!e&&ey(e,"$"+r)},set:function(t,r,e){if(!t||"object"!==o(t)&&"function"!=typeof t)throw new oy("`O` is not an object");if("string"!=typeof r)throw new oy("`slot` must be a string");var n=ny.get(t);n||(n={},ny.set(t,n)),n["$"+r]=e}};Object.freeze&&Object.freeze(iy);var uy=iy,ay={foo:{}},sy=Object,cy=Hs,fy=cy("%Object.create%",!0),ly=cy("%TypeError%"),py=cy("%SyntaxError%"),hy=vc,yy=Cf,dy=function(t,r){for(var e=0;e<t.length;e+=1)r(t[e],e,t)},vy=uy,gy={__proto__:ay}.foo===ay.foo&&!({__proto__:null}instanceof sy),my=Hs("%TypeError%"),Dy=pc("RegExp.prototype.exec"),wy=Ac,by=Of,Ay=rl,xy=Cf,Ey=Hs("%TypeError%"),Fy=Ff,_y=sh,Cy=Cf,Sy=function(){try{return delete[].length,!0}catch(t){return!1}}(),By=function(t,r,e,n){if("Object"!==Cy(t))throw new Ey("Assertion failed: `O` must be an Object");if(!Fy(r))throw new Ey("Assertion failed: `P` must be a Property Key");if("Boolean"!==Cy(n))throw new Ey("Assertion failed: `Throw` must be a Boolean");if(n){if(t[r]=e,Sy&&!_y(t[r],e))throw new Ey("Attempted to assign to readonly property.");return!0}try{return t[r]=e,!Sy||_y(t[r],e)}catch(t){return!1}},My=Date.prototype.getDay,Ny=Object.prototype.toString,Oy=sl(),Py={exports:{}},jy=Object.prototype.toString;if(xs()){var Ty=Symbol.prototype.toString,Iy=/^Symbol\(.*\)$/;Py.exports=function(t){if("symbol"===o(t))return!0;if("[object Symbol]"!==jy.call(t))return!1;try{return function(t){return"symbol"===o(t.valueOf())&&Iy.test(Ty.call(t))}(t)}catch(t){return!1}}}else Py.exports=function(t){return!1};var ky="function"==typeof Symbol&&"symbol"===o(Symbol.iterator),Ry=function(t){return null===t||"function"!=typeof t&&"object"!==o(t)},zy=tl,Uy=function(t){return"object"===o(t)&&null!==t&&(Oy?function(t){try{return My.call(t),!0}catch(t){return!1}}(t):"[object Date]"===Ny.call(t))},Wy=Py.exports,qy=function(t,r){if(null==t)throw new TypeError("Cannot call method on "+t);if("string"!=typeof r||"number"!==r&&"string"!==r)throw new TypeError('hint must be "string" or "number"');var e,n,o,i="string"===r?["toString","valueOf"]:["valueOf","toString"];for(o=0;o<i.length;++o)if(e=t[i[o]],zy(e)&&(n=e.call(t),Ry(n)))return n;throw new TypeError("No default value")},Ly=function(t,r){var e=t[r];if(null!=e){if(!zy(e))throw new TypeError(e+" returned for property "+r+" of object "+t+" is not a function");return e}},$y=function(t){if(Ry(t))return t;var r,e="default";if(arguments.length>1&&(arguments[1]===String?e="string":arguments[1]===Number&&(e="number")),ky&&(Symbol.toPrimitive?r=Ly(t,Symbol.toPrimitive):Wy(t)&&(r=Symbol.prototype.valueOf)),void 0!==r){var n=r.call(t,e);if(Ry(n))return n;throw new TypeError("unable to convert exotic object to primitive")}return"default"===e&&(Uy(t)||Wy(t))&&(e="string"),qy(t,"default"===e?"number":e)},Gy=Hs,Zy=yl,Vy=pc("RegExp.prototype.exec"),Jy=Gy("%TypeError%"),Hy=Hs,Yy=Hy("%Number%"),Ky=Hy("%RegExp%"),Xy=Hy("%TypeError%"),Qy=Hy("%parseInt%"),td=pc,rd=function(t){if(!Zy(t))throw new Jy("`regex` must be a RegExp");return function(r){return null!==Vy(t,r)}},ed=td("String.prototype.slice"),nd=rd(/^0b[01]+$/i),od=rd(/^0o[0-7]+$/i),id=rd(/^[-+]0x[0-9a-f]+$/i),ud=rd(new Ky("["+["","​","￾"].join("")+"]","g")),ad=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),sd=new RegExp("(^["+ad+"]+)|(["+ad+"]+$)","g"),cd=td("String.prototype.replace"),fd=Cf,ld=Hs,pd=ld("%TypeError%"),hd=ld("%Number%"),yd=function(t){return null===t||"function"!=typeof t&&"object"!==o(t)},dd=function(t){return arguments.length>1?$y(t,arguments[1]):$y(t)},vd=function t(r){if("String"!==fd(r))throw new Xy("Assertion failed: `argument` is not a String");if(nd(r))return Yy(Qy(ed(r,2),2));if(od(r))return Yy(Qy(ed(r,2),8));if(ud(r)||id(r))return NaN;var e=cd(r,sd,"");return e!==r?t(e):Yy(r)},gd=gp,md=wp,Dd=function(t){var r=yd(t)?t:dd(t,hd);if("symbol"===o(r))throw new pd("Cannot convert a Symbol value to a number");if("bigint"==typeof r)throw new pd("Conversion from 'BigInt' to 'number' is not allowed.");return"string"==typeof r?vd(r):hd(r)},wd=bp,bd=xp,Ad=function(t){return t>=0?1:-1},xd=Np,Ed=function(t){var r=Dd(t);if(wd(r)||0===r)return 0;if(!bd(r))return r;var e=md(gd(r));return 0===e?0:Ad(r)*e},Fd=function(t){var r=Ed(t);return r<=0?0:r>xd?xd:r},_d=Hs("%Object.defineProperty%",!0),Cd=sl(),Sd=Ca,Bd=Cd?Symbol.toStringTag:null,Md=Hs,Nd=xs(),Od=Md("%TypeError%"),Pd=Md("%IteratorPrototype%",!0),jd=function(t,r,e){if("String"!==jp(t))throw new Ip("Assertion failed: `S` must be a String");if(!Pp(r)||r<0||r>Tp)throw new Ip("Assertion failed: `length` must be an integer >= 0 and <= 2**53");if("Boolean"!==jp(e))throw new Ip("Assertion failed: `unicode` must be a Boolean");return e?r+1>=t.length?r+1:r+Op(t,r)["[[CodeUnitCount]]"]:r+1},Td=function(t,r){if("Boolean"!==Rp(r))throw new kp("Assertion failed: Type(done) is not Boolean");return{value:t,done:r}},Id=function(t,r,e){if("Object"!==dh(t))throw new ch("Assertion failed: Type(O) is not Object");if(!hh(r))throw new ch("Assertion failed: IsPropertyKey(P) is not true");return fh(ph,yh,lh,t,r,{"[[Configurable]]":!0,"[[Enumerable]]":!1,"[[Value]]":e,"[[Writable]]":!0})},kd=Of,Rd=function(t){if(null!==t&&"Object"!==yy(t))throw new ly("Assertion failed: `proto` must be null or an object");var r,e=arguments.length<2?[]:arguments[1];if(!hy(e))throw new ly("Assertion failed: `additionalInternalSlotsList` must be an Array");if(fy)r=fy(t);else if(gy)r={__proto__:t};else{if(null===t)throw new py("native Object.create support is required to create null objects");var n=function(){};n.prototype=t,r=new n}return e.length>0&&dy(e,(function(t){vy.set(r,t,void 0)})),r},zd=function(t,r){if("Object"!==xy(t))throw new my("Assertion failed: `R` must be an Object");if("String"!==xy(r))throw new my("Assertion failed: `S` must be a String");var e=by(t,"exec");if(Ay(e)){var n=wy(e,t,[r]);if(null===n||"Object"===xy(n))return n;throw new my('"exec" method must return `null` or an Object')}return Dy(t,r)},Ud=By,Wd=Fd,qd=Al,Ld=Cf,$d=uy,Gd=function(t,r){var e=arguments.length>2&&arguments[2]&&arguments[2].force;!Bd||!e&&Sd(t,Bd)||(_d?_d(t,Bd,{configurable:!0,enumerable:!1,value:r,writable:!1}):t[Bd]=r)},Zd=function(t,r,e,n){if("String"!==Ld(r))throw new Od("`S` must be a string");if("Boolean"!==Ld(e))throw new Od("`global` must be a boolean");if("Boolean"!==Ld(n))throw new Od("`fullUnicode` must be a boolean");$d.set(this,"[[IteratingRegExp]]",t),$d.set(this,"[[IteratedString]]",r),$d.set(this,"[[Global]]",e),$d.set(this,"[[Unicode]]",n),$d.set(this,"[[Done]]",!1)};Pd&&(Zd.prototype=Rd(Pd));if(Id(Zd.prototype,"next",(function(){var t=this;if("Object"!==Ld(t))throw new Od("receiver must be an object");if(!(t instanceof Zd&&$d.has(t,"[[IteratingRegExp]]")&&$d.has(t,"[[IteratedString]]")&&$d.has(t,"[[Global]]")&&$d.has(t,"[[Unicode]]")&&$d.has(t,"[[Done]]")))throw new Od('"this" value must be a RegExpStringIterator instance');if($d.get(t,"[[Done]]"))return Td(void 0,!0);var r=$d.get(t,"[[IteratingRegExp]]"),e=$d.get(t,"[[IteratedString]]"),n=$d.get(t,"[[Global]]"),o=$d.get(t,"[[Unicode]]"),i=zd(r,e);if(null===i)return $d.set(t,"[[Done]]",!0),Td(void 0,!0);if(n){if(""===qd(kd(i,"0"))){var u=Wd(kd(r,"lastIndex")),a=jd(e,u,o);Ud(r,"lastIndex",a,!0)}return Td(i,!1)}return $d.set(t,"[[Done]]",!0),Td(i,!1)})),Nd&&(Gd(Zd.prototype,"RegExp String Iterator"),Symbol.iterator&&"function"!=typeof Zd.prototype[Symbol.iterator])){Id(Zd.prototype,Symbol.iterator,(function(){return this}))}var Vd={exports:{}},Jd=Hs,Hd=Ca,Yd=Hs("%TypeError%"),Kd=Ca,Xd=Xp,Qd=Cf,tv=Ca,rv=Hs("%TypeError%"),ev=Cf,nv=dl,ov=rl,iv=Hs("%TypeError%"),uv=function(t,r){if("Object"!==t.Type(r))return!1;var e={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var n in r)if(Hd(r,n)&&!e[n])return!1;if(t.IsDataDescriptor(r)&&t.IsAccessorDescriptor(r))throw new Yd("Property Descriptors may not be both accessor and data descriptors");return!0},av=Gp,sv=eh,cv=function(t){return void 0!==t&&(Xd(Qd,"Property Descriptor","Desc",t),!(!Kd(t,"[[Get]]")&&!Kd(t,"[[Set]]")))},fv=uh,lv=Ff,pv=sh,hv=function(t){if("Object"!==ev(t))throw new rv("ToPropertyDescriptor requires an object");var r={};if(tv(t,"enumerable")&&(r["[[Enumerable]]"]=nv(t.enumerable)),tv(t,"configurable")&&(r["[[Configurable]]"]=nv(t.configurable)),tv(t,"value")&&(r["[[Value]]"]=t.value),tv(t,"writable")&&(r["[[Writable]]"]=nv(t.writable)),tv(t,"get")){var e=t.get;if(void 0!==e&&!ov(e))throw new rv("getter must be a function");r["[[Get]]"]=e}if(tv(t,"set")){var n=t.set;if(void 0!==n&&!ov(n))throw new rv("setter must be a function");r["[[Set]]"]=n}if((tv(r,"[[Get]]")||tv(r,"[[Set]]"))&&(tv(r,"[[Value]]")||tv(r,"[[Writable]]")))throw new rv("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return r},yv=Cf,dv=Jd("%Reflect.construct%",!0),vv=function(t,r,e){if("Object"!==yv(t))throw new iv("Assertion failed: Type(O) is not Object");if(!lv(r))throw new iv("Assertion failed: IsPropertyKey(P) is not true");var n=uv({Type:yv,IsDataDescriptor:fv,IsAccessorDescriptor:cv},e)?e:hv(e);if(!uv({Type:yv,IsDataDescriptor:fv,IsAccessorDescriptor:cv},n))throw new iv("Assertion failed: Desc is not a valid Property Descriptor");return av(fv,pv,sv,t,r,n)};try{vv({},"",{"[[Get]]":function(){}})}catch(t){vv=null}if(vv&&dv){var gv={},mv={};vv(mv,"length",{"[[Get]]":function(){throw gv},"[[Enumerable]]":!0}),Vd.exports=function(t){try{dv(t,mv)}catch(t){return t===gv}}}else Vd.exports=function(t){return"function"==typeof t&&!!t.prototype};var Dv=Hs,wv=Dv("%Symbol.species%",!0),bv=Dv("%TypeError%"),Av=Vd.exports,xv=Cf,Ev=function(t,r,e,n){return new Zd(t,r,e,n)},Fv=Of,_v=By,Cv=function(t,r){if("Object"!==xv(t))throw new bv("Assertion failed: Type(O) is not Object");var e=t.constructor;if(void 0===e)return r;if("Object"!==xv(e))throw new bv("O.constructor is not an Object");var n=wv?e[wv]:void 0;if(null==n)return r;if(Av(n))return n;throw new bv("no constructor found")},Sv=Fd,Bv=Al,Mv=Cf,Nv=tp,Ov=pc("String.prototype.indexOf"),Pv=RegExp,jv="flags"in RegExp.prototype,Tv=function(t){var r=this;if("Object"!==Mv(r))throw new TypeError('"this" value must be an Object');var e=Bv(t),n=function(t,r){var e="flags"in r?Fv(r,"flags"):Bv(Nv(r));return{flags:e,matcher:new t(jv&&"string"==typeof e?r:t===Pv?r.source:r,e)}}(Cv(r,Pv),r),o=n.flags,i=n.matcher,u=Sv(Fv(r,"lastIndex"));_v(i,"lastIndex",u,!0);var a=Ov(o,"g")>-1,s=Ov(o,"u")>-1;return Ev(i,e,a,s)},Iv=Object.defineProperty,kv=Object.getOwnPropertyDescriptor;if(Iv&&kv){var Rv=kv(Tv,"name");Rv&&Rv.configurable&&Iv(Tv,"name",{value:"[Symbol.matchAll]"})}var zv=Tv,Uv=xs(),Wv=zv,qv=function(){return Uv&&"symbol"===o(Symbol.matchAll)&&"function"==typeof RegExp.prototype[Symbol.matchAll]?RegExp.prototype[Symbol.matchAll]:Wv},Lv=Ac,$v=Of,Gv=function(t,r){if(!il(r))throw new el("Assertion failed: IsPropertyKey(P) is not true");var e=nl(t,r);if(null!=e){if(!ol(e))throw new el(r+" is not a function: "+ul(e));return e}},Zv=function(t){if(!t||"object"!==o(t))return!1;if(vl){var r=t[vl];if(void 0!==r)return ml(r)}return gl(t)},Vv=Al,Jv=jf,Hv=pc,Yv=xs(),Kv=tp,Xv=Hv("String.prototype.indexOf"),Qv=qv,tg=function(t){var r=Qv();if(Yv&&"symbol"===o(Symbol.matchAll)){var e=Gv(t,Symbol.matchAll);return e===RegExp.prototype[Symbol.matchAll]&&e!==r?r:e}if(Zv(t))return r},rg=function(t){var r=Jv(this);if(null!=t){if(Zv(t)){var e="flags"in t?$v(t,"flags"):Kv(t);if(Jv(e),Xv(Vv(e),"g")<0)throw new TypeError("matchAll requires a global regular expression")}var n=tg(t);if(void 0!==n)return Lv(n,t,[r])}var o=Vv(r),i=new RegExp(t,"g");return Lv(tg(i),i,[o])},eg=rg,ng=function(){if(String.prototype.matchAll)try{"".matchAll(RegExp.prototype)}catch(t){return String.prototype.matchAll}return eg},og=sc,ig=xs(),ug=ng,ag=qv,sg=Object.defineProperty,cg=Object.getOwnPropertyDescriptor,fg=sc,lg=rg,pg=ng,hg=function(){var t=ug();if(og(String.prototype,{matchAll:t},{matchAll:function(){return String.prototype.matchAll!==t}}),ig){var r=Symbol.matchAll||(Symbol.for?Symbol.for("Symbol.matchAll"):Symbol("Symbol.matchAll"));if(og(Symbol,{matchAll:r},{matchAll:function(){return Symbol.matchAll!==r}}),sg&&cg){var e=cg(Symbol,r);e&&!e.configurable||sg(Symbol,r,{configurable:!1,enumerable:!1,value:r,writable:!1})}var n=ag(),o={};o[r]=n;var i={};i[r]=function(){return RegExp.prototype[r]!==n},og(RegExp.prototype,o,i)}return t},yg=(0,ma.exports)(lg);fg(yg,{getPolyfill:pg,implementation:lg,shim:hg});var dg,vg,gg=yg,mg=["B","MN","W"],Dg=["AB","AE","AW"],wg=["A","C","DM","GB","GW","HO","N","UC","V"],bg=["BM","DO","IT"],Ag=["AR","CR","LB","LN","MA","SL","SQ","TR"],xg=["AP","CA","FF","GM","ST","SZ"],Eg=["TE","KO","AN","BR","BT","CP","DT","EV","GN","GC","ON","OT","PB","PC","PW","RE","RO","RU","SO","TM","US","WR","WT"],Fg=["PI","PAI","NID"],_g=new RegExp(/([A-Z]*)\[([\s\S]*?)\]/),Cg=function(){function t(t,r,e){this.token=t,this.value=r,this.values=e||[r],this.type="-"}return t.prototype.toString=function(){return""+this.token+this.values.map((function(t){return"["+t+"]"})).join("")},t}(),Sg=function(t){function r(r,e,n){var o=t.call(this,r,e,n)||this;return o.type="move",o}return c(r,t),r.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new r(e[1],e[2]):new r("","")},r}(Cg),Bg=function(t){function r(r,e,n){var o=t.call(this,r,e,n)||this;return o.type="setup",o}return c(r,t),r.from=function(t){var e=t.match(_g),n="",o=p([],l(gg(t,/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return e&&(n=e[1]),new r(n,o.join(","),o)},r}(Cg),Mg=function(t){function r(r,e){var n=t.call(this,r,e)||this;return n.type="node-annotation",n}return c(r,t),r.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new r(e[1],e[2]):new r("","")},r}(Cg),Ng=function(t){function r(r,e){var n=t.call(this,r,e)||this;return n.type="move-annotation",n}return c(r,t),r.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new r(e[1],e[2]):new r("","")},r}(Cg),Og=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return c(r,t),r}(Cg),Pg=function(t){function r(r,e){var n=t.call(this,r,e)||this;return n.type="markup",n}return c(r,t),r.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new r(e[1],e[2]):new r("","")},r}(Cg),jg=function(t){function r(r,e){var n=t.call(this,r,e)||this;return n.type="root",n}return c(r,t),r.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new r(e[1],e[2]):new r("","")},r}(Cg),Tg=function(t){function r(r,e){var n=t.call(this,r,e)||this;return n.type="game-info",n}return c(r,t),r.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new r(e[1],e[2]):new r("","")},r}(Cg),Ig=function(t){function r(r,e){var n=t.call(this,r,e)||this;return n.type="custom",n}return c(r,t),r.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new r(e[1],e[2]):new r("","")},r}(Cg),kg=function(t){function r(r,e){var n=t.call(this,r,e)||this;return n.type="Timing",n}return c(r,t),r}(Cg),Rg=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return c(r,t),r}(Cg),zg=function t(r,e){var n,o,i=e.length;return i>=2?(n=e.slice(0,i/2),o=e.slice(i/2,i),function(t,r,e){for(var n=[],o=r.length,i=e.length;o>0&&i>0;)t(r[0],e[0])<=0?(n.push(r.shift()),o--):(n.push(e.shift()),i--);return o>0?n.push.apply(n,r):n.push.apply(n,e),n}(r,t(r,n),t(r,o))):e.slice()};dg=zg,vg=function(t,r,e){var n,o;for(n=0,o=r.length;n<o&&!(t(r[n],e)>0);n++);return n};var Ug=function(){var t;function r(t){return function(){return t}}function e(t){t=t||{},this.config=t,this.config.childrenPropertyName=t.childrenPropertyName||"children",this.config.modelComparatorFn=t.modelComparatorFn}function n(t,r){return r.parent=t,t.children.push(r),r}function o(t,r){this.config=t,this.model=r,this.children=[]}function i(t){return"function"==typeof t.config.modelComparatorFn}function u(t,r,e){var n;if(!(r instanceof o))throw new TypeError("Child must be of type Node.");if(r.parent=t,t.model[t.config.childrenPropertyName]instanceof Array||(t.model[t.config.childrenPropertyName]=[]),i(t))n=vg(t.config.modelComparatorFn,t.model[t.config.childrenPropertyName],r.model),t.model[t.config.childrenPropertyName].splice(n,0,r.model),t.children.splice(n,0,r);else if(void 0===e)t.model[t.config.childrenPropertyName].push(r.model),t.children.push(r);else{if(e<0||e>t.children.length)throw new Error("Invalid index.");t.model[t.config.childrenPropertyName].splice(e,0,r.model),t.children.splice(e,0,r)}return r}function a(){var r={};if(1===arguments.length?"function"==typeof arguments[0]?r.fn=arguments[0]:r.options=arguments[0]:2===arguments.length?"function"==typeof arguments[0]?(r.fn=arguments[0],r.ctx=arguments[1]):(r.options=arguments[0],r.fn=arguments[1]):(r.options=arguments[0],r.fn=arguments[1],r.ctx=arguments[2]),r.options=r.options||{},r.options.strategy||(r.options.strategy="pre"),!t[r.options.strategy])throw new Error("Unknown tree walk strategy. Valid strategies are 'pre' [default], 'post' and 'breadth'.");return r}return t={},e.prototype.parse=function(t){var r,e,i;if(!(t instanceof Object))throw new TypeError("Model must be of type object.");if(i=new o(this.config,t),t[this.config.childrenPropertyName]instanceof Array)for(this.config.modelComparatorFn&&(t[this.config.childrenPropertyName]=dg(this.config.modelComparatorFn,t[this.config.childrenPropertyName])),r=0,e=t[this.config.childrenPropertyName].length;r<e;r++)n(i,this.parse(t[this.config.childrenPropertyName][r]));return i},o.prototype.isRoot=function(){return void 0===this.parent},o.prototype.hasChildren=function(){return this.children.length>0},o.prototype.addChild=function(t){return u(this,t)},o.prototype.addChildAtIndex=function(t,r){if(i(this))throw new Error("Cannot add child at index when using a comparator function.");return u(this,t,r)},o.prototype.setIndex=function(t){if(i(this))throw new Error("Cannot set node index when using a comparator function.");if(this.isRoot()){if(0===t)return this;throw new Error("Invalid index.")}if(t<0||t>=this.parent.children.length)throw new Error("Invalid index.");var r=this.parent.children.indexOf(this);return this.parent.children.splice(t,0,this.parent.children.splice(r,1)[0]),this.parent.model[this.parent.config.childrenPropertyName].splice(t,0,this.parent.model[this.parent.config.childrenPropertyName].splice(r,1)[0]),this},o.prototype.getPath=function(){var t=[];return function r(e){t.unshift(e),e.isRoot()||r(e.parent)}(this),t},o.prototype.getIndex=function(){return this.isRoot()?0:this.parent.children.indexOf(this)},o.prototype.walk=function(){var r;r=a.apply(this,arguments),t[r.options.strategy].call(this,r.fn,r.ctx)},t.pre=function t(r,e){var n,o,i;for(i=r.call(e,this),n=0,o=this.children.length;n<o;n++){if(!1===i)return!1;i=t.call(this.children[n],r,e)}return i},t.post=function t(r,e){var n,o;for(n=0,o=this.children.length;n<o;n++)if(!1===t.call(this.children[n],r,e))return!1;return r.call(e,this)},t.breadth=function(t,r){var e=[this];!function n(){var o,i,u;if(0!==e.length){for(o=0,i=(u=e.shift()).children.length;o<i;o++)e.push(u.children[o]);!1!==t.call(r,u)&&n()}}()},o.prototype.all=function(){var e,n=[];return(e=a.apply(this,arguments)).fn=e.fn||r(!0),t[e.options.strategy].call(this,(function(t){e.fn.call(e.ctx,t)&&n.push(t)}),e.ctx),n},o.prototype.first=function(){var e,n;return(e=a.apply(this,arguments)).fn=e.fn||r(!0),t[e.options.strategy].call(this,(function(t){if(e.fn.call(e.ctx,t))return n=t,!1}),e.ctx),n},o.prototype.drop=function(){var t;return this.isRoot()||(t=this.parent.children.indexOf(this),this.parent.children.splice(t,1),this.parent.model[this.config.childrenPropertyName].splice(t,1),this.parent=void 0,delete this.parent),this},e}(),Wg=function(){function t(){this.NEW_NODE=";",this.BRANCHING=["(",")"],this.PROPERTY=["[","]"],this.LIST_IDENTITIES=["AW","AB","AE","AR","CR","DD","LB","LN","MA","SL","SQ","TR","VW","TB","TW"],this.NODE_DELIMITERS=[this.NEW_NODE].concat(this.BRANCHING),this.tree=new Ug,this.root=null,this.node=null,this.currentNode=null,this.parentNode=null,this.nodeProps=new Map,this.sgf=""}return t.prototype.fromRoot=function(t){return this.root=t,this},t.prototype.nodeToString=function(t){var r=this,e="";return t.walk((function(t){var n=t.model,o=n.rootProps,i=n.moveProps,u=n.customProps,a=n.setupProps,s=n.markupProps,c=n.nodeAnnotationProps,f=n.moveAnnotationProps,h=n.gameInfoProps,y=d.exports.compact(p(p(p(p(p(p(p(p([],l(o),!1),l(u),!1),l(i),!1),l(Ft(a)),!1),l(Ft(s)),!1),l(h),!1),l(c),!1),l(f),!1));return e+=";",y.forEach((function(t){e+=t.toString()})),t.children.length>1&&t.children.forEach((function(t){e+="("+r.nodeToString(t)+")"})),t.children.length<2})),e},t.prototype.toSgf=function(){return"("+this.nodeToString(this.root)+")"},t.prototype.toSgfWithoutAnalysis=function(){var t="("+this.nodeToString(this.root)+")";return d.exports.replace(t,/](A\[.*?\])/g,"]")},t.prototype.parse=function(t){if(t)for(var r=0,e=0,n=[],o=function(o){var u=t[o];if(i.NODE_DELIMITERS.includes(u)){var a=t.slice(r,o);if(""!==a){var s=[],c=[],f=[],h=[],y=[],d=[],v=[],g=[],m=p([],l(gg(a,RegExp(/[A-Z]+(\[[\s\S]*?\]){1,}/,"g"))),!1);if(m.forEach((function(t){var r=t[0].match(/([A-Z]+)\[/);if(r){var e=r[1];mg.includes(e)&&s.push(Sg.from(t[0])),Dg.includes(e)&&c.push(Bg.from(t[0])),xg.includes(e)&&f.push(jg.from(t[0])),Ag.includes(e)&&h.push(Pg.from(t[0])),Eg.includes(e)&&y.push(Tg.from(t[0])),wg.includes(e)&&d.push(Mg.from(t[0])),bg.includes(e)&&v.push(Ng.from(t[0])),Fg.includes(e)&&g.push(Ig.from(t[0]))}})),m.length>0){var D=St(i.currentNode,s,c),w=i.tree.parse({id:D,name:D,index:e,number:0,moveProps:s,setupProps:c,rootProps:f,markupProps:h,gameInfoProps:y,nodeAnnotationProps:d,moveAnnotationProps:v,customProps:g});i.currentNode?(i.currentNode.addChild(w),w.model.number=Ct(w),w.model.children=[w]):(i.root=w,i.parentNode=w),i.currentNode=w,e+=1}}}("("===u&&i.currentNode&&n.push(i.currentNode),")"===u&&n.length>0)&&((w=n.pop())&&(i.currentNode=w));i.NODE_DELIMITERS.includes(u)&&(r=o)},i=this,u=0;u<t.length;u++)o(u)},t}(),qg=new Ug,Lg=["FF[4]","GM[1]","CA[UTF-8]","AP[ghostgo:0.1.0]","SZ[19]","ST[0]"].map((function(t){return jg.from(t)}));return t.AnnotationProp=Og,t.CUSTOM_PROP_LIST=Fg,t.CustomProp=Ig,t.GAME_INFO_PROP_LIST=Eg,t.GameInfoProp=Tg,t.GhostBan=ga,t.LIST_OF_POINTS_PROP=["AB","AE","AW"],t.MARKUP_PROP_LIST=Ag,t.MISCELLANEOUS_PROP_LIST=["FG","PM","VW"],t.MOVE_ANNOTATION_PROP_LIST=bg,t.MOVE_PROP_LIST=mg,t.MarkupProp=Pg,t.MiscellaneousProp=Rg,t.MoveAnnotationProp=Ng,t.MoveProp=Sg,t.NODE_ANNOTATION_PROP_LIST=wg,t.NodeAnnotationProp=Mg,t.ROOT_PROP_LIST=xg,t.RootProp=jg,t.SETUP_PROP_LIST=Dg,t.SetupProp=Bg,t.Sgf=Wg,t.SgfPropBase=Cg,t.TIMING_PROP_LIST=["BL","OB","OW","WL"],t.TimingProp=kg,t.a1ToIndex=function(t,r){return void 0===r&&(r=19),vt.indexOf(t[0])*r+gt.indexOf(parseInt(t.substr(1),0))},t.a1ToPos=Nt,t.a1ToSGF=function(t,r,e,n){if(void 0===r&&(r="B"),void 0===e&&(e=0),void 0===n&&(n=0),"pass"===t)return r+"[]";var o=vt.indexOf(t[0])+e,i=gt.indexOf(parseInt(t.substr(1),0))+n;return r+"["+mt[o]+mt[i]+"]"},t.calcBoardSize=qt,t.calcCenter=Wt,t.calcMost=Ut,t.calcOffset=function(r){var e=qt(r),n=19-e[0],o=19-e[1],i=n,u=o;switch(Wt(r)){case t.Center.TopLeft:i=0,u=o;break;case t.Center.TopRight:i=-n,u=o;break;case t.Center.BottomLeft:i=0,u=0;break;case t.Center.BottomRight:i=-n,u=0}return{x:i,y:u}},t.calcSHA=St,t.calcScoreDiff=jt,t.calcScoreDiffText=Pt,t.calcVisibleArea=$t,t.calcWinrateDiff=Tt,t.calcWinrateDiffText=function(t,r,e){if(void 0===e&&(e=1),!t||!r)return"";var n=Tt(t,r),o=n.toFixed(e);return n>=0?"+"+o+"%":o+"%"},t.canMove=Ht,t.convertStepsForAI=function(t,r){void 0===r&&(r=0);var e=d.exports.clone(t);e=e.map((function(t){return Ot(t,r)}));var n="(;FF[4]GM[1]SZ["+(19-r)+"]GN[226]PB[Black]HA[0]PW[White]KM[7.5]DT[2017-08-01]TM[1800]RU[Chinese]CP[Copyright ghost-go.com]AP[ghost-go.com]PL[Black];",o=0,i="";return t.forEach((function(t,r){t[0]===i[0]&&("B"===t[0]?(e.splice(r+o,0,"W[tt]"),o+=1):(e.splice(r+o,0,"B[tt]"),o+=1)),i=t})),""+n+e.join(";")+")"},t.convertStoneTypeToString=function(t){return 1===t?"B":"W"},t.empty=kt,t.getDeduplicatedProps=Ft,t.getIndexFromAnalysis=function(t){return/indexes/.test(t.id)?JSON.parse(t.id).indexes[0]:""},t.getNodeNumber=Ct,t.initialRoot=function(){return qg.parse({id:"root",name:0,index:0,number:0,rootProps:Lg,moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]})},t.isAnswerNode=function(t,r){var e,n=null===(e=t.model.customProps)||void 0===e?void 0:e.find((function(t){return"PAI"===t.token}));return!!n&&JSON.parse(n.value).kind===r},t.isMainPath=function(t){return 0===d.exports.sum(t.getPath().map((function(t){return t.getIndex()})))},t.isMoveNode=_t,t.isRooNode=function(t){return t.model.moveProps.length>0},t.isSetupNode=function(t){return t.model.setupProps.length>0},t.matToListOfTuples=function(t,r,e){void 0===r&&(r=0),void 0===e&&(e=0);for(var n=[],o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var u=t[o][i];if(0!==u){var a=vt[o+r],s=gt[i+e],c=1===u?"B":"W";n.push([c,a+s])}}return n},t.matToPosition=function(t,r,e){void 0===r&&(r=0),void 0===e&&(e=0);for(var n="",o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var u=t[o][i];if(0!==u)n+=(1===u?"b":"w")+" "+vt[o+r]+gt[i+e]+" "}return n},t.move=function(t,r,e,n){if(r<0||e<0)return t;var o=d.exports.cloneDeep(t);return o[r][e]=n,Vt(o,r,e,-n)},t.nFormatter=Bt,t.pathToAiMoves=function(t,r,e){return void 0===r&&(r=0),void 0===e&&(e=0),t.filter((function(t){return t.model.moveProps.length>0})).map((function(t){var n=t.model.moveProps[0],o=vt[mt.indexOf(n.value[0])+r],i=gt[mt.indexOf(n.value[1])+e];return[n.token,o+i]}))},t.pathToIndexes=function(t){return t.map((function(t){return t.model.id}))},t.pathToInitialStones=function(t,r,e){void 0===r&&(r=0),void 0===e&&(e=0);var n=t.filter((function(t){return t.model.setupProps.length>0})).map((function(t){return t.model.setupProps.map((function(t){var n=vt[mt.indexOf(t.value[0])+r],o=gt[mt.indexOf(t.value[1])+e];return["AB"===t.token?"B":"W",n+o]}))}));return d.exports.flattenDepth(n[0],0)},t.posToSgf=function(t,r,e){var n=mt[t],o=mt[r];return 0===e?"":1===e?"B["+n+o+"]":-1===e?"W["+n+o+"]":""},t.reverseOffset=Lt,t.reverseOffsetA1Move=function(t,r,e){if("pass"===t)return t;var n=JSON.parse(e.id),o=Lt(r,n.bx,n.by),i=o.x,u=o.y,a=vt.indexOf(t[0])+i,s=gt.indexOf(parseInt(t.substr(1),0))+u;return""+vt[a]+gt[s]},t.round2=function(t,r,e){return void 0===r&&(r=1),void 0===e&&(e=2),(Math.round(100*t)/100*r).toFixed(e)},t.round3=Et,t.sgfOffset=Ot,t.sgfToA1=function(t){var r=Mt(t),e=r.x,n=r.y;return vt[e]+gt[n]},t.sgfToPos=Mt,t.showKi=function(t,r,e){void 0===e&&(e=!0);var n=d.exports.cloneDeep(t),o=!1;return r.forEach((function(t){var r=Mt(t),i=r.x,u=r.y,a=r.ki;e?Ht(n,i,u,a)&&(n[i][u]=a,n=Vt(n,i,u,-a),o=!0):(n[i][u]=a,o=!0)})),{arrangement:n,hasMoved:o}},t.zeros=It,Object.defineProperty(t,"__esModule",{value:!0}),t}({},require$$0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
