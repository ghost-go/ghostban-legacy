import { Theme, Ki, Analysis } from './types';
export declare type GhostBanOptions = {
    boardSize: number;
    size?: number;
    padding: number;
    zoom?: boolean;
    extend: number;
    theme: Theme;
    coordinate: boolean;
    interactive: boolean;
    background: boolean;
};
export declare type GhostBanOptionsParams = {
    boardSize?: number;
    size?: number;
    padding?: number;
    zoom?: boolean;
    extend?: number;
    theme?: Theme;
    interactive?: boolean;
    coordinate?: boolean;
    background?: boolean;
};
export declare class GhostBan {
    defaultOptions: GhostBanOptions;
    options: GhostBanOptions;
    dom: HTMLElement | undefined;
    canvas?: HTMLCanvasElement;
    board?: HTMLCanvasElement;
    analysisCanvas?: HTMLCanvasElement;
    cursorCanvas?: HTMLCanvasElement;
    markupCanvas?: HTMLCanvasElement;
    private _turn;
    cursor: [number, number];
    cursorPos: DOMPoint;
    mat: number[][];
    markup: (string | number)[][];
    maxhv: number;
    transMat: DOMMatrix;
    analysis: Analysis | null;
    visibleArea: number[][];
    constructor(options?: GhostBanOptionsParams);
    setTurn(turn: Ki): void;
    resize(): void;
    init(dom: HTMLElement): void;
    setOptions(options: GhostBanOptionsParams): void;
    setMat(mat: number[][]): void;
    setMarkup(markup: string[][]): void;
    renderInteractive(): void;
    setAnalysis(analysis: Analysis | null): void;
    setTheme(theme: Theme): void;
    calcBoardVisibleArea(zoom: boolean): void;
    render(): void;
    clearAllCanvas: () => void;
    clearBoard: () => void;
    clearCanvas: () => void;
    clearMarkupCanvas: () => void;
    clearCursorCanvas: () => void;
    clearAnalysisCanvas: () => void;
    drawAnalysis: (analysis: Analysis) => void;
    drawMarkup: (mat?: number[][], markup?: (string | number)[][]) => void;
    drawBoard: () => void;
    drawBan: () => void;
    drawBoardLine: () => void;
    drawStars: (visibleArea?: number[][]) => void;
    drawCoordinate: (visibleArea?: number[][]) => void;
    calcSpaceAndPadding: (canvas?: HTMLCanvasElement | undefined) => {
        space: number;
        scaledPadding: number;
    };
    drawCursor: () => void;
    drawStones: (mat?: number[][]) => void;
}
